#pragma once

#using <mscorlib.dll>
#using <System.dll>
#using <System.Data.dll>
#using <System.Xml.dll>

using namespace System::Security::Permissions;
[assembly:SecurityPermissionAttribute(SecurityAction::RequestMinimum, SkipVerification=false)];
// 
// This source code was auto-generated by xsd, Version=2.0.50727.3038.
// 
namespace SMP {
    using namespace System;
    ref class NewDataSet;
    
    
    /// <summary>
///Represents a strongly typed in-memory cache of data.
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
    System::Serializable, 
    System::ComponentModel::DesignerCategoryAttribute(L"code"), 
    System::ComponentModel::ToolboxItem(true), 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedDataSetSchema"), 
    System::Xml::Serialization::XmlRootAttribute(L"NewDataSet"), 
    System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.DataSet")]
    public ref class NewDataSet : public ::System::Data::DataSet {
        public : ref class levelDataTable;
        public : ref class spawnDataTable;
        public : ref class checkpointsDataTable;
        public : ref class checkpointDataTable;
        public : ref class backgroundsDataTable;
        public : ref class backgroundDataTable;
        public : ref class foregroundsDataTable;
        public : ref class foregroundDataTable;
        public : ref class objectsDataTable;
        public : ref class objectDataTable;
        public : ref class finishesDataTable;
        public : ref class finishDataTable;
        public : ref class projectilesDataTable;
        public : ref class projectileDataTable;
        public : ref class itemsDataTable;
        public : ref class itemDataTable;
        public : ref class monstersDataTable;
        public : ref class walking_monsterDataTable;
        public : ref class occ_monsterDataTable;
        public : ref class flying_monsterDataTable;
        public : ref class shell_monsterDataTable;
        public : ref class pipesDataTable;
        public : ref class pipeDataTable;
        public : ref class blocksDataTable;
        public : ref class tilesetDataTable;
        public : ref class blockDataTable;
        public : ref class layersDataTable;
        public : ref class layerDataTable;
        public : ref class occ_blockDataTable;
        public : ref class levelRow;
        public : ref class spawnRow;
        public : ref class checkpointsRow;
        public : ref class checkpointRow;
        public : ref class backgroundsRow;
        public : ref class backgroundRow;
        public : ref class foregroundsRow;
        public : ref class foregroundRow;
        public : ref class objectsRow;
        public : ref class objectRow;
        public : ref class finishesRow;
        public : ref class finishRow;
        public : ref class projectilesRow;
        public : ref class projectileRow;
        public : ref class itemsRow;
        public : ref class itemRow;
        public : ref class monstersRow;
        public : ref class walking_monsterRow;
        public : ref class occ_monsterRow;
        public : ref class flying_monsterRow;
        public : ref class shell_monsterRow;
        public : ref class pipesRow;
        public : ref class pipeRow;
        public : ref class blocksRow;
        public : ref class tilesetRow;
        public : ref class blockRow;
        public : ref class layersRow;
        public : ref class layerRow;
        public : ref class occ_blockRow;
        public : ref class levelRowChangeEvent;
        public : ref class spawnRowChangeEvent;
        public : ref class checkpointsRowChangeEvent;
        public : ref class checkpointRowChangeEvent;
        public : ref class backgroundsRowChangeEvent;
        public : ref class backgroundRowChangeEvent;
        public : ref class foregroundsRowChangeEvent;
        public : ref class foregroundRowChangeEvent;
        public : ref class objectsRowChangeEvent;
        public : ref class objectRowChangeEvent;
        public : ref class finishesRowChangeEvent;
        public : ref class finishRowChangeEvent;
        public : ref class projectilesRowChangeEvent;
        public : ref class projectileRowChangeEvent;
        public : ref class itemsRowChangeEvent;
        public : ref class itemRowChangeEvent;
        public : ref class monstersRowChangeEvent;
        public : ref class walking_monsterRowChangeEvent;
        public : ref class occ_monsterRowChangeEvent;
        public : ref class flying_monsterRowChangeEvent;
        public : ref class shell_monsterRowChangeEvent;
        public : ref class pipesRowChangeEvent;
        public : ref class pipeRowChangeEvent;
        public : ref class blocksRowChangeEvent;
        public : ref class tilesetRowChangeEvent;
        public : ref class blockRowChangeEvent;
        public : ref class layersRowChangeEvent;
        public : ref class layerRowChangeEvent;
        public : ref class occ_blockRowChangeEvent;
        
        private: SMP::NewDataSet::levelDataTable^  tablelevel;
        
        private: SMP::NewDataSet::spawnDataTable^  tablespawn;
        
        private: SMP::NewDataSet::checkpointsDataTable^  tablecheckpoints;
        
        private: SMP::NewDataSet::checkpointDataTable^  tablecheckpoint;
        
        private: SMP::NewDataSet::backgroundsDataTable^  tablebackgrounds;
        
        private: SMP::NewDataSet::backgroundDataTable^  tablebackground;
        
        private: SMP::NewDataSet::foregroundsDataTable^  tableforegrounds;
        
        private: SMP::NewDataSet::foregroundDataTable^  tableforeground;
        
        private: SMP::NewDataSet::objectsDataTable^  tableobjects;
        
        private: SMP::NewDataSet::objectDataTable^  tableobject;
        
        private: SMP::NewDataSet::finishesDataTable^  tablefinishes;
        
        private: SMP::NewDataSet::finishDataTable^  tablefinish;
        
        private: SMP::NewDataSet::projectilesDataTable^  tableprojectiles;
        
        private: SMP::NewDataSet::projectileDataTable^  tableprojectile;
        
        private: SMP::NewDataSet::itemsDataTable^  tableitems;
        
        private: SMP::NewDataSet::itemDataTable^  tableitem;
        
        private: SMP::NewDataSet::monstersDataTable^  tablemonsters;
        
        private: SMP::NewDataSet::walking_monsterDataTable^  tablewalking_monster;
        
        private: SMP::NewDataSet::occ_monsterDataTable^  tableocc_monster;
        
        private: SMP::NewDataSet::flying_monsterDataTable^  tableflying_monster;
        
        private: SMP::NewDataSet::shell_monsterDataTable^  tableshell_monster;
        
        private: SMP::NewDataSet::pipesDataTable^  tablepipes;
        
        private: SMP::NewDataSet::pipeDataTable^  tablepipe;
        
        private: SMP::NewDataSet::blocksDataTable^  tableblocks;
        
        private: SMP::NewDataSet::tilesetDataTable^  tabletileset;
        
        private: SMP::NewDataSet::blockDataTable^  tableblock;
        
        private: SMP::NewDataSet::layersDataTable^  tablelayers;
        
        private: SMP::NewDataSet::layerDataTable^  tablelayer;
        
        private: SMP::NewDataSet::occ_blockDataTable^  tableocc_block;
        
        private: ::System::Data::DataRelation^  relationlevel_spawn;
        
        private: ::System::Data::DataRelation^  relationlevel_checkpoints;
        
        private: ::System::Data::DataRelation^  relationcheckpoints_checkpoint;
        
        private: ::System::Data::DataRelation^  relationlevel_backgrounds;
        
        private: ::System::Data::DataRelation^  relationbackgrounds_background;
        
        private: ::System::Data::DataRelation^  relationlevel_foregrounds;
        
        private: ::System::Data::DataRelation^  relationforegrounds_foreground;
        
        private: ::System::Data::DataRelation^  relationlevel_objects;
        
        private: ::System::Data::DataRelation^  relationobjects_object;
        
        private: ::System::Data::DataRelation^  relationlevel_finishes;
        
        private: ::System::Data::DataRelation^  relationfinishes_finish;
        
        private: ::System::Data::DataRelation^  relationlevel_projectiles;
        
        private: ::System::Data::DataRelation^  relationprojectiles_projectile;
        
        private: ::System::Data::DataRelation^  relationlevel_items;
        
        private: ::System::Data::DataRelation^  relationitems_item;
        
        private: ::System::Data::DataRelation^  relationlevel_monsters;
        
        private: ::System::Data::DataRelation^  relationmonsters_walking_monster;
        
        private: ::System::Data::DataRelation^  relationwalking_monster_occ_monster;
        
        private: ::System::Data::DataRelation^  relationflying_monster_occ_monster;
        
        private: ::System::Data::DataRelation^  relationshell_monster_occ_monster;
        
        private: ::System::Data::DataRelation^  relationmonsters_flying_monster;
        
        private: ::System::Data::DataRelation^  relationmonsters_shell_monster;
        
        private: ::System::Data::DataRelation^  relationlevel_pipes;
        
        private: ::System::Data::DataRelation^  relationpipes_pipe;
        
        private: ::System::Data::DataRelation^  relationlevel_blocks;
        
        private: ::System::Data::DataRelation^  relationblocks_tileset;
        
        private: ::System::Data::DataRelation^  relationtileset_block;
        
        private: ::System::Data::DataRelation^  relationblocks_layers;
        
        private: ::System::Data::DataRelation^  relationlayers_layer;
        
        private: ::System::Data::DataRelation^  relationlayer_occ_block;
        
        private: ::System::Data::SchemaSerializationMode _schemaSerializationMode;
        
        public : delegate System::Void levelRowChangeEventHandler(::System::Object^  sender, SMP::NewDataSet::levelRowChangeEvent^  e);
        
        public : delegate System::Void spawnRowChangeEventHandler(::System::Object^  sender, SMP::NewDataSet::spawnRowChangeEvent^  e);
        
        public : delegate System::Void checkpointsRowChangeEventHandler(::System::Object^  sender, SMP::NewDataSet::checkpointsRowChangeEvent^  e);
        
        public : delegate System::Void checkpointRowChangeEventHandler(::System::Object^  sender, SMP::NewDataSet::checkpointRowChangeEvent^  e);
        
        public : delegate System::Void backgroundsRowChangeEventHandler(::System::Object^  sender, SMP::NewDataSet::backgroundsRowChangeEvent^  e);
        
        public : delegate System::Void backgroundRowChangeEventHandler(::System::Object^  sender, SMP::NewDataSet::backgroundRowChangeEvent^  e);
        
        public : delegate System::Void foregroundsRowChangeEventHandler(::System::Object^  sender, SMP::NewDataSet::foregroundsRowChangeEvent^  e);
        
        public : delegate System::Void foregroundRowChangeEventHandler(::System::Object^  sender, SMP::NewDataSet::foregroundRowChangeEvent^  e);
        
        public : delegate System::Void objectsRowChangeEventHandler(::System::Object^  sender, SMP::NewDataSet::objectsRowChangeEvent^  e);
        
        public : delegate System::Void objectRowChangeEventHandler(::System::Object^  sender, SMP::NewDataSet::objectRowChangeEvent^  e);
        
        public : delegate System::Void finishesRowChangeEventHandler(::System::Object^  sender, SMP::NewDataSet::finishesRowChangeEvent^  e);
        
        public : delegate System::Void finishRowChangeEventHandler(::System::Object^  sender, SMP::NewDataSet::finishRowChangeEvent^  e);
        
        public : delegate System::Void projectilesRowChangeEventHandler(::System::Object^  sender, SMP::NewDataSet::projectilesRowChangeEvent^  e);
        
        public : delegate System::Void projectileRowChangeEventHandler(::System::Object^  sender, SMP::NewDataSet::projectileRowChangeEvent^  e);
        
        public : delegate System::Void itemsRowChangeEventHandler(::System::Object^  sender, SMP::NewDataSet::itemsRowChangeEvent^  e);
        
        public : delegate System::Void itemRowChangeEventHandler(::System::Object^  sender, SMP::NewDataSet::itemRowChangeEvent^  e);
        
        public : delegate System::Void monstersRowChangeEventHandler(::System::Object^  sender, SMP::NewDataSet::monstersRowChangeEvent^  e);
        
        public : delegate System::Void walking_monsterRowChangeEventHandler(::System::Object^  sender, SMP::NewDataSet::walking_monsterRowChangeEvent^  e);
        
        public : delegate System::Void occ_monsterRowChangeEventHandler(::System::Object^  sender, SMP::NewDataSet::occ_monsterRowChangeEvent^  e);
        
        public : delegate System::Void flying_monsterRowChangeEventHandler(::System::Object^  sender, SMP::NewDataSet::flying_monsterRowChangeEvent^  e);
        
        public : delegate System::Void shell_monsterRowChangeEventHandler(::System::Object^  sender, SMP::NewDataSet::shell_monsterRowChangeEvent^  e);
        
        public : delegate System::Void pipesRowChangeEventHandler(::System::Object^  sender, SMP::NewDataSet::pipesRowChangeEvent^  e);
        
        public : delegate System::Void pipeRowChangeEventHandler(::System::Object^  sender, SMP::NewDataSet::pipeRowChangeEvent^  e);
        
        public : delegate System::Void blocksRowChangeEventHandler(::System::Object^  sender, SMP::NewDataSet::blocksRowChangeEvent^  e);
        
        public : delegate System::Void tilesetRowChangeEventHandler(::System::Object^  sender, SMP::NewDataSet::tilesetRowChangeEvent^  e);
        
        public : delegate System::Void blockRowChangeEventHandler(::System::Object^  sender, SMP::NewDataSet::blockRowChangeEvent^  e);
        
        public : delegate System::Void layersRowChangeEventHandler(::System::Object^  sender, SMP::NewDataSet::layersRowChangeEvent^  e);
        
        public : delegate System::Void layerRowChangeEventHandler(::System::Object^  sender, SMP::NewDataSet::layerRowChangeEvent^  e);
        
        public : delegate System::Void occ_blockRowChangeEventHandler(::System::Object^  sender, SMP::NewDataSet::occ_blockRowChangeEvent^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        NewDataSet();
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        NewDataSet(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property SMP::NewDataSet::levelDataTable^  level {
            SMP::NewDataSet::levelDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property SMP::NewDataSet::spawnDataTable^  spawn {
            SMP::NewDataSet::spawnDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property SMP::NewDataSet::checkpointsDataTable^  checkpoints {
            SMP::NewDataSet::checkpointsDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property SMP::NewDataSet::checkpointDataTable^  checkpoint {
            SMP::NewDataSet::checkpointDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property SMP::NewDataSet::backgroundsDataTable^  backgrounds {
            SMP::NewDataSet::backgroundsDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property SMP::NewDataSet::backgroundDataTable^  background {
            SMP::NewDataSet::backgroundDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property SMP::NewDataSet::foregroundsDataTable^  foregrounds {
            SMP::NewDataSet::foregroundsDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property SMP::NewDataSet::foregroundDataTable^  foreground {
            SMP::NewDataSet::foregroundDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property SMP::NewDataSet::objectsDataTable^  objects {
            SMP::NewDataSet::objectsDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property SMP::NewDataSet::objectDataTable^  object {
            SMP::NewDataSet::objectDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property SMP::NewDataSet::finishesDataTable^  finishes {
            SMP::NewDataSet::finishesDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property SMP::NewDataSet::finishDataTable^  finish {
            SMP::NewDataSet::finishDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property SMP::NewDataSet::projectilesDataTable^  projectiles {
            SMP::NewDataSet::projectilesDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property SMP::NewDataSet::projectileDataTable^  projectile {
            SMP::NewDataSet::projectileDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property SMP::NewDataSet::itemsDataTable^  items {
            SMP::NewDataSet::itemsDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property SMP::NewDataSet::itemDataTable^  item {
            SMP::NewDataSet::itemDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property SMP::NewDataSet::monstersDataTable^  monsters {
            SMP::NewDataSet::monstersDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property SMP::NewDataSet::walking_monsterDataTable^  walking_monster {
            SMP::NewDataSet::walking_monsterDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property SMP::NewDataSet::occ_monsterDataTable^  occ_monster {
            SMP::NewDataSet::occ_monsterDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property SMP::NewDataSet::flying_monsterDataTable^  flying_monster {
            SMP::NewDataSet::flying_monsterDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property SMP::NewDataSet::shell_monsterDataTable^  shell_monster {
            SMP::NewDataSet::shell_monsterDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property SMP::NewDataSet::pipesDataTable^  pipes {
            SMP::NewDataSet::pipesDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property SMP::NewDataSet::pipeDataTable^  pipe {
            SMP::NewDataSet::pipeDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property SMP::NewDataSet::blocksDataTable^  blocks {
            SMP::NewDataSet::blocksDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property SMP::NewDataSet::tilesetDataTable^  tileset {
            SMP::NewDataSet::tilesetDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property SMP::NewDataSet::blockDataTable^  block {
            SMP::NewDataSet::blockDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property SMP::NewDataSet::layersDataTable^  layers {
            SMP::NewDataSet::layersDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property SMP::NewDataSet::layerDataTable^  layer {
            SMP::NewDataSet::layerDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property SMP::NewDataSet::occ_blockDataTable^  occ_block {
            SMP::NewDataSet::occ_blockDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::BrowsableAttribute(true), 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Visible)]
        virtual property ::System::Data::SchemaSerializationMode SchemaSerializationMode {
            ::System::Data::SchemaSerializationMode get() override;
            System::Void set(::System::Data::SchemaSerializationMode value) override;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property ::System::Data::DataTableCollection^  Tables {
            ::System::Data::DataTableCollection^  get() new;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property ::System::Data::DataRelationCollection^  Relations {
            ::System::Data::DataRelationCollection^  get() new;
        }
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void InitializeDerivedDataSet() override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataSet^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Boolean ShouldSerializeTables() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Boolean ShouldSerializeRelations() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void ReadXmlSerializable(::System::Xml::XmlReader^  reader) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Xml::Schema::XmlSchema^  GetSchemaSerializable() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitVars();
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitVars(::System::Boolean initTable);
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitClass();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializelevel();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializespawn();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializecheckpoints();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializecheckpoint();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializebackgrounds();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializebackground();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeforegrounds();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeforeground();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeobjects();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeobject();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializefinishes();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializefinish();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeprojectiles();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeprojectile();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeitems();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeitem();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializemonsters();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializewalking_monster();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeocc_monster();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeflying_monster();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeshell_monster();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializepipes();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializepipe();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeblocks();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializetileset();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeblock();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializelayers();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializelayer();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeocc_block();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class levelDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnname;
            
            private: ::System::Data::DataColumn^  columnwidth;
            
            private: ::System::Data::DataColumn^  columnheight;
            
            private: ::System::Data::DataColumn^  columnmusic;
            
            private: ::System::Data::DataColumn^  columnlevel_Id;
            
            public: event SMP::NewDataSet::levelRowChangeEventHandler^  levelRowChanging;
            
            public: event SMP::NewDataSet::levelRowChangeEventHandler^  levelRowChanged;
            
            public: event SMP::NewDataSet::levelRowChangeEventHandler^  levelRowDeleting;
            
            public: event SMP::NewDataSet::levelRowChangeEventHandler^  levelRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            levelDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            levelDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            levelDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  nameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  widthColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  heightColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  musicColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  level_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::levelRow^  default [::System::Int32 ] {
                SMP::NewDataSet::levelRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddlevelRow(SMP::NewDataSet::levelRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::levelRow^  AddlevelRow(System::String^  name, System::Byte width, System::Byte height, System::String^  music);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::levelRow^  NewlevelRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemovelevelRow(SMP::NewDataSet::levelRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class spawnDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnpositionX;
            
            private: ::System::Data::DataColumn^  columnpositionY;
            
            private: ::System::Data::DataColumn^  columnlevel_Id;
            
            public: event SMP::NewDataSet::spawnRowChangeEventHandler^  spawnRowChanging;
            
            public: event SMP::NewDataSet::spawnRowChangeEventHandler^  spawnRowChanged;
            
            public: event SMP::NewDataSet::spawnRowChangeEventHandler^  spawnRowDeleting;
            
            public: event SMP::NewDataSet::spawnRowChangeEventHandler^  spawnRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            spawnDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            spawnDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            spawnDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  positionXColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  positionYColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  level_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::spawnRow^  default [::System::Int32 ] {
                SMP::NewDataSet::spawnRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddspawnRow(SMP::NewDataSet::spawnRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::spawnRow^  AddspawnRow(System::Single positionX, System::Single positionY, SMP::NewDataSet::levelRow^  parentlevelRowBylevel_spawn);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::spawnRow^  NewspawnRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemovespawnRow(SMP::NewDataSet::spawnRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class checkpointsDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columncheckpoints_Id;
            
            private: ::System::Data::DataColumn^  columnlevel_Id;
            
            public: event SMP::NewDataSet::checkpointsRowChangeEventHandler^  checkpointsRowChanging;
            
            public: event SMP::NewDataSet::checkpointsRowChangeEventHandler^  checkpointsRowChanged;
            
            public: event SMP::NewDataSet::checkpointsRowChangeEventHandler^  checkpointsRowDeleting;
            
            public: event SMP::NewDataSet::checkpointsRowChangeEventHandler^  checkpointsRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            checkpointsDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            checkpointsDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            checkpointsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  checkpoints_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  level_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::checkpointsRow^  default [::System::Int32 ] {
                SMP::NewDataSet::checkpointsRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddcheckpointsRow(SMP::NewDataSet::checkpointsRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::checkpointsRow^  AddcheckpointsRow(SMP::NewDataSet::levelRow^  parentlevelRowBylevel_checkpoints);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::checkpointsRow^  NewcheckpointsRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemovecheckpointsRow(SMP::NewDataSet::checkpointsRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class checkpointDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnimg;
            
            private: ::System::Data::DataColumn^  columnpositionX;
            
            private: ::System::Data::DataColumn^  columnpositionY;
            
            private: ::System::Data::DataColumn^  columncheckpoints_Id;
            
            public: event SMP::NewDataSet::checkpointRowChangeEventHandler^  checkpointRowChanging;
            
            public: event SMP::NewDataSet::checkpointRowChangeEventHandler^  checkpointRowChanged;
            
            public: event SMP::NewDataSet::checkpointRowChangeEventHandler^  checkpointRowDeleting;
            
            public: event SMP::NewDataSet::checkpointRowChangeEventHandler^  checkpointRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            checkpointDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            checkpointDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            checkpointDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  imgColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  positionXColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  positionYColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  checkpoints_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::checkpointRow^  default [::System::Int32 ] {
                SMP::NewDataSet::checkpointRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddcheckpointRow(SMP::NewDataSet::checkpointRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::checkpointRow^  AddcheckpointRow(System::String^  img, System::Single positionX, System::Single positionY, 
                        SMP::NewDataSet::checkpointsRow^  parentcheckpointsRowBycheckpoints_checkpoint);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::checkpointRow^  NewcheckpointRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemovecheckpointRow(SMP::NewDataSet::checkpointRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class backgroundsDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnbackgrounds_Id;
            
            private: ::System::Data::DataColumn^  columnlevel_Id;
            
            public: event SMP::NewDataSet::backgroundsRowChangeEventHandler^  backgroundsRowChanging;
            
            public: event SMP::NewDataSet::backgroundsRowChangeEventHandler^  backgroundsRowChanged;
            
            public: event SMP::NewDataSet::backgroundsRowChangeEventHandler^  backgroundsRowDeleting;
            
            public: event SMP::NewDataSet::backgroundsRowChangeEventHandler^  backgroundsRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            backgroundsDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            backgroundsDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            backgroundsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  backgrounds_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  level_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::backgroundsRow^  default [::System::Int32 ] {
                SMP::NewDataSet::backgroundsRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddbackgroundsRow(SMP::NewDataSet::backgroundsRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::backgroundsRow^  AddbackgroundsRow(SMP::NewDataSet::levelRow^  parentlevelRowBylevel_backgrounds);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::backgroundsRow^  NewbackgroundsRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemovebackgroundsRow(SMP::NewDataSet::backgroundsRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class backgroundDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnimg;
            
            private: ::System::Data::DataColumn^  columnpositionX;
            
            private: ::System::Data::DataColumn^  columnpositionY;
            
            private: ::System::Data::DataColumn^  columnbackgrounds_Id;
            
            public: event SMP::NewDataSet::backgroundRowChangeEventHandler^  backgroundRowChanging;
            
            public: event SMP::NewDataSet::backgroundRowChangeEventHandler^  backgroundRowChanged;
            
            public: event SMP::NewDataSet::backgroundRowChangeEventHandler^  backgroundRowDeleting;
            
            public: event SMP::NewDataSet::backgroundRowChangeEventHandler^  backgroundRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            backgroundDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            backgroundDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            backgroundDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  imgColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  positionXColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  positionYColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  backgrounds_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::backgroundRow^  default [::System::Int32 ] {
                SMP::NewDataSet::backgroundRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddbackgroundRow(SMP::NewDataSet::backgroundRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::backgroundRow^  AddbackgroundRow(System::String^  img, System::Single positionX, System::Single positionY, 
                        SMP::NewDataSet::backgroundsRow^  parentbackgroundsRowBybackgrounds_background);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::backgroundRow^  NewbackgroundRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemovebackgroundRow(SMP::NewDataSet::backgroundRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class foregroundsDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnforegrounds_Id;
            
            private: ::System::Data::DataColumn^  columnlevel_Id;
            
            public: event SMP::NewDataSet::foregroundsRowChangeEventHandler^  foregroundsRowChanging;
            
            public: event SMP::NewDataSet::foregroundsRowChangeEventHandler^  foregroundsRowChanged;
            
            public: event SMP::NewDataSet::foregroundsRowChangeEventHandler^  foregroundsRowDeleting;
            
            public: event SMP::NewDataSet::foregroundsRowChangeEventHandler^  foregroundsRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            foregroundsDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            foregroundsDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            foregroundsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  foregrounds_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  level_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::foregroundsRow^  default [::System::Int32 ] {
                SMP::NewDataSet::foregroundsRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddforegroundsRow(SMP::NewDataSet::foregroundsRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::foregroundsRow^  AddforegroundsRow(SMP::NewDataSet::levelRow^  parentlevelRowBylevel_foregrounds);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::foregroundsRow^  NewforegroundsRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemoveforegroundsRow(SMP::NewDataSet::foregroundsRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class foregroundDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnimg;
            
            private: ::System::Data::DataColumn^  columnpositionX;
            
            private: ::System::Data::DataColumn^  columnpositionY;
            
            private: ::System::Data::DataColumn^  columnforegrounds_Id;
            
            public: event SMP::NewDataSet::foregroundRowChangeEventHandler^  foregroundRowChanging;
            
            public: event SMP::NewDataSet::foregroundRowChangeEventHandler^  foregroundRowChanged;
            
            public: event SMP::NewDataSet::foregroundRowChangeEventHandler^  foregroundRowDeleting;
            
            public: event SMP::NewDataSet::foregroundRowChangeEventHandler^  foregroundRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            foregroundDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            foregroundDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            foregroundDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  imgColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  positionXColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  positionYColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  foregrounds_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::foregroundRow^  default [::System::Int32 ] {
                SMP::NewDataSet::foregroundRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddforegroundRow(SMP::NewDataSet::foregroundRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::foregroundRow^  AddforegroundRow(System::String^  img, System::Single positionX, System::Single positionY, 
                        SMP::NewDataSet::foregroundsRow^  parentforegroundsRowByforegrounds_foreground);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::foregroundRow^  NewforegroundRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemoveforegroundRow(SMP::NewDataSet::foregroundRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class objectsDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnobjects_Id;
            
            private: ::System::Data::DataColumn^  columnlevel_Id;
            
            public: event SMP::NewDataSet::objectsRowChangeEventHandler^  objectsRowChanging;
            
            public: event SMP::NewDataSet::objectsRowChangeEventHandler^  objectsRowChanged;
            
            public: event SMP::NewDataSet::objectsRowChangeEventHandler^  objectsRowDeleting;
            
            public: event SMP::NewDataSet::objectsRowChangeEventHandler^  objectsRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            objectsDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            objectsDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            objectsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  objects_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  level_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::objectsRow^  default [::System::Int32 ] {
                SMP::NewDataSet::objectsRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddobjectsRow(SMP::NewDataSet::objectsRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::objectsRow^  AddobjectsRow(SMP::NewDataSet::levelRow^  parentlevelRowBylevel_objects);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::objectsRow^  NewobjectsRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemoveobjectsRow(SMP::NewDataSet::objectsRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class objectDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnimg;
            
            private: ::System::Data::DataColumn^  columnpositionX;
            
            private: ::System::Data::DataColumn^  columnpositionY;
            
            private: ::System::Data::DataColumn^  columnobjects_Id;
            
            public: event SMP::NewDataSet::objectRowChangeEventHandler^  objectRowChanging;
            
            public: event SMP::NewDataSet::objectRowChangeEventHandler^  objectRowChanged;
            
            public: event SMP::NewDataSet::objectRowChangeEventHandler^  objectRowDeleting;
            
            public: event SMP::NewDataSet::objectRowChangeEventHandler^  objectRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            objectDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            objectDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            objectDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  imgColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  positionXColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  positionYColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  objects_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::objectRow^  default [::System::Int32 ] {
                SMP::NewDataSet::objectRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddobjectRow(SMP::NewDataSet::objectRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::objectRow^  AddobjectRow(System::String^  img, System::Single positionX, System::Single positionY, 
                        SMP::NewDataSet::objectsRow^  parentobjectsRowByobjects_object);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::objectRow^  NewobjectRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemoveobjectRow(SMP::NewDataSet::objectRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class finishesDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnfinishes_Id;
            
            private: ::System::Data::DataColumn^  columnlevel_Id;
            
            public: event SMP::NewDataSet::finishesRowChangeEventHandler^  finishesRowChanging;
            
            public: event SMP::NewDataSet::finishesRowChangeEventHandler^  finishesRowChanged;
            
            public: event SMP::NewDataSet::finishesRowChangeEventHandler^  finishesRowDeleting;
            
            public: event SMP::NewDataSet::finishesRowChangeEventHandler^  finishesRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            finishesDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            finishesDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            finishesDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  finishes_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  level_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::finishesRow^  default [::System::Int32 ] {
                SMP::NewDataSet::finishesRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddfinishesRow(SMP::NewDataSet::finishesRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::finishesRow^  AddfinishesRow(SMP::NewDataSet::levelRow^  parentlevelRowBylevel_finishes);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::finishesRow^  NewfinishesRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemovefinishesRow(SMP::NewDataSet::finishesRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class finishDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnimg;
            
            private: ::System::Data::DataColumn^  columnpositionX;
            
            private: ::System::Data::DataColumn^  columnpositionY;
            
            private: ::System::Data::DataColumn^  columnfinishes_Id;
            
            public: event SMP::NewDataSet::finishRowChangeEventHandler^  finishRowChanging;
            
            public: event SMP::NewDataSet::finishRowChangeEventHandler^  finishRowChanged;
            
            public: event SMP::NewDataSet::finishRowChangeEventHandler^  finishRowDeleting;
            
            public: event SMP::NewDataSet::finishRowChangeEventHandler^  finishRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            finishDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            finishDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            finishDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  imgColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  positionXColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  positionYColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  finishes_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::finishRow^  default [::System::Int32 ] {
                SMP::NewDataSet::finishRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddfinishRow(SMP::NewDataSet::finishRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::finishRow^  AddfinishRow(System::String^  img, System::Single positionX, System::Single positionY, 
                        SMP::NewDataSet::finishesRow^  parentfinishesRowByfinishes_finish);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::finishRow^  NewfinishRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemovefinishRow(SMP::NewDataSet::finishRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class projectilesDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnprojectiles_Id;
            
            private: ::System::Data::DataColumn^  columnlevel_Id;
            
            public: event SMP::NewDataSet::projectilesRowChangeEventHandler^  projectilesRowChanging;
            
            public: event SMP::NewDataSet::projectilesRowChangeEventHandler^  projectilesRowChanged;
            
            public: event SMP::NewDataSet::projectilesRowChangeEventHandler^  projectilesRowDeleting;
            
            public: event SMP::NewDataSet::projectilesRowChangeEventHandler^  projectilesRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            projectilesDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            projectilesDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            projectilesDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  projectiles_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  level_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::projectilesRow^  default [::System::Int32 ] {
                SMP::NewDataSet::projectilesRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddprojectilesRow(SMP::NewDataSet::projectilesRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::projectilesRow^  AddprojectilesRow(SMP::NewDataSet::levelRow^  parentlevelRowBylevel_projectiles);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::projectilesRow^  NewprojectilesRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemoveprojectilesRow(SMP::NewDataSet::projectilesRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class projectileDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnimg;
            
            private: ::System::Data::DataColumn^  columnprojectiles_Id;
            
            public: event SMP::NewDataSet::projectileRowChangeEventHandler^  projectileRowChanging;
            
            public: event SMP::NewDataSet::projectileRowChangeEventHandler^  projectileRowChanged;
            
            public: event SMP::NewDataSet::projectileRowChangeEventHandler^  projectileRowDeleting;
            
            public: event SMP::NewDataSet::projectileRowChangeEventHandler^  projectileRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            projectileDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            projectileDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            projectileDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  imgColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  projectiles_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::projectileRow^  default [::System::Int32 ] {
                SMP::NewDataSet::projectileRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddprojectileRow(SMP::NewDataSet::projectileRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::projectileRow^  AddprojectileRow(System::String^  img, SMP::NewDataSet::projectilesRow^  parentprojectilesRowByprojectiles_projectile);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::projectileRow^  NewprojectileRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemoveprojectileRow(SMP::NewDataSet::projectileRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class itemsDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnitems_Id;
            
            private: ::System::Data::DataColumn^  columnlevel_Id;
            
            public: event SMP::NewDataSet::itemsRowChangeEventHandler^  itemsRowChanging;
            
            public: event SMP::NewDataSet::itemsRowChangeEventHandler^  itemsRowChanged;
            
            public: event SMP::NewDataSet::itemsRowChangeEventHandler^  itemsRowDeleting;
            
            public: event SMP::NewDataSet::itemsRowChangeEventHandler^  itemsRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            itemsDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            itemsDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            itemsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  items_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  level_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::itemsRow^  default [::System::Int32 ] {
                SMP::NewDataSet::itemsRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AdditemsRow(SMP::NewDataSet::itemsRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::itemsRow^  AdditemsRow(SMP::NewDataSet::levelRow^  parentlevelRowBylevel_items);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::itemsRow^  NewitemsRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemoveitemsRow(SMP::NewDataSet::itemsRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class itemDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnimg;
            
            private: ::System::Data::DataColumn^  columntype;
            
            private: ::System::Data::DataColumn^  columnitems_Id;
            
            public: event SMP::NewDataSet::itemRowChangeEventHandler^  itemRowChanging;
            
            public: event SMP::NewDataSet::itemRowChangeEventHandler^  itemRowChanged;
            
            public: event SMP::NewDataSet::itemRowChangeEventHandler^  itemRowDeleting;
            
            public: event SMP::NewDataSet::itemRowChangeEventHandler^  itemRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            itemDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            itemDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            itemDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  imgColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  typeColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  items_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::itemRow^  default [::System::Int32 ] {
                SMP::NewDataSet::itemRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AdditemRow(SMP::NewDataSet::itemRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::itemRow^  AdditemRow(System::String^  img, System::Byte type, SMP::NewDataSet::itemsRow^  parentitemsRowByitems_item);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::itemRow^  NewitemRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemoveitemRow(SMP::NewDataSet::itemRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class monstersDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnmonsters_Id;
            
            private: ::System::Data::DataColumn^  columnlevel_Id;
            
            public: event SMP::NewDataSet::monstersRowChangeEventHandler^  monstersRowChanging;
            
            public: event SMP::NewDataSet::monstersRowChangeEventHandler^  monstersRowChanged;
            
            public: event SMP::NewDataSet::monstersRowChangeEventHandler^  monstersRowDeleting;
            
            public: event SMP::NewDataSet::monstersRowChangeEventHandler^  monstersRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            monstersDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            monstersDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            monstersDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  monsters_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  level_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::monstersRow^  default [::System::Int32 ] {
                SMP::NewDataSet::monstersRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddmonstersRow(SMP::NewDataSet::monstersRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::monstersRow^  AddmonstersRow(SMP::NewDataSet::levelRow^  parentlevelRowBylevel_monsters);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::monstersRow^  NewmonstersRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemovemonstersRow(SMP::NewDataSet::monstersRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class walking_monsterDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnname;
            
            private: ::System::Data::DataColumn^  columnwalking_monster_Id;
            
            private: ::System::Data::DataColumn^  columnmonsters_Id;
            
            public: event SMP::NewDataSet::walking_monsterRowChangeEventHandler^  walking_monsterRowChanging;
            
            public: event SMP::NewDataSet::walking_monsterRowChangeEventHandler^  walking_monsterRowChanged;
            
            public: event SMP::NewDataSet::walking_monsterRowChangeEventHandler^  walking_monsterRowDeleting;
            
            public: event SMP::NewDataSet::walking_monsterRowChangeEventHandler^  walking_monsterRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            walking_monsterDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            walking_monsterDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            walking_monsterDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  nameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  walking_monster_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  monsters_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::walking_monsterRow^  default [::System::Int32 ] {
                SMP::NewDataSet::walking_monsterRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Addwalking_monsterRow(SMP::NewDataSet::walking_monsterRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::walking_monsterRow^  Addwalking_monsterRow(System::String^  name, SMP::NewDataSet::monstersRow^  parentmonstersRowBymonsters_walking_monster);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::walking_monsterRow^  Newwalking_monsterRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Removewalking_monsterRow(SMP::NewDataSet::walking_monsterRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class occ_monsterDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnpositionX;
            
            private: ::System::Data::DataColumn^  columnpositionY;
            
            private: ::System::Data::DataColumn^  columnwalking_monster_Id;
            
            private: ::System::Data::DataColumn^  columnflying_monster_Id;
            
            private: ::System::Data::DataColumn^  columnshell_monster_Id;
            
            public: event SMP::NewDataSet::occ_monsterRowChangeEventHandler^  occ_monsterRowChanging;
            
            public: event SMP::NewDataSet::occ_monsterRowChangeEventHandler^  occ_monsterRowChanged;
            
            public: event SMP::NewDataSet::occ_monsterRowChangeEventHandler^  occ_monsterRowDeleting;
            
            public: event SMP::NewDataSet::occ_monsterRowChangeEventHandler^  occ_monsterRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            occ_monsterDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            occ_monsterDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            occ_monsterDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  positionXColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  positionYColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  walking_monster_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  flying_monster_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  shell_monster_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::occ_monsterRow^  default [::System::Int32 ] {
                SMP::NewDataSet::occ_monsterRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Addocc_monsterRow(SMP::NewDataSet::occ_monsterRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::occ_monsterRow^  Addocc_monsterRow(System::Single positionX, System::Single positionY, SMP::NewDataSet::walking_monsterRow^  parentwalking_monsterRowBywalking_monster_occ_monster, 
                        SMP::NewDataSet::flying_monsterRow^  parentflying_monsterRowByflying_monster_occ_monster, SMP::NewDataSet::shell_monsterRow^  parentshell_monsterRowByshell_monster_occ_monster);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::occ_monsterRow^  Newocc_monsterRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Removeocc_monsterRow(SMP::NewDataSet::occ_monsterRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class flying_monsterDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnname;
            
            private: ::System::Data::DataColumn^  columnflying_monster_Id;
            
            private: ::System::Data::DataColumn^  columnmonsters_Id;
            
            public: event SMP::NewDataSet::flying_monsterRowChangeEventHandler^  flying_monsterRowChanging;
            
            public: event SMP::NewDataSet::flying_monsterRowChangeEventHandler^  flying_monsterRowChanged;
            
            public: event SMP::NewDataSet::flying_monsterRowChangeEventHandler^  flying_monsterRowDeleting;
            
            public: event SMP::NewDataSet::flying_monsterRowChangeEventHandler^  flying_monsterRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            flying_monsterDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            flying_monsterDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            flying_monsterDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  nameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  flying_monster_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  monsters_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::flying_monsterRow^  default [::System::Int32 ] {
                SMP::NewDataSet::flying_monsterRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Addflying_monsterRow(SMP::NewDataSet::flying_monsterRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::flying_monsterRow^  Addflying_monsterRow(System::String^  name, SMP::NewDataSet::monstersRow^  parentmonstersRowBymonsters_flying_monster);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::flying_monsterRow^  Newflying_monsterRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Removeflying_monsterRow(SMP::NewDataSet::flying_monsterRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class shell_monsterDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnname;
            
            private: ::System::Data::DataColumn^  columnshell_monster_Id;
            
            private: ::System::Data::DataColumn^  columnmonsters_Id;
            
            public: event SMP::NewDataSet::shell_monsterRowChangeEventHandler^  shell_monsterRowChanging;
            
            public: event SMP::NewDataSet::shell_monsterRowChangeEventHandler^  shell_monsterRowChanged;
            
            public: event SMP::NewDataSet::shell_monsterRowChangeEventHandler^  shell_monsterRowDeleting;
            
            public: event SMP::NewDataSet::shell_monsterRowChangeEventHandler^  shell_monsterRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            shell_monsterDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            shell_monsterDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            shell_monsterDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  nameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  shell_monster_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  monsters_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::shell_monsterRow^  default [::System::Int32 ] {
                SMP::NewDataSet::shell_monsterRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Addshell_monsterRow(SMP::NewDataSet::shell_monsterRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::shell_monsterRow^  Addshell_monsterRow(System::String^  name, SMP::NewDataSet::monstersRow^  parentmonstersRowBymonsters_shell_monster);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::shell_monsterRow^  Newshell_monsterRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Removeshell_monsterRow(SMP::NewDataSet::shell_monsterRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class pipesDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnpipes_Id;
            
            private: ::System::Data::DataColumn^  columnlevel_Id;
            
            public: event SMP::NewDataSet::pipesRowChangeEventHandler^  pipesRowChanging;
            
            public: event SMP::NewDataSet::pipesRowChangeEventHandler^  pipesRowChanged;
            
            public: event SMP::NewDataSet::pipesRowChangeEventHandler^  pipesRowDeleting;
            
            public: event SMP::NewDataSet::pipesRowChangeEventHandler^  pipesRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            pipesDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            pipesDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            pipesDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  pipes_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  level_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::pipesRow^  default [::System::Int32 ] {
                SMP::NewDataSet::pipesRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddpipesRow(SMP::NewDataSet::pipesRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::pipesRow^  AddpipesRow(SMP::NewDataSet::levelRow^  parentlevelRowBylevel_pipes);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::pipesRow^  NewpipesRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemovepipesRow(SMP::NewDataSet::pipesRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class pipeDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnimg;
            
            private: ::System::Data::DataColumn^  columnpositionX;
            
            private: ::System::Data::DataColumn^  columnpositionY;
            
            private: ::System::Data::DataColumn^  columndestination_pipe;
            
            private: ::System::Data::DataColumn^  columnlevel_destination;
            
            private: ::System::Data::DataColumn^  columnstate;
            
            private: ::System::Data::DataColumn^  columnlength;
            
            private: ::System::Data::DataColumn^  columndirection;
            
            private: ::System::Data::DataColumn^  columnmonster;
            
            private: ::System::Data::DataColumn^  columnpipes_Id;
            
            public: event SMP::NewDataSet::pipeRowChangeEventHandler^  pipeRowChanging;
            
            public: event SMP::NewDataSet::pipeRowChangeEventHandler^  pipeRowChanged;
            
            public: event SMP::NewDataSet::pipeRowChangeEventHandler^  pipeRowDeleting;
            
            public: event SMP::NewDataSet::pipeRowChangeEventHandler^  pipeRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            pipeDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            pipeDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            pipeDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  imgColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  positionXColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  positionYColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  destination_pipeColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  level_destinationColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  stateColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  lengthColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  directionColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  monsterColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  pipes_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::pipeRow^  default [::System::Int32 ] {
                SMP::NewDataSet::pipeRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddpipeRow(SMP::NewDataSet::pipeRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::pipeRow^  AddpipeRow(
                        System::String^  img, 
                        System::Single positionX, 
                        System::Single positionY, 
                        System::Byte destination_pipe, 
                        System::String^  level_destination, 
                        System::Byte state, 
                        System::Byte length, 
                        System::Byte direction, 
                        System::SByte monster, 
                        SMP::NewDataSet::pipesRow^  parentpipesRowBypipes_pipe);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::pipeRow^  NewpipeRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemovepipeRow(SMP::NewDataSet::pipeRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class blocksDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnblocks_Id;
            
            private: ::System::Data::DataColumn^  columnlevel_Id;
            
            public: event SMP::NewDataSet::blocksRowChangeEventHandler^  blocksRowChanging;
            
            public: event SMP::NewDataSet::blocksRowChangeEventHandler^  blocksRowChanged;
            
            public: event SMP::NewDataSet::blocksRowChangeEventHandler^  blocksRowDeleting;
            
            public: event SMP::NewDataSet::blocksRowChangeEventHandler^  blocksRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            blocksDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            blocksDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            blocksDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  blocks_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  level_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::blocksRow^  default [::System::Int32 ] {
                SMP::NewDataSet::blocksRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddblocksRow(SMP::NewDataSet::blocksRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::blocksRow^  AddblocksRow(SMP::NewDataSet::levelRow^  parentlevelRowBylevel_blocks);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::blocksRow^  NewblocksRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemoveblocksRow(SMP::NewDataSet::blocksRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class tilesetDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnimg;
            
            private: ::System::Data::DataColumn^  columnblocSizeX;
            
            private: ::System::Data::DataColumn^  columnblocSizeY;
            
            private: ::System::Data::DataColumn^  columntileset_Id;
            
            private: ::System::Data::DataColumn^  columnblocks_Id;
            
            public: event SMP::NewDataSet::tilesetRowChangeEventHandler^  tilesetRowChanging;
            
            public: event SMP::NewDataSet::tilesetRowChangeEventHandler^  tilesetRowChanged;
            
            public: event SMP::NewDataSet::tilesetRowChangeEventHandler^  tilesetRowDeleting;
            
            public: event SMP::NewDataSet::tilesetRowChangeEventHandler^  tilesetRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            tilesetDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            tilesetDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            tilesetDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  imgColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  blocSizeXColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  blocSizeYColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  tileset_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  blocks_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::tilesetRow^  default [::System::Int32 ] {
                SMP::NewDataSet::tilesetRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddtilesetRow(SMP::NewDataSet::tilesetRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::tilesetRow^  AddtilesetRow(System::String^  img, System::Single blocSizeX, System::Single blocSizeY, 
                        SMP::NewDataSet::blocksRow^  parentblocksRowByblocks_tileset);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::tilesetRow^  NewtilesetRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemovetilesetRow(SMP::NewDataSet::tilesetRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class blockDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columntype_bloc;
            
            private: ::System::Data::DataColumn^  columnphysicIndex;
            
            private: ::System::Data::DataColumn^  columntileset_Id;
            
            public: event SMP::NewDataSet::blockRowChangeEventHandler^  blockRowChanging;
            
            public: event SMP::NewDataSet::blockRowChangeEventHandler^  blockRowChanged;
            
            public: event SMP::NewDataSet::blockRowChangeEventHandler^  blockRowDeleting;
            
            public: event SMP::NewDataSet::blockRowChangeEventHandler^  blockRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            blockDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            blockDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            blockDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  type_blocColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  physicIndexColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  tileset_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::blockRow^  default [::System::Int32 ] {
                SMP::NewDataSet::blockRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddblockRow(SMP::NewDataSet::blockRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::blockRow^  AddblockRow(System::UInt32 type_bloc, System::UInt32 physicIndex, SMP::NewDataSet::tilesetRow^  parenttilesetRowBytileset_block);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::blockRow^  NewblockRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemoveblockRow(SMP::NewDataSet::blockRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class layersDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnnb;
            
            private: ::System::Data::DataColumn^  columnlayers_Id;
            
            private: ::System::Data::DataColumn^  columnblocks_Id;
            
            public: event SMP::NewDataSet::layersRowChangeEventHandler^  layersRowChanging;
            
            public: event SMP::NewDataSet::layersRowChangeEventHandler^  layersRowChanged;
            
            public: event SMP::NewDataSet::layersRowChangeEventHandler^  layersRowDeleting;
            
            public: event SMP::NewDataSet::layersRowChangeEventHandler^  layersRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            layersDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            layersDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            layersDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  nbColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  layers_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  blocks_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::layersRow^  default [::System::Int32 ] {
                SMP::NewDataSet::layersRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddlayersRow(SMP::NewDataSet::layersRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::layersRow^  AddlayersRow(System::Byte nb, SMP::NewDataSet::blocksRow^  parentblocksRowByblocks_layers);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::layersRow^  NewlayersRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemovelayersRow(SMP::NewDataSet::layersRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class layerDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnindex;
            
            private: ::System::Data::DataColumn^  columnlayer_Id;
            
            private: ::System::Data::DataColumn^  columnlayers_Id;
            
            public: event SMP::NewDataSet::layerRowChangeEventHandler^  layerRowChanging;
            
            public: event SMP::NewDataSet::layerRowChangeEventHandler^  layerRowChanged;
            
            public: event SMP::NewDataSet::layerRowChangeEventHandler^  layerRowDeleting;
            
            public: event SMP::NewDataSet::layerRowChangeEventHandler^  layerRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            layerDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            layerDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            layerDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  indexColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  layer_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  layers_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::layerRow^  default [::System::Int32 ] {
                SMP::NewDataSet::layerRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddlayerRow(SMP::NewDataSet::layerRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::layerRow^  AddlayerRow(System::Byte index, SMP::NewDataSet::layersRow^  parentlayersRowBylayers_layer);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::layerRow^  NewlayerRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemovelayerRow(SMP::NewDataSet::layerRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class occ_blockDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnpositionX;
            
            private: ::System::Data::DataColumn^  columnpositionY;
            
            private: ::System::Data::DataColumn^  columnactual;
            
            private: ::System::Data::DataColumn^  columnalt;
            
            private: ::System::Data::DataColumn^  columnitem;
            
            private: ::System::Data::DataColumn^  columnlayer_Id;
            
            public: event SMP::NewDataSet::occ_blockRowChangeEventHandler^  occ_blockRowChanging;
            
            public: event SMP::NewDataSet::occ_blockRowChangeEventHandler^  occ_blockRowChanged;
            
            public: event SMP::NewDataSet::occ_blockRowChangeEventHandler^  occ_blockRowDeleting;
            
            public: event SMP::NewDataSet::occ_blockRowChangeEventHandler^  occ_blockRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            occ_blockDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            occ_blockDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            occ_blockDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  positionXColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  positionYColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  actualColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  altColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  itemColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  layer_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::occ_blockRow^  default [::System::Int32 ] {
                SMP::NewDataSet::occ_blockRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Addocc_blockRow(SMP::NewDataSet::occ_blockRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::occ_blockRow^  Addocc_blockRow(
                        System::Single positionX, 
                        System::Single positionY, 
                        System::Byte actual, 
                        System::SByte alt, 
                        System::SByte item, 
                        SMP::NewDataSet::layerRow^  parentlayerRowBylayer_occ_block);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            SMP::NewDataSet::occ_blockRow^  Newocc_blockRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Removeocc_blockRow(SMP::NewDataSet::occ_blockRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class levelRow : public ::System::Data::DataRow {
            
            private: SMP::NewDataSet::levelDataTable^  tablelevel;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            levelRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  name {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Byte width {
                System::Byte get();
                System::Void set(System::Byte value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Byte height {
                System::Byte get();
                System::Void set(System::Byte value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  music {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 level_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< SMP::NewDataSet::spawnRow^  >^  GetspawnRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< SMP::NewDataSet::checkpointsRow^  >^  GetcheckpointsRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< SMP::NewDataSet::backgroundsRow^  >^  GetbackgroundsRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< SMP::NewDataSet::foregroundsRow^  >^  GetforegroundsRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< SMP::NewDataSet::objectsRow^  >^  GetobjectsRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< SMP::NewDataSet::finishesRow^  >^  GetfinishesRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< SMP::NewDataSet::projectilesRow^  >^  GetprojectilesRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< SMP::NewDataSet::itemsRow^  >^  GetitemsRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< SMP::NewDataSet::monstersRow^  >^  GetmonstersRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< SMP::NewDataSet::pipesRow^  >^  GetpipesRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< SMP::NewDataSet::blocksRow^  >^  GetblocksRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class spawnRow : public ::System::Data::DataRow {
            
            private: SMP::NewDataSet::spawnDataTable^  tablespawn;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            spawnRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Single positionX {
                System::Single get();
                System::Void set(System::Single value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Single positionY {
                System::Single get();
                System::Void set(System::Single value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 level_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::levelRow^  levelRow {
                SMP::NewDataSet::levelRow^  get();
                System::Void set(SMP::NewDataSet::levelRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Islevel_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setlevel_IdNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class checkpointsRow : public ::System::Data::DataRow {
            
            private: SMP::NewDataSet::checkpointsDataTable^  tablecheckpoints;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            checkpointsRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 checkpoints_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 level_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::levelRow^  levelRow {
                SMP::NewDataSet::levelRow^  get();
                System::Void set(SMP::NewDataSet::levelRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Islevel_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setlevel_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< SMP::NewDataSet::checkpointRow^  >^  GetcheckpointRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class checkpointRow : public ::System::Data::DataRow {
            
            private: SMP::NewDataSet::checkpointDataTable^  tablecheckpoint;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            checkpointRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  img {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Single positionX {
                System::Single get();
                System::Void set(System::Single value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Single positionY {
                System::Single get();
                System::Void set(System::Single value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 checkpoints_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::checkpointsRow^  checkpointsRow {
                SMP::NewDataSet::checkpointsRow^  get();
                System::Void set(SMP::NewDataSet::checkpointsRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Ischeckpoints_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setcheckpoints_IdNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class backgroundsRow : public ::System::Data::DataRow {
            
            private: SMP::NewDataSet::backgroundsDataTable^  tablebackgrounds;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            backgroundsRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 backgrounds_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 level_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::levelRow^  levelRow {
                SMP::NewDataSet::levelRow^  get();
                System::Void set(SMP::NewDataSet::levelRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Islevel_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setlevel_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< SMP::NewDataSet::backgroundRow^  >^  GetbackgroundRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class backgroundRow : public ::System::Data::DataRow {
            
            private: SMP::NewDataSet::backgroundDataTable^  tablebackground;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            backgroundRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  img {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Single positionX {
                System::Single get();
                System::Void set(System::Single value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Single positionY {
                System::Single get();
                System::Void set(System::Single value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 backgrounds_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::backgroundsRow^  backgroundsRow {
                SMP::NewDataSet::backgroundsRow^  get();
                System::Void set(SMP::NewDataSet::backgroundsRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isbackgrounds_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setbackgrounds_IdNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class foregroundsRow : public ::System::Data::DataRow {
            
            private: SMP::NewDataSet::foregroundsDataTable^  tableforegrounds;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            foregroundsRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 foregrounds_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 level_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::levelRow^  levelRow {
                SMP::NewDataSet::levelRow^  get();
                System::Void set(SMP::NewDataSet::levelRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Islevel_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setlevel_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< SMP::NewDataSet::foregroundRow^  >^  GetforegroundRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class foregroundRow : public ::System::Data::DataRow {
            
            private: SMP::NewDataSet::foregroundDataTable^  tableforeground;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            foregroundRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  img {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Single positionX {
                System::Single get();
                System::Void set(System::Single value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Single positionY {
                System::Single get();
                System::Void set(System::Single value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 foregrounds_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::foregroundsRow^  foregroundsRow {
                SMP::NewDataSet::foregroundsRow^  get();
                System::Void set(SMP::NewDataSet::foregroundsRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isforegrounds_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setforegrounds_IdNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class objectsRow : public ::System::Data::DataRow {
            
            private: SMP::NewDataSet::objectsDataTable^  tableobjects;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            objectsRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 objects_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 level_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::levelRow^  levelRow {
                SMP::NewDataSet::levelRow^  get();
                System::Void set(SMP::NewDataSet::levelRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Islevel_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setlevel_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< SMP::NewDataSet::objectRow^  >^  GetobjectRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class objectRow : public ::System::Data::DataRow {
            
            private: SMP::NewDataSet::objectDataTable^  tableobject;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            objectRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  img {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Single positionX {
                System::Single get();
                System::Void set(System::Single value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Single positionY {
                System::Single get();
                System::Void set(System::Single value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 objects_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::objectsRow^  objectsRow {
                SMP::NewDataSet::objectsRow^  get();
                System::Void set(SMP::NewDataSet::objectsRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isobjects_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setobjects_IdNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class finishesRow : public ::System::Data::DataRow {
            
            private: SMP::NewDataSet::finishesDataTable^  tablefinishes;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            finishesRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 finishes_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 level_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::levelRow^  levelRow {
                SMP::NewDataSet::levelRow^  get();
                System::Void set(SMP::NewDataSet::levelRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Islevel_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setlevel_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< SMP::NewDataSet::finishRow^  >^  GetfinishRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class finishRow : public ::System::Data::DataRow {
            
            private: SMP::NewDataSet::finishDataTable^  tablefinish;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            finishRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  img {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Single positionX {
                System::Single get();
                System::Void set(System::Single value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Single positionY {
                System::Single get();
                System::Void set(System::Single value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 finishes_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::finishesRow^  finishesRow {
                SMP::NewDataSet::finishesRow^  get();
                System::Void set(SMP::NewDataSet::finishesRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isfinishes_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setfinishes_IdNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class projectilesRow : public ::System::Data::DataRow {
            
            private: SMP::NewDataSet::projectilesDataTable^  tableprojectiles;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            projectilesRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 projectiles_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 level_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::levelRow^  levelRow {
                SMP::NewDataSet::levelRow^  get();
                System::Void set(SMP::NewDataSet::levelRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Islevel_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setlevel_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< SMP::NewDataSet::projectileRow^  >^  GetprojectileRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class projectileRow : public ::System::Data::DataRow {
            
            private: SMP::NewDataSet::projectileDataTable^  tableprojectile;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            projectileRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  img {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 projectiles_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::projectilesRow^  projectilesRow {
                SMP::NewDataSet::projectilesRow^  get();
                System::Void set(SMP::NewDataSet::projectilesRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isprojectiles_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setprojectiles_IdNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class itemsRow : public ::System::Data::DataRow {
            
            private: SMP::NewDataSet::itemsDataTable^  tableitems;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            itemsRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 items_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 level_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::levelRow^  levelRow {
                SMP::NewDataSet::levelRow^  get();
                System::Void set(SMP::NewDataSet::levelRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Islevel_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setlevel_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< SMP::NewDataSet::itemRow^  >^  GetitemRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class itemRow : public ::System::Data::DataRow {
            
            private: SMP::NewDataSet::itemDataTable^  tableitem;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            itemRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  img {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Byte type {
                System::Byte get();
                System::Void set(System::Byte value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 items_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::itemsRow^  itemsRow {
                SMP::NewDataSet::itemsRow^  get();
                System::Void set(SMP::NewDataSet::itemsRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isitems_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setitems_IdNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class monstersRow : public ::System::Data::DataRow {
            
            private: SMP::NewDataSet::monstersDataTable^  tablemonsters;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            monstersRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 monsters_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 level_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::levelRow^  levelRow {
                SMP::NewDataSet::levelRow^  get();
                System::Void set(SMP::NewDataSet::levelRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Islevel_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setlevel_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< SMP::NewDataSet::walking_monsterRow^  >^  Getwalking_monsterRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< SMP::NewDataSet::flying_monsterRow^  >^  Getflying_monsterRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< SMP::NewDataSet::shell_monsterRow^  >^  Getshell_monsterRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class walking_monsterRow : public ::System::Data::DataRow {
            
            private: SMP::NewDataSet::walking_monsterDataTable^  tablewalking_monster;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            walking_monsterRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  name {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 walking_monster_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 monsters_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::monstersRow^  monstersRow {
                SMP::NewDataSet::monstersRow^  get();
                System::Void set(SMP::NewDataSet::monstersRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Ismonsters_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setmonsters_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< SMP::NewDataSet::occ_monsterRow^  >^  Getocc_monsterRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class occ_monsterRow : public ::System::Data::DataRow {
            
            private: SMP::NewDataSet::occ_monsterDataTable^  tableocc_monster;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            occ_monsterRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Single positionX {
                System::Single get();
                System::Void set(System::Single value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Single positionY {
                System::Single get();
                System::Void set(System::Single value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 walking_monster_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 flying_monster_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 shell_monster_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::walking_monsterRow^  walking_monsterRow {
                SMP::NewDataSet::walking_monsterRow^  get();
                System::Void set(SMP::NewDataSet::walking_monsterRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::flying_monsterRow^  flying_monsterRow {
                SMP::NewDataSet::flying_monsterRow^  get();
                System::Void set(SMP::NewDataSet::flying_monsterRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::shell_monsterRow^  shell_monsterRow {
                SMP::NewDataSet::shell_monsterRow^  get();
                System::Void set(SMP::NewDataSet::shell_monsterRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Iswalking_monster_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setwalking_monster_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isflying_monster_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setflying_monster_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isshell_monster_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setshell_monster_IdNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class flying_monsterRow : public ::System::Data::DataRow {
            
            private: SMP::NewDataSet::flying_monsterDataTable^  tableflying_monster;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            flying_monsterRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  name {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 flying_monster_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 monsters_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::monstersRow^  monstersRow {
                SMP::NewDataSet::monstersRow^  get();
                System::Void set(SMP::NewDataSet::monstersRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Ismonsters_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setmonsters_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< SMP::NewDataSet::occ_monsterRow^  >^  Getocc_monsterRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class shell_monsterRow : public ::System::Data::DataRow {
            
            private: SMP::NewDataSet::shell_monsterDataTable^  tableshell_monster;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            shell_monsterRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  name {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 shell_monster_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 monsters_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::monstersRow^  monstersRow {
                SMP::NewDataSet::monstersRow^  get();
                System::Void set(SMP::NewDataSet::monstersRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Ismonsters_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setmonsters_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< SMP::NewDataSet::occ_monsterRow^  >^  Getocc_monsterRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class pipesRow : public ::System::Data::DataRow {
            
            private: SMP::NewDataSet::pipesDataTable^  tablepipes;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            pipesRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 pipes_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 level_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::levelRow^  levelRow {
                SMP::NewDataSet::levelRow^  get();
                System::Void set(SMP::NewDataSet::levelRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Islevel_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setlevel_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< SMP::NewDataSet::pipeRow^  >^  GetpipeRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class pipeRow : public ::System::Data::DataRow {
            
            private: SMP::NewDataSet::pipeDataTable^  tablepipe;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            pipeRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  img {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Single positionX {
                System::Single get();
                System::Void set(System::Single value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Single positionY {
                System::Single get();
                System::Void set(System::Single value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Byte destination_pipe {
                System::Byte get();
                System::Void set(System::Byte value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  level_destination {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Byte state {
                System::Byte get();
                System::Void set(System::Byte value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Byte length {
                System::Byte get();
                System::Void set(System::Byte value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Byte direction {
                System::Byte get();
                System::Void set(System::Byte value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::SByte monster {
                System::SByte get();
                System::Void set(System::SByte value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 pipes_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::pipesRow^  pipesRow {
                SMP::NewDataSet::pipesRow^  get();
                System::Void set(SMP::NewDataSet::pipesRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Ispipes_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setpipes_IdNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class blocksRow : public ::System::Data::DataRow {
            
            private: SMP::NewDataSet::blocksDataTable^  tableblocks;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            blocksRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 blocks_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 level_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::levelRow^  levelRow {
                SMP::NewDataSet::levelRow^  get();
                System::Void set(SMP::NewDataSet::levelRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Islevel_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setlevel_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< SMP::NewDataSet::tilesetRow^  >^  GettilesetRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< SMP::NewDataSet::layersRow^  >^  GetlayersRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class tilesetRow : public ::System::Data::DataRow {
            
            private: SMP::NewDataSet::tilesetDataTable^  tabletileset;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            tilesetRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  img {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Single blocSizeX {
                System::Single get();
                System::Void set(System::Single value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Single blocSizeY {
                System::Single get();
                System::Void set(System::Single value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 tileset_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 blocks_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::blocksRow^  blocksRow {
                SMP::NewDataSet::blocksRow^  get();
                System::Void set(SMP::NewDataSet::blocksRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isblocks_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setblocks_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< SMP::NewDataSet::blockRow^  >^  GetblockRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class blockRow : public ::System::Data::DataRow {
            
            private: SMP::NewDataSet::blockDataTable^  tableblock;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            blockRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::UInt32 type_bloc {
                System::UInt32 get();
                System::Void set(System::UInt32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::UInt32 physicIndex {
                System::UInt32 get();
                System::Void set(System::UInt32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 tileset_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::tilesetRow^  tilesetRow {
                SMP::NewDataSet::tilesetRow^  get();
                System::Void set(SMP::NewDataSet::tilesetRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Istileset_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Settileset_IdNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class layersRow : public ::System::Data::DataRow {
            
            private: SMP::NewDataSet::layersDataTable^  tablelayers;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            layersRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Byte nb {
                System::Byte get();
                System::Void set(System::Byte value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 layers_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 blocks_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::blocksRow^  blocksRow {
                SMP::NewDataSet::blocksRow^  get();
                System::Void set(SMP::NewDataSet::blocksRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isblocks_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setblocks_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< SMP::NewDataSet::layerRow^  >^  GetlayerRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class layerRow : public ::System::Data::DataRow {
            
            private: SMP::NewDataSet::layerDataTable^  tablelayer;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            layerRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Byte index {
                System::Byte get();
                System::Void set(System::Byte value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 layer_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 layers_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::layersRow^  layersRow {
                SMP::NewDataSet::layersRow^  get();
                System::Void set(SMP::NewDataSet::layersRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Islayers_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setlayers_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< SMP::NewDataSet::occ_blockRow^  >^  Getocc_blockRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class occ_blockRow : public ::System::Data::DataRow {
            
            private: SMP::NewDataSet::occ_blockDataTable^  tableocc_block;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            occ_blockRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Single positionX {
                System::Single get();
                System::Void set(System::Single value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Single positionY {
                System::Single get();
                System::Void set(System::Single value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Byte actual {
                System::Byte get();
                System::Void set(System::Byte value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::SByte alt {
                System::SByte get();
                System::Void set(System::SByte value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::SByte item {
                System::SByte get();
                System::Void set(System::SByte value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 layer_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::layerRow^  layerRow {
                SMP::NewDataSet::layerRow^  get();
                System::Void set(SMP::NewDataSet::layerRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Islayer_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setlayer_IdNull();
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class levelRowChangeEvent : public ::System::EventArgs {
            
            private: SMP::NewDataSet::levelRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            levelRowChangeEvent(SMP::NewDataSet::levelRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::levelRow^  Row {
                SMP::NewDataSet::levelRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class spawnRowChangeEvent : public ::System::EventArgs {
            
            private: SMP::NewDataSet::spawnRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            spawnRowChangeEvent(SMP::NewDataSet::spawnRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::spawnRow^  Row {
                SMP::NewDataSet::spawnRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class checkpointsRowChangeEvent : public ::System::EventArgs {
            
            private: SMP::NewDataSet::checkpointsRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            checkpointsRowChangeEvent(SMP::NewDataSet::checkpointsRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::checkpointsRow^  Row {
                SMP::NewDataSet::checkpointsRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class checkpointRowChangeEvent : public ::System::EventArgs {
            
            private: SMP::NewDataSet::checkpointRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            checkpointRowChangeEvent(SMP::NewDataSet::checkpointRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::checkpointRow^  Row {
                SMP::NewDataSet::checkpointRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class backgroundsRowChangeEvent : public ::System::EventArgs {
            
            private: SMP::NewDataSet::backgroundsRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            backgroundsRowChangeEvent(SMP::NewDataSet::backgroundsRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::backgroundsRow^  Row {
                SMP::NewDataSet::backgroundsRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class backgroundRowChangeEvent : public ::System::EventArgs {
            
            private: SMP::NewDataSet::backgroundRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            backgroundRowChangeEvent(SMP::NewDataSet::backgroundRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::backgroundRow^  Row {
                SMP::NewDataSet::backgroundRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class foregroundsRowChangeEvent : public ::System::EventArgs {
            
            private: SMP::NewDataSet::foregroundsRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            foregroundsRowChangeEvent(SMP::NewDataSet::foregroundsRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::foregroundsRow^  Row {
                SMP::NewDataSet::foregroundsRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class foregroundRowChangeEvent : public ::System::EventArgs {
            
            private: SMP::NewDataSet::foregroundRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            foregroundRowChangeEvent(SMP::NewDataSet::foregroundRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::foregroundRow^  Row {
                SMP::NewDataSet::foregroundRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class objectsRowChangeEvent : public ::System::EventArgs {
            
            private: SMP::NewDataSet::objectsRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            objectsRowChangeEvent(SMP::NewDataSet::objectsRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::objectsRow^  Row {
                SMP::NewDataSet::objectsRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class objectRowChangeEvent : public ::System::EventArgs {
            
            private: SMP::NewDataSet::objectRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            objectRowChangeEvent(SMP::NewDataSet::objectRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::objectRow^  Row {
                SMP::NewDataSet::objectRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class finishesRowChangeEvent : public ::System::EventArgs {
            
            private: SMP::NewDataSet::finishesRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            finishesRowChangeEvent(SMP::NewDataSet::finishesRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::finishesRow^  Row {
                SMP::NewDataSet::finishesRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class finishRowChangeEvent : public ::System::EventArgs {
            
            private: SMP::NewDataSet::finishRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            finishRowChangeEvent(SMP::NewDataSet::finishRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::finishRow^  Row {
                SMP::NewDataSet::finishRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class projectilesRowChangeEvent : public ::System::EventArgs {
            
            private: SMP::NewDataSet::projectilesRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            projectilesRowChangeEvent(SMP::NewDataSet::projectilesRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::projectilesRow^  Row {
                SMP::NewDataSet::projectilesRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class projectileRowChangeEvent : public ::System::EventArgs {
            
            private: SMP::NewDataSet::projectileRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            projectileRowChangeEvent(SMP::NewDataSet::projectileRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::projectileRow^  Row {
                SMP::NewDataSet::projectileRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class itemsRowChangeEvent : public ::System::EventArgs {
            
            private: SMP::NewDataSet::itemsRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            itemsRowChangeEvent(SMP::NewDataSet::itemsRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::itemsRow^  Row {
                SMP::NewDataSet::itemsRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class itemRowChangeEvent : public ::System::EventArgs {
            
            private: SMP::NewDataSet::itemRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            itemRowChangeEvent(SMP::NewDataSet::itemRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::itemRow^  Row {
                SMP::NewDataSet::itemRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class monstersRowChangeEvent : public ::System::EventArgs {
            
            private: SMP::NewDataSet::monstersRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            monstersRowChangeEvent(SMP::NewDataSet::monstersRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::monstersRow^  Row {
                SMP::NewDataSet::monstersRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class walking_monsterRowChangeEvent : public ::System::EventArgs {
            
            private: SMP::NewDataSet::walking_monsterRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            walking_monsterRowChangeEvent(SMP::NewDataSet::walking_monsterRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::walking_monsterRow^  Row {
                SMP::NewDataSet::walking_monsterRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class occ_monsterRowChangeEvent : public ::System::EventArgs {
            
            private: SMP::NewDataSet::occ_monsterRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            occ_monsterRowChangeEvent(SMP::NewDataSet::occ_monsterRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::occ_monsterRow^  Row {
                SMP::NewDataSet::occ_monsterRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class flying_monsterRowChangeEvent : public ::System::EventArgs {
            
            private: SMP::NewDataSet::flying_monsterRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            flying_monsterRowChangeEvent(SMP::NewDataSet::flying_monsterRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::flying_monsterRow^  Row {
                SMP::NewDataSet::flying_monsterRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class shell_monsterRowChangeEvent : public ::System::EventArgs {
            
            private: SMP::NewDataSet::shell_monsterRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            shell_monsterRowChangeEvent(SMP::NewDataSet::shell_monsterRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::shell_monsterRow^  Row {
                SMP::NewDataSet::shell_monsterRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class pipesRowChangeEvent : public ::System::EventArgs {
            
            private: SMP::NewDataSet::pipesRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            pipesRowChangeEvent(SMP::NewDataSet::pipesRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::pipesRow^  Row {
                SMP::NewDataSet::pipesRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class pipeRowChangeEvent : public ::System::EventArgs {
            
            private: SMP::NewDataSet::pipeRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            pipeRowChangeEvent(SMP::NewDataSet::pipeRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::pipeRow^  Row {
                SMP::NewDataSet::pipeRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class blocksRowChangeEvent : public ::System::EventArgs {
            
            private: SMP::NewDataSet::blocksRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            blocksRowChangeEvent(SMP::NewDataSet::blocksRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::blocksRow^  Row {
                SMP::NewDataSet::blocksRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class tilesetRowChangeEvent : public ::System::EventArgs {
            
            private: SMP::NewDataSet::tilesetRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            tilesetRowChangeEvent(SMP::NewDataSet::tilesetRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::tilesetRow^  Row {
                SMP::NewDataSet::tilesetRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class blockRowChangeEvent : public ::System::EventArgs {
            
            private: SMP::NewDataSet::blockRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            blockRowChangeEvent(SMP::NewDataSet::blockRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::blockRow^  Row {
                SMP::NewDataSet::blockRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class layersRowChangeEvent : public ::System::EventArgs {
            
            private: SMP::NewDataSet::layersRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            layersRowChangeEvent(SMP::NewDataSet::layersRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::layersRow^  Row {
                SMP::NewDataSet::layersRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class layerRowChangeEvent : public ::System::EventArgs {
            
            private: SMP::NewDataSet::layerRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            layerRowChangeEvent(SMP::NewDataSet::layerRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::layerRow^  Row {
                SMP::NewDataSet::layerRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class occ_blockRowChangeEvent : public ::System::EventArgs {
            
            private: SMP::NewDataSet::occ_blockRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            occ_blockRowChangeEvent(SMP::NewDataSet::occ_blockRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property SMP::NewDataSet::occ_blockRow^  Row {
                SMP::NewDataSet::occ_blockRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
    };
}
namespace SMP {
    
    
    inline NewDataSet::NewDataSet() {
        this->BeginInit();
        this->InitClass();
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &SMP::NewDataSet::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        __super::Relations->CollectionChanged += schemaChangedHandler;
        this->EndInit();
    }
    
    inline NewDataSet::NewDataSet(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataSet(info, context, false) {
        if (this->IsBinarySerialized(info, context) == true) {
            this->InitVars(false);
            ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler1 = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &SMP::NewDataSet::SchemaChanged);
            this->Tables->CollectionChanged += schemaChangedHandler1;
            this->Relations->CollectionChanged += schemaChangedHandler1;
            return;
        }
        ::System::String^  strSchema = (cli::safe_cast<::System::String^  >(info->GetValue(L"XmlSchema", ::System::String::typeid)));
        if (this->DetermineSchemaSerializationMode(info, context) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
            ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
            ds->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
            if (ds->Tables[L"level"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::levelDataTable(ds->Tables[L"level"])));
            }
            if (ds->Tables[L"spawn"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::spawnDataTable(ds->Tables[L"spawn"])));
            }
            if (ds->Tables[L"checkpoints"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::checkpointsDataTable(ds->Tables[L"checkpoints"])));
            }
            if (ds->Tables[L"checkpoint"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::checkpointDataTable(ds->Tables[L"checkpoint"])));
            }
            if (ds->Tables[L"backgrounds"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::backgroundsDataTable(ds->Tables[L"backgrounds"])));
            }
            if (ds->Tables[L"background"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::backgroundDataTable(ds->Tables[L"background"])));
            }
            if (ds->Tables[L"foregrounds"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::foregroundsDataTable(ds->Tables[L"foregrounds"])));
            }
            if (ds->Tables[L"foreground"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::foregroundDataTable(ds->Tables[L"foreground"])));
            }
            if (ds->Tables[L"objects"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::objectsDataTable(ds->Tables[L"objects"])));
            }
            if (ds->Tables[L"object"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::objectDataTable(ds->Tables[L"object"])));
            }
            if (ds->Tables[L"finishes"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::finishesDataTable(ds->Tables[L"finishes"])));
            }
            if (ds->Tables[L"finish"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::finishDataTable(ds->Tables[L"finish"])));
            }
            if (ds->Tables[L"projectiles"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::projectilesDataTable(ds->Tables[L"projectiles"])));
            }
            if (ds->Tables[L"projectile"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::projectileDataTable(ds->Tables[L"projectile"])));
            }
            if (ds->Tables[L"items"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::itemsDataTable(ds->Tables[L"items"])));
            }
            if (ds->Tables[L"item"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::itemDataTable(ds->Tables[L"item"])));
            }
            if (ds->Tables[L"monsters"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::monstersDataTable(ds->Tables[L"monsters"])));
            }
            if (ds->Tables[L"walking_monster"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::walking_monsterDataTable(ds->Tables[L"walking_monster"])));
            }
            if (ds->Tables[L"occ_monster"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::occ_monsterDataTable(ds->Tables[L"occ_monster"])));
            }
            if (ds->Tables[L"flying_monster"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::flying_monsterDataTable(ds->Tables[L"flying_monster"])));
            }
            if (ds->Tables[L"shell_monster"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::shell_monsterDataTable(ds->Tables[L"shell_monster"])));
            }
            if (ds->Tables[L"pipes"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::pipesDataTable(ds->Tables[L"pipes"])));
            }
            if (ds->Tables[L"pipe"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::pipeDataTable(ds->Tables[L"pipe"])));
            }
            if (ds->Tables[L"blocks"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::blocksDataTable(ds->Tables[L"blocks"])));
            }
            if (ds->Tables[L"tileset"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::tilesetDataTable(ds->Tables[L"tileset"])));
            }
            if (ds->Tables[L"block"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::blockDataTable(ds->Tables[L"block"])));
            }
            if (ds->Tables[L"layers"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::layersDataTable(ds->Tables[L"layers"])));
            }
            if (ds->Tables[L"layer"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::layerDataTable(ds->Tables[L"layer"])));
            }
            if (ds->Tables[L"occ_block"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::occ_blockDataTable(ds->Tables[L"occ_block"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
        }
        this->GetSerializationData(info, context);
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &SMP::NewDataSet::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        this->Relations->CollectionChanged += schemaChangedHandler;
    }
    
    inline SMP::NewDataSet::levelDataTable^  NewDataSet::level::get() {
        return this->tablelevel;
    }
    
    inline SMP::NewDataSet::spawnDataTable^  NewDataSet::spawn::get() {
        return this->tablespawn;
    }
    
    inline SMP::NewDataSet::checkpointsDataTable^  NewDataSet::checkpoints::get() {
        return this->tablecheckpoints;
    }
    
    inline SMP::NewDataSet::checkpointDataTable^  NewDataSet::checkpoint::get() {
        return this->tablecheckpoint;
    }
    
    inline SMP::NewDataSet::backgroundsDataTable^  NewDataSet::backgrounds::get() {
        return this->tablebackgrounds;
    }
    
    inline SMP::NewDataSet::backgroundDataTable^  NewDataSet::background::get() {
        return this->tablebackground;
    }
    
    inline SMP::NewDataSet::foregroundsDataTable^  NewDataSet::foregrounds::get() {
        return this->tableforegrounds;
    }
    
    inline SMP::NewDataSet::foregroundDataTable^  NewDataSet::foreground::get() {
        return this->tableforeground;
    }
    
    inline SMP::NewDataSet::objectsDataTable^  NewDataSet::objects::get() {
        return this->tableobjects;
    }
    
    inline SMP::NewDataSet::objectDataTable^  NewDataSet::object::get() {
        return this->tableobject;
    }
    
    inline SMP::NewDataSet::finishesDataTable^  NewDataSet::finishes::get() {
        return this->tablefinishes;
    }
    
    inline SMP::NewDataSet::finishDataTable^  NewDataSet::finish::get() {
        return this->tablefinish;
    }
    
    inline SMP::NewDataSet::projectilesDataTable^  NewDataSet::projectiles::get() {
        return this->tableprojectiles;
    }
    
    inline SMP::NewDataSet::projectileDataTable^  NewDataSet::projectile::get() {
        return this->tableprojectile;
    }
    
    inline SMP::NewDataSet::itemsDataTable^  NewDataSet::items::get() {
        return this->tableitems;
    }
    
    inline SMP::NewDataSet::itemDataTable^  NewDataSet::item::get() {
        return this->tableitem;
    }
    
    inline SMP::NewDataSet::monstersDataTable^  NewDataSet::monsters::get() {
        return this->tablemonsters;
    }
    
    inline SMP::NewDataSet::walking_monsterDataTable^  NewDataSet::walking_monster::get() {
        return this->tablewalking_monster;
    }
    
    inline SMP::NewDataSet::occ_monsterDataTable^  NewDataSet::occ_monster::get() {
        return this->tableocc_monster;
    }
    
    inline SMP::NewDataSet::flying_monsterDataTable^  NewDataSet::flying_monster::get() {
        return this->tableflying_monster;
    }
    
    inline SMP::NewDataSet::shell_monsterDataTable^  NewDataSet::shell_monster::get() {
        return this->tableshell_monster;
    }
    
    inline SMP::NewDataSet::pipesDataTable^  NewDataSet::pipes::get() {
        return this->tablepipes;
    }
    
    inline SMP::NewDataSet::pipeDataTable^  NewDataSet::pipe::get() {
        return this->tablepipe;
    }
    
    inline SMP::NewDataSet::blocksDataTable^  NewDataSet::blocks::get() {
        return this->tableblocks;
    }
    
    inline SMP::NewDataSet::tilesetDataTable^  NewDataSet::tileset::get() {
        return this->tabletileset;
    }
    
    inline SMP::NewDataSet::blockDataTable^  NewDataSet::block::get() {
        return this->tableblock;
    }
    
    inline SMP::NewDataSet::layersDataTable^  NewDataSet::layers::get() {
        return this->tablelayers;
    }
    
    inline SMP::NewDataSet::layerDataTable^  NewDataSet::layer::get() {
        return this->tablelayer;
    }
    
    inline SMP::NewDataSet::occ_blockDataTable^  NewDataSet::occ_block::get() {
        return this->tableocc_block;
    }
    
    inline ::System::Data::SchemaSerializationMode NewDataSet::SchemaSerializationMode::get() {
        return this->_schemaSerializationMode;
    }
    inline System::Void NewDataSet::SchemaSerializationMode::set(::System::Data::SchemaSerializationMode value) {
        this->_schemaSerializationMode = __identifier(value);
    }
    
    inline ::System::Data::DataTableCollection^  NewDataSet::Tables::get() {
        return __super::Tables;
    }
    
    inline ::System::Data::DataRelationCollection^  NewDataSet::Relations::get() {
        return __super::Relations;
    }
    
    inline ::System::Void NewDataSet::InitializeDerivedDataSet() {
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline ::System::Data::DataSet^  NewDataSet::Clone() {
        SMP::NewDataSet^  cln = (cli::safe_cast<SMP::NewDataSet^  >(__super::Clone()));
        cln->InitVars();
        cln->SchemaSerializationMode = this->SchemaSerializationMode;
        return cln;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeTables() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeRelations() {
        return false;
    }
    
    inline ::System::Void NewDataSet::ReadXmlSerializable(::System::Xml::XmlReader^  reader) {
        if (this->DetermineSchemaSerializationMode(reader) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
            this->Reset();
            ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
            ds->ReadXml(reader);
            if (ds->Tables[L"level"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::levelDataTable(ds->Tables[L"level"])));
            }
            if (ds->Tables[L"spawn"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::spawnDataTable(ds->Tables[L"spawn"])));
            }
            if (ds->Tables[L"checkpoints"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::checkpointsDataTable(ds->Tables[L"checkpoints"])));
            }
            if (ds->Tables[L"checkpoint"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::checkpointDataTable(ds->Tables[L"checkpoint"])));
            }
            if (ds->Tables[L"backgrounds"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::backgroundsDataTable(ds->Tables[L"backgrounds"])));
            }
            if (ds->Tables[L"background"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::backgroundDataTable(ds->Tables[L"background"])));
            }
            if (ds->Tables[L"foregrounds"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::foregroundsDataTable(ds->Tables[L"foregrounds"])));
            }
            if (ds->Tables[L"foreground"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::foregroundDataTable(ds->Tables[L"foreground"])));
            }
            if (ds->Tables[L"objects"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::objectsDataTable(ds->Tables[L"objects"])));
            }
            if (ds->Tables[L"object"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::objectDataTable(ds->Tables[L"object"])));
            }
            if (ds->Tables[L"finishes"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::finishesDataTable(ds->Tables[L"finishes"])));
            }
            if (ds->Tables[L"finish"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::finishDataTable(ds->Tables[L"finish"])));
            }
            if (ds->Tables[L"projectiles"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::projectilesDataTable(ds->Tables[L"projectiles"])));
            }
            if (ds->Tables[L"projectile"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::projectileDataTable(ds->Tables[L"projectile"])));
            }
            if (ds->Tables[L"items"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::itemsDataTable(ds->Tables[L"items"])));
            }
            if (ds->Tables[L"item"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::itemDataTable(ds->Tables[L"item"])));
            }
            if (ds->Tables[L"monsters"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::monstersDataTable(ds->Tables[L"monsters"])));
            }
            if (ds->Tables[L"walking_monster"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::walking_monsterDataTable(ds->Tables[L"walking_monster"])));
            }
            if (ds->Tables[L"occ_monster"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::occ_monsterDataTable(ds->Tables[L"occ_monster"])));
            }
            if (ds->Tables[L"flying_monster"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::flying_monsterDataTable(ds->Tables[L"flying_monster"])));
            }
            if (ds->Tables[L"shell_monster"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::shell_monsterDataTable(ds->Tables[L"shell_monster"])));
            }
            if (ds->Tables[L"pipes"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::pipesDataTable(ds->Tables[L"pipes"])));
            }
            if (ds->Tables[L"pipe"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::pipeDataTable(ds->Tables[L"pipe"])));
            }
            if (ds->Tables[L"blocks"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::blocksDataTable(ds->Tables[L"blocks"])));
            }
            if (ds->Tables[L"tileset"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::tilesetDataTable(ds->Tables[L"tileset"])));
            }
            if (ds->Tables[L"block"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::blockDataTable(ds->Tables[L"block"])));
            }
            if (ds->Tables[L"layers"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::layersDataTable(ds->Tables[L"layers"])));
            }
            if (ds->Tables[L"layer"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::layerDataTable(ds->Tables[L"layer"])));
            }
            if (ds->Tables[L"occ_block"] != nullptr) {
                __super::Tables->Add((gcnew SMP::NewDataSet::occ_blockDataTable(ds->Tables[L"occ_block"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXml(reader);
            this->InitVars();
        }
    }
    
    inline ::System::Xml::Schema::XmlSchema^  NewDataSet::GetSchemaSerializable() {
        ::System::IO::MemoryStream^  stream = (gcnew ::System::IO::MemoryStream());
        this->WriteXmlSchema((gcnew ::System::Xml::XmlTextWriter(stream, nullptr)));
        stream->Position = 0;
        return ::System::Xml::Schema::XmlSchema::Read((gcnew ::System::Xml::XmlTextReader(stream)), nullptr);
    }
    
    inline ::System::Void NewDataSet::InitVars() {
        this->InitVars(true);
    }
    
    inline ::System::Void NewDataSet::InitVars(::System::Boolean initTable) {
        this->tablelevel = (cli::safe_cast<SMP::NewDataSet::levelDataTable^  >(__super::Tables[L"level"]));
        if (initTable == true) {
            if (this->tablelevel != nullptr) {
                this->tablelevel->InitVars();
            }
        }
        this->tablespawn = (cli::safe_cast<SMP::NewDataSet::spawnDataTable^  >(__super::Tables[L"spawn"]));
        if (initTable == true) {
            if (this->tablespawn != nullptr) {
                this->tablespawn->InitVars();
            }
        }
        this->tablecheckpoints = (cli::safe_cast<SMP::NewDataSet::checkpointsDataTable^  >(__super::Tables[L"checkpoints"]));
        if (initTable == true) {
            if (this->tablecheckpoints != nullptr) {
                this->tablecheckpoints->InitVars();
            }
        }
        this->tablecheckpoint = (cli::safe_cast<SMP::NewDataSet::checkpointDataTable^  >(__super::Tables[L"checkpoint"]));
        if (initTable == true) {
            if (this->tablecheckpoint != nullptr) {
                this->tablecheckpoint->InitVars();
            }
        }
        this->tablebackgrounds = (cli::safe_cast<SMP::NewDataSet::backgroundsDataTable^  >(__super::Tables[L"backgrounds"]));
        if (initTable == true) {
            if (this->tablebackgrounds != nullptr) {
                this->tablebackgrounds->InitVars();
            }
        }
        this->tablebackground = (cli::safe_cast<SMP::NewDataSet::backgroundDataTable^  >(__super::Tables[L"background"]));
        if (initTable == true) {
            if (this->tablebackground != nullptr) {
                this->tablebackground->InitVars();
            }
        }
        this->tableforegrounds = (cli::safe_cast<SMP::NewDataSet::foregroundsDataTable^  >(__super::Tables[L"foregrounds"]));
        if (initTable == true) {
            if (this->tableforegrounds != nullptr) {
                this->tableforegrounds->InitVars();
            }
        }
        this->tableforeground = (cli::safe_cast<SMP::NewDataSet::foregroundDataTable^  >(__super::Tables[L"foreground"]));
        if (initTable == true) {
            if (this->tableforeground != nullptr) {
                this->tableforeground->InitVars();
            }
        }
        this->tableobjects = (cli::safe_cast<SMP::NewDataSet::objectsDataTable^  >(__super::Tables[L"objects"]));
        if (initTable == true) {
            if (this->tableobjects != nullptr) {
                this->tableobjects->InitVars();
            }
        }
        this->tableobject = (cli::safe_cast<SMP::NewDataSet::objectDataTable^  >(__super::Tables[L"object"]));
        if (initTable == true) {
            if (this->tableobject != nullptr) {
                this->tableobject->InitVars();
            }
        }
        this->tablefinishes = (cli::safe_cast<SMP::NewDataSet::finishesDataTable^  >(__super::Tables[L"finishes"]));
        if (initTable == true) {
            if (this->tablefinishes != nullptr) {
                this->tablefinishes->InitVars();
            }
        }
        this->tablefinish = (cli::safe_cast<SMP::NewDataSet::finishDataTable^  >(__super::Tables[L"finish"]));
        if (initTable == true) {
            if (this->tablefinish != nullptr) {
                this->tablefinish->InitVars();
            }
        }
        this->tableprojectiles = (cli::safe_cast<SMP::NewDataSet::projectilesDataTable^  >(__super::Tables[L"projectiles"]));
        if (initTable == true) {
            if (this->tableprojectiles != nullptr) {
                this->tableprojectiles->InitVars();
            }
        }
        this->tableprojectile = (cli::safe_cast<SMP::NewDataSet::projectileDataTable^  >(__super::Tables[L"projectile"]));
        if (initTable == true) {
            if (this->tableprojectile != nullptr) {
                this->tableprojectile->InitVars();
            }
        }
        this->tableitems = (cli::safe_cast<SMP::NewDataSet::itemsDataTable^  >(__super::Tables[L"items"]));
        if (initTable == true) {
            if (this->tableitems != nullptr) {
                this->tableitems->InitVars();
            }
        }
        this->tableitem = (cli::safe_cast<SMP::NewDataSet::itemDataTable^  >(__super::Tables[L"item"]));
        if (initTable == true) {
            if (this->tableitem != nullptr) {
                this->tableitem->InitVars();
            }
        }
        this->tablemonsters = (cli::safe_cast<SMP::NewDataSet::monstersDataTable^  >(__super::Tables[L"monsters"]));
        if (initTable == true) {
            if (this->tablemonsters != nullptr) {
                this->tablemonsters->InitVars();
            }
        }
        this->tablewalking_monster = (cli::safe_cast<SMP::NewDataSet::walking_monsterDataTable^  >(__super::Tables[L"walking_monster"]));
        if (initTable == true) {
            if (this->tablewalking_monster != nullptr) {
                this->tablewalking_monster->InitVars();
            }
        }
        this->tableocc_monster = (cli::safe_cast<SMP::NewDataSet::occ_monsterDataTable^  >(__super::Tables[L"occ_monster"]));
        if (initTable == true) {
            if (this->tableocc_monster != nullptr) {
                this->tableocc_monster->InitVars();
            }
        }
        this->tableflying_monster = (cli::safe_cast<SMP::NewDataSet::flying_monsterDataTable^  >(__super::Tables[L"flying_monster"]));
        if (initTable == true) {
            if (this->tableflying_monster != nullptr) {
                this->tableflying_monster->InitVars();
            }
        }
        this->tableshell_monster = (cli::safe_cast<SMP::NewDataSet::shell_monsterDataTable^  >(__super::Tables[L"shell_monster"]));
        if (initTable == true) {
            if (this->tableshell_monster != nullptr) {
                this->tableshell_monster->InitVars();
            }
        }
        this->tablepipes = (cli::safe_cast<SMP::NewDataSet::pipesDataTable^  >(__super::Tables[L"pipes"]));
        if (initTable == true) {
            if (this->tablepipes != nullptr) {
                this->tablepipes->InitVars();
            }
        }
        this->tablepipe = (cli::safe_cast<SMP::NewDataSet::pipeDataTable^  >(__super::Tables[L"pipe"]));
        if (initTable == true) {
            if (this->tablepipe != nullptr) {
                this->tablepipe->InitVars();
            }
        }
        this->tableblocks = (cli::safe_cast<SMP::NewDataSet::blocksDataTable^  >(__super::Tables[L"blocks"]));
        if (initTable == true) {
            if (this->tableblocks != nullptr) {
                this->tableblocks->InitVars();
            }
        }
        this->tabletileset = (cli::safe_cast<SMP::NewDataSet::tilesetDataTable^  >(__super::Tables[L"tileset"]));
        if (initTable == true) {
            if (this->tabletileset != nullptr) {
                this->tabletileset->InitVars();
            }
        }
        this->tableblock = (cli::safe_cast<SMP::NewDataSet::blockDataTable^  >(__super::Tables[L"block"]));
        if (initTable == true) {
            if (this->tableblock != nullptr) {
                this->tableblock->InitVars();
            }
        }
        this->tablelayers = (cli::safe_cast<SMP::NewDataSet::layersDataTable^  >(__super::Tables[L"layers"]));
        if (initTable == true) {
            if (this->tablelayers != nullptr) {
                this->tablelayers->InitVars();
            }
        }
        this->tablelayer = (cli::safe_cast<SMP::NewDataSet::layerDataTable^  >(__super::Tables[L"layer"]));
        if (initTable == true) {
            if (this->tablelayer != nullptr) {
                this->tablelayer->InitVars();
            }
        }
        this->tableocc_block = (cli::safe_cast<SMP::NewDataSet::occ_blockDataTable^  >(__super::Tables[L"occ_block"]));
        if (initTable == true) {
            if (this->tableocc_block != nullptr) {
                this->tableocc_block->InitVars();
            }
        }
        this->relationlevel_spawn = this->Relations[L"level_spawn"];
        this->relationlevel_checkpoints = this->Relations[L"level_checkpoints"];
        this->relationcheckpoints_checkpoint = this->Relations[L"checkpoints_checkpoint"];
        this->relationlevel_backgrounds = this->Relations[L"level_backgrounds"];
        this->relationbackgrounds_background = this->Relations[L"backgrounds_background"];
        this->relationlevel_foregrounds = this->Relations[L"level_foregrounds"];
        this->relationforegrounds_foreground = this->Relations[L"foregrounds_foreground"];
        this->relationlevel_objects = this->Relations[L"level_objects"];
        this->relationobjects_object = this->Relations[L"objects_object"];
        this->relationlevel_finishes = this->Relations[L"level_finishes"];
        this->relationfinishes_finish = this->Relations[L"finishes_finish"];
        this->relationlevel_projectiles = this->Relations[L"level_projectiles"];
        this->relationprojectiles_projectile = this->Relations[L"projectiles_projectile"];
        this->relationlevel_items = this->Relations[L"level_items"];
        this->relationitems_item = this->Relations[L"items_item"];
        this->relationlevel_monsters = this->Relations[L"level_monsters"];
        this->relationmonsters_walking_monster = this->Relations[L"monsters_walking_monster"];
        this->relationwalking_monster_occ_monster = this->Relations[L"walking_monster_occ_monster"];
        this->relationflying_monster_occ_monster = this->Relations[L"flying_monster_occ_monster"];
        this->relationshell_monster_occ_monster = this->Relations[L"shell_monster_occ_monster"];
        this->relationmonsters_flying_monster = this->Relations[L"monsters_flying_monster"];
        this->relationmonsters_shell_monster = this->Relations[L"monsters_shell_monster"];
        this->relationlevel_pipes = this->Relations[L"level_pipes"];
        this->relationpipes_pipe = this->Relations[L"pipes_pipe"];
        this->relationlevel_blocks = this->Relations[L"level_blocks"];
        this->relationblocks_tileset = this->Relations[L"blocks_tileset"];
        this->relationtileset_block = this->Relations[L"tileset_block"];
        this->relationblocks_layers = this->Relations[L"blocks_layers"];
        this->relationlayers_layer = this->Relations[L"layers_layer"];
        this->relationlayer_occ_block = this->Relations[L"layer_occ_block"];
    }
    
    inline ::System::Void NewDataSet::InitClass() {
        this->DataSetName = L"NewDataSet";
        this->Prefix = L"";
        this->Locale = (gcnew ::System::Globalization::CultureInfo(L""));
        this->EnforceConstraints = true;
        this->SchemaSerializationMode = ::System::Data::SchemaSerializationMode::IncludeSchema;
        this->tablelevel = (gcnew SMP::NewDataSet::levelDataTable());
        __super::Tables->Add(this->tablelevel);
        this->tablespawn = (gcnew SMP::NewDataSet::spawnDataTable());
        __super::Tables->Add(this->tablespawn);
        this->tablecheckpoints = (gcnew SMP::NewDataSet::checkpointsDataTable());
        __super::Tables->Add(this->tablecheckpoints);
        this->tablecheckpoint = (gcnew SMP::NewDataSet::checkpointDataTable());
        __super::Tables->Add(this->tablecheckpoint);
        this->tablebackgrounds = (gcnew SMP::NewDataSet::backgroundsDataTable());
        __super::Tables->Add(this->tablebackgrounds);
        this->tablebackground = (gcnew SMP::NewDataSet::backgroundDataTable());
        __super::Tables->Add(this->tablebackground);
        this->tableforegrounds = (gcnew SMP::NewDataSet::foregroundsDataTable());
        __super::Tables->Add(this->tableforegrounds);
        this->tableforeground = (gcnew SMP::NewDataSet::foregroundDataTable());
        __super::Tables->Add(this->tableforeground);
        this->tableobjects = (gcnew SMP::NewDataSet::objectsDataTable());
        __super::Tables->Add(this->tableobjects);
        this->tableobject = (gcnew SMP::NewDataSet::objectDataTable());
        __super::Tables->Add(this->tableobject);
        this->tablefinishes = (gcnew SMP::NewDataSet::finishesDataTable());
        __super::Tables->Add(this->tablefinishes);
        this->tablefinish = (gcnew SMP::NewDataSet::finishDataTable());
        __super::Tables->Add(this->tablefinish);
        this->tableprojectiles = (gcnew SMP::NewDataSet::projectilesDataTable());
        __super::Tables->Add(this->tableprojectiles);
        this->tableprojectile = (gcnew SMP::NewDataSet::projectileDataTable());
        __super::Tables->Add(this->tableprojectile);
        this->tableitems = (gcnew SMP::NewDataSet::itemsDataTable());
        __super::Tables->Add(this->tableitems);
        this->tableitem = (gcnew SMP::NewDataSet::itemDataTable());
        __super::Tables->Add(this->tableitem);
        this->tablemonsters = (gcnew SMP::NewDataSet::monstersDataTable());
        __super::Tables->Add(this->tablemonsters);
        this->tablewalking_monster = (gcnew SMP::NewDataSet::walking_monsterDataTable());
        __super::Tables->Add(this->tablewalking_monster);
        this->tableocc_monster = (gcnew SMP::NewDataSet::occ_monsterDataTable());
        __super::Tables->Add(this->tableocc_monster);
        this->tableflying_monster = (gcnew SMP::NewDataSet::flying_monsterDataTable());
        __super::Tables->Add(this->tableflying_monster);
        this->tableshell_monster = (gcnew SMP::NewDataSet::shell_monsterDataTable());
        __super::Tables->Add(this->tableshell_monster);
        this->tablepipes = (gcnew SMP::NewDataSet::pipesDataTable());
        __super::Tables->Add(this->tablepipes);
        this->tablepipe = (gcnew SMP::NewDataSet::pipeDataTable());
        __super::Tables->Add(this->tablepipe);
        this->tableblocks = (gcnew SMP::NewDataSet::blocksDataTable());
        __super::Tables->Add(this->tableblocks);
        this->tabletileset = (gcnew SMP::NewDataSet::tilesetDataTable());
        __super::Tables->Add(this->tabletileset);
        this->tableblock = (gcnew SMP::NewDataSet::blockDataTable());
        __super::Tables->Add(this->tableblock);
        this->tablelayers = (gcnew SMP::NewDataSet::layersDataTable());
        __super::Tables->Add(this->tablelayers);
        this->tablelayer = (gcnew SMP::NewDataSet::layerDataTable());
        __super::Tables->Add(this->tablelayer);
        this->tableocc_block = (gcnew SMP::NewDataSet::occ_blockDataTable());
        __super::Tables->Add(this->tableocc_block);
        ::System::Data::ForeignKeyConstraint^  fkc;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"level_spawn", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablelevel->level_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablespawn->level_IdColumn}));
        this->tablespawn->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"level_checkpoints", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablelevel->level_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecheckpoints->level_IdColumn}));
        this->tablecheckpoints->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"checkpoints_checkpoint", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecheckpoints->checkpoints_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecheckpoint->checkpoints_IdColumn}));
        this->tablecheckpoint->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"level_backgrounds", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablelevel->level_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablebackgrounds->level_IdColumn}));
        this->tablebackgrounds->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"backgrounds_background", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablebackgrounds->backgrounds_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablebackground->backgrounds_IdColumn}));
        this->tablebackground->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"level_foregrounds", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablelevel->level_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableforegrounds->level_IdColumn}));
        this->tableforegrounds->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"foregrounds_foreground", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableforegrounds->foregrounds_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableforeground->foregrounds_IdColumn}));
        this->tableforeground->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"level_objects", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablelevel->level_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableobjects->level_IdColumn}));
        this->tableobjects->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"objects_object", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableobjects->objects_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableobject->objects_IdColumn}));
        this->tableobject->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"level_finishes", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablelevel->level_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablefinishes->level_IdColumn}));
        this->tablefinishes->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"finishes_finish", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablefinishes->finishes_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablefinish->finishes_IdColumn}));
        this->tablefinish->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"level_projectiles", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablelevel->level_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableprojectiles->level_IdColumn}));
        this->tableprojectiles->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"projectiles_projectile", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableprojectiles->projectiles_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableprojectile->projectiles_IdColumn}));
        this->tableprojectile->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"level_items", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablelevel->level_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableitems->level_IdColumn}));
        this->tableitems->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"items_item", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableitems->items_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableitem->items_IdColumn}));
        this->tableitem->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"level_monsters", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablelevel->level_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablemonsters->level_IdColumn}));
        this->tablemonsters->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"monsters_walking_monster", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablemonsters->monsters_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablewalking_monster->monsters_IdColumn}));
        this->tablewalking_monster->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"walking_monster_occ_monster", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablewalking_monster->walking_monster_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableocc_monster->walking_monster_IdColumn}));
        this->tableocc_monster->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"flying_monster_occ_monster", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableflying_monster->flying_monster_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableocc_monster->flying_monster_IdColumn}));
        this->tableocc_monster->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"shell_monster_occ_monster", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableshell_monster->shell_monster_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableocc_monster->shell_monster_IdColumn}));
        this->tableocc_monster->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"monsters_flying_monster", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablemonsters->monsters_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableflying_monster->monsters_IdColumn}));
        this->tableflying_monster->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"monsters_shell_monster", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablemonsters->monsters_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableshell_monster->monsters_IdColumn}));
        this->tableshell_monster->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"level_pipes", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablelevel->level_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablepipes->level_IdColumn}));
        this->tablepipes->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"pipes_pipe", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablepipes->pipes_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablepipe->pipes_IdColumn}));
        this->tablepipe->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"level_blocks", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablelevel->level_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableblocks->level_IdColumn}));
        this->tableblocks->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"blocks_tileset", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableblocks->blocks_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabletileset->blocks_IdColumn}));
        this->tabletileset->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"tileset_block", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabletileset->tileset_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableblock->tileset_IdColumn}));
        this->tableblock->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"blocks_layers", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableblocks->blocks_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablelayers->blocks_IdColumn}));
        this->tablelayers->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"layers_layer", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablelayers->layers_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablelayer->layers_IdColumn}));
        this->tablelayer->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"layer_occ_block", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablelayer->layer_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableocc_block->layer_IdColumn}));
        this->tableocc_block->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        this->relationlevel_spawn = (gcnew ::System::Data::DataRelation(L"level_spawn", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablelevel->level_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablespawn->level_IdColumn}, false));
        this->relationlevel_spawn->Nested = true;
        this->Relations->Add(this->relationlevel_spawn);
        this->relationlevel_checkpoints = (gcnew ::System::Data::DataRelation(L"level_checkpoints", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablelevel->level_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecheckpoints->level_IdColumn}, false));
        this->relationlevel_checkpoints->Nested = true;
        this->Relations->Add(this->relationlevel_checkpoints);
        this->relationcheckpoints_checkpoint = (gcnew ::System::Data::DataRelation(L"checkpoints_checkpoint", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecheckpoints->checkpoints_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecheckpoint->checkpoints_IdColumn}, false));
        this->relationcheckpoints_checkpoint->Nested = true;
        this->Relations->Add(this->relationcheckpoints_checkpoint);
        this->relationlevel_backgrounds = (gcnew ::System::Data::DataRelation(L"level_backgrounds", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablelevel->level_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablebackgrounds->level_IdColumn}, false));
        this->relationlevel_backgrounds->Nested = true;
        this->Relations->Add(this->relationlevel_backgrounds);
        this->relationbackgrounds_background = (gcnew ::System::Data::DataRelation(L"backgrounds_background", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablebackgrounds->backgrounds_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablebackground->backgrounds_IdColumn}, false));
        this->relationbackgrounds_background->Nested = true;
        this->Relations->Add(this->relationbackgrounds_background);
        this->relationlevel_foregrounds = (gcnew ::System::Data::DataRelation(L"level_foregrounds", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablelevel->level_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableforegrounds->level_IdColumn}, false));
        this->relationlevel_foregrounds->Nested = true;
        this->Relations->Add(this->relationlevel_foregrounds);
        this->relationforegrounds_foreground = (gcnew ::System::Data::DataRelation(L"foregrounds_foreground", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableforegrounds->foregrounds_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableforeground->foregrounds_IdColumn}, false));
        this->relationforegrounds_foreground->Nested = true;
        this->Relations->Add(this->relationforegrounds_foreground);
        this->relationlevel_objects = (gcnew ::System::Data::DataRelation(L"level_objects", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablelevel->level_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableobjects->level_IdColumn}, false));
        this->relationlevel_objects->Nested = true;
        this->Relations->Add(this->relationlevel_objects);
        this->relationobjects_object = (gcnew ::System::Data::DataRelation(L"objects_object", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableobjects->objects_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableobject->objects_IdColumn}, false));
        this->relationobjects_object->Nested = true;
        this->Relations->Add(this->relationobjects_object);
        this->relationlevel_finishes = (gcnew ::System::Data::DataRelation(L"level_finishes", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablelevel->level_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablefinishes->level_IdColumn}, false));
        this->relationlevel_finishes->Nested = true;
        this->Relations->Add(this->relationlevel_finishes);
        this->relationfinishes_finish = (gcnew ::System::Data::DataRelation(L"finishes_finish", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablefinishes->finishes_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablefinish->finishes_IdColumn}, false));
        this->relationfinishes_finish->Nested = true;
        this->Relations->Add(this->relationfinishes_finish);
        this->relationlevel_projectiles = (gcnew ::System::Data::DataRelation(L"level_projectiles", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablelevel->level_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableprojectiles->level_IdColumn}, false));
        this->relationlevel_projectiles->Nested = true;
        this->Relations->Add(this->relationlevel_projectiles);
        this->relationprojectiles_projectile = (gcnew ::System::Data::DataRelation(L"projectiles_projectile", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableprojectiles->projectiles_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableprojectile->projectiles_IdColumn}, false));
        this->relationprojectiles_projectile->Nested = true;
        this->Relations->Add(this->relationprojectiles_projectile);
        this->relationlevel_items = (gcnew ::System::Data::DataRelation(L"level_items", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablelevel->level_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableitems->level_IdColumn}, false));
        this->relationlevel_items->Nested = true;
        this->Relations->Add(this->relationlevel_items);
        this->relationitems_item = (gcnew ::System::Data::DataRelation(L"items_item", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableitems->items_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableitem->items_IdColumn}, false));
        this->relationitems_item->Nested = true;
        this->Relations->Add(this->relationitems_item);
        this->relationlevel_monsters = (gcnew ::System::Data::DataRelation(L"level_monsters", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablelevel->level_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablemonsters->level_IdColumn}, false));
        this->relationlevel_monsters->Nested = true;
        this->Relations->Add(this->relationlevel_monsters);
        this->relationmonsters_walking_monster = (gcnew ::System::Data::DataRelation(L"monsters_walking_monster", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablemonsters->monsters_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablewalking_monster->monsters_IdColumn}, false));
        this->relationmonsters_walking_monster->Nested = true;
        this->Relations->Add(this->relationmonsters_walking_monster);
        this->relationwalking_monster_occ_monster = (gcnew ::System::Data::DataRelation(L"walking_monster_occ_monster", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablewalking_monster->walking_monster_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableocc_monster->walking_monster_IdColumn}, false));
        this->relationwalking_monster_occ_monster->Nested = true;
        this->Relations->Add(this->relationwalking_monster_occ_monster);
        this->relationflying_monster_occ_monster = (gcnew ::System::Data::DataRelation(L"flying_monster_occ_monster", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableflying_monster->flying_monster_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableocc_monster->flying_monster_IdColumn}, false));
        this->relationflying_monster_occ_monster->Nested = true;
        this->Relations->Add(this->relationflying_monster_occ_monster);
        this->relationshell_monster_occ_monster = (gcnew ::System::Data::DataRelation(L"shell_monster_occ_monster", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableshell_monster->shell_monster_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableocc_monster->shell_monster_IdColumn}, false));
        this->relationshell_monster_occ_monster->Nested = true;
        this->Relations->Add(this->relationshell_monster_occ_monster);
        this->relationmonsters_flying_monster = (gcnew ::System::Data::DataRelation(L"monsters_flying_monster", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablemonsters->monsters_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableflying_monster->monsters_IdColumn}, false));
        this->relationmonsters_flying_monster->Nested = true;
        this->Relations->Add(this->relationmonsters_flying_monster);
        this->relationmonsters_shell_monster = (gcnew ::System::Data::DataRelation(L"monsters_shell_monster", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablemonsters->monsters_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableshell_monster->monsters_IdColumn}, false));
        this->relationmonsters_shell_monster->Nested = true;
        this->Relations->Add(this->relationmonsters_shell_monster);
        this->relationlevel_pipes = (gcnew ::System::Data::DataRelation(L"level_pipes", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablelevel->level_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablepipes->level_IdColumn}, false));
        this->relationlevel_pipes->Nested = true;
        this->Relations->Add(this->relationlevel_pipes);
        this->relationpipes_pipe = (gcnew ::System::Data::DataRelation(L"pipes_pipe", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablepipes->pipes_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablepipe->pipes_IdColumn}, false));
        this->relationpipes_pipe->Nested = true;
        this->Relations->Add(this->relationpipes_pipe);
        this->relationlevel_blocks = (gcnew ::System::Data::DataRelation(L"level_blocks", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablelevel->level_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableblocks->level_IdColumn}, false));
        this->relationlevel_blocks->Nested = true;
        this->Relations->Add(this->relationlevel_blocks);
        this->relationblocks_tileset = (gcnew ::System::Data::DataRelation(L"blocks_tileset", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableblocks->blocks_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabletileset->blocks_IdColumn}, false));
        this->relationblocks_tileset->Nested = true;
        this->Relations->Add(this->relationblocks_tileset);
        this->relationtileset_block = (gcnew ::System::Data::DataRelation(L"tileset_block", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabletileset->tileset_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableblock->tileset_IdColumn}, false));
        this->relationtileset_block->Nested = true;
        this->Relations->Add(this->relationtileset_block);
        this->relationblocks_layers = (gcnew ::System::Data::DataRelation(L"blocks_layers", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableblocks->blocks_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablelayers->blocks_IdColumn}, false));
        this->relationblocks_layers->Nested = true;
        this->Relations->Add(this->relationblocks_layers);
        this->relationlayers_layer = (gcnew ::System::Data::DataRelation(L"layers_layer", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablelayers->layers_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablelayer->layers_IdColumn}, false));
        this->relationlayers_layer->Nested = true;
        this->Relations->Add(this->relationlayers_layer);
        this->relationlayer_occ_block = (gcnew ::System::Data::DataRelation(L"layer_occ_block", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablelayer->layer_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableocc_block->layer_IdColumn}, false));
        this->relationlayer_occ_block->Nested = true;
        this->Relations->Add(this->relationlayer_occ_block);
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializelevel() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializespawn() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializecheckpoints() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializecheckpoint() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializebackgrounds() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializebackground() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeforegrounds() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeforeground() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeobjects() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeobject() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializefinishes() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializefinish() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeprojectiles() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeprojectile() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeitems() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeitem() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializemonsters() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializewalking_monster() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeocc_monster() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeflying_monster() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeshell_monster() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializepipes() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializepipe() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeblocks() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializetileset() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeblock() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializelayers() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializelayer() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeocc_block() {
        return false;
    }
    
    inline ::System::Void NewDataSet::SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e) {
        if (e->Action == ::System::ComponentModel::CollectionChangeAction::Remove) {
            this->InitVars();
        }
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        SMP::NewDataSet^  ds = (gcnew SMP::NewDataSet());
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        ::System::Xml::Schema::XmlSchemaAny^  any = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any->Namespace = ds->Namespace;
        sequence->Items->Add(any);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::levelDataTable::levelDataTable() {
        this->TableName = L"level";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::levelDataTable::levelDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::levelDataTable::levelDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::levelDataTable::nameColumn::get() {
        return this->columnname;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::levelDataTable::widthColumn::get() {
        return this->columnwidth;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::levelDataTable::heightColumn::get() {
        return this->columnheight;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::levelDataTable::musicColumn::get() {
        return this->columnmusic;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::levelDataTable::level_IdColumn::get() {
        return this->columnlevel_Id;
    }
    
    inline ::System::Int32 NewDataSet::levelDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline SMP::NewDataSet::levelRow^  NewDataSet::levelDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<SMP::NewDataSet::levelRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::levelDataTable::AddlevelRow(SMP::NewDataSet::levelRow^  row) {
        this->Rows->Add(row);
    }
    
    inline SMP::NewDataSet::levelRow^  NewDataSet::levelDataTable::AddlevelRow(System::String^  name, System::Byte width, 
                System::Byte height, System::String^  music) {
        SMP::NewDataSet::levelRow^  rowlevelRow = (cli::safe_cast<SMP::NewDataSet::levelRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(5) {name, width, height, 
            music, nullptr};
        rowlevelRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowlevelRow);
        return rowlevelRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::levelDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::levelDataTable::Clone() {
        SMP::NewDataSet::levelDataTable^  cln = (cli::safe_cast<SMP::NewDataSet::levelDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::levelDataTable::CreateInstance() {
        return (gcnew SMP::NewDataSet::levelDataTable());
    }
    
    inline ::System::Void NewDataSet::levelDataTable::InitVars() {
        this->columnname = __super::Columns[L"name"];
        this->columnwidth = __super::Columns[L"width"];
        this->columnheight = __super::Columns[L"height"];
        this->columnmusic = __super::Columns[L"music"];
        this->columnlevel_Id = __super::Columns[L"level_Id"];
    }
    
    inline ::System::Void NewDataSet::levelDataTable::InitClass() {
        this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnname);
        this->columnwidth = (gcnew ::System::Data::DataColumn(L"width", ::System::Byte::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnwidth);
        this->columnheight = (gcnew ::System::Data::DataColumn(L"height", ::System::Byte::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnheight);
        this->columnmusic = (gcnew ::System::Data::DataColumn(L"music", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnmusic);
        this->columnlevel_Id = (gcnew ::System::Data::DataColumn(L"level_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnlevel_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnlevel_Id}, 
                true)));
        this->columnname->AllowDBNull = false;
        this->columnname->Namespace = L"";
        this->columnwidth->AllowDBNull = false;
        this->columnwidth->Namespace = L"";
        this->columnheight->AllowDBNull = false;
        this->columnheight->Namespace = L"";
        this->columnmusic->AllowDBNull = false;
        this->columnmusic->Namespace = L"";
        this->columnlevel_Id->AutoIncrement = true;
        this->columnlevel_Id->AllowDBNull = false;
        this->columnlevel_Id->Unique = true;
    }
    
    inline SMP::NewDataSet::levelRow^  NewDataSet::levelDataTable::NewlevelRow() {
        return (cli::safe_cast<SMP::NewDataSet::levelRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::levelDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew SMP::NewDataSet::levelRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::levelDataTable::GetRowType() {
        return SMP::NewDataSet::levelRow::typeid;
    }
    
    inline ::System::Void NewDataSet::levelDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->levelRowChanged(this, (gcnew SMP::NewDataSet::levelRowChangeEvent((cli::safe_cast<SMP::NewDataSet::levelRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::levelDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->levelRowChanging(this, (gcnew SMP::NewDataSet::levelRowChangeEvent((cli::safe_cast<SMP::NewDataSet::levelRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::levelDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->levelRowDeleted(this, (gcnew SMP::NewDataSet::levelRowChangeEvent((cli::safe_cast<SMP::NewDataSet::levelRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::levelDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->levelRowDeleting(this, (gcnew SMP::NewDataSet::levelRowChangeEvent((cli::safe_cast<SMP::NewDataSet::levelRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::levelDataTable::RemovelevelRow(SMP::NewDataSet::levelRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::levelDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        SMP::NewDataSet^  ds = (gcnew SMP::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"levelDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::spawnDataTable::spawnDataTable() {
        this->TableName = L"spawn";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::spawnDataTable::spawnDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::spawnDataTable::spawnDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::spawnDataTable::positionXColumn::get() {
        return this->columnpositionX;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::spawnDataTable::positionYColumn::get() {
        return this->columnpositionY;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::spawnDataTable::level_IdColumn::get() {
        return this->columnlevel_Id;
    }
    
    inline ::System::Int32 NewDataSet::spawnDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline SMP::NewDataSet::spawnRow^  NewDataSet::spawnDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<SMP::NewDataSet::spawnRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::spawnDataTable::AddspawnRow(SMP::NewDataSet::spawnRow^  row) {
        this->Rows->Add(row);
    }
    
    inline SMP::NewDataSet::spawnRow^  NewDataSet::spawnDataTable::AddspawnRow(System::Single positionX, System::Single positionY, 
                SMP::NewDataSet::levelRow^  parentlevelRowBylevel_spawn) {
        SMP::NewDataSet::spawnRow^  rowspawnRow = (cli::safe_cast<SMP::NewDataSet::spawnRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {positionX, positionY, 
            nullptr};
        if (parentlevelRowBylevel_spawn != nullptr) {
            columnValuesArray[2] = parentlevelRowBylevel_spawn[4];
        }
        rowspawnRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowspawnRow);
        return rowspawnRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::spawnDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::spawnDataTable::Clone() {
        SMP::NewDataSet::spawnDataTable^  cln = (cli::safe_cast<SMP::NewDataSet::spawnDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::spawnDataTable::CreateInstance() {
        return (gcnew SMP::NewDataSet::spawnDataTable());
    }
    
    inline ::System::Void NewDataSet::spawnDataTable::InitVars() {
        this->columnpositionX = __super::Columns[L"positionX"];
        this->columnpositionY = __super::Columns[L"positionY"];
        this->columnlevel_Id = __super::Columns[L"level_Id"];
    }
    
    inline ::System::Void NewDataSet::spawnDataTable::InitClass() {
        this->columnpositionX = (gcnew ::System::Data::DataColumn(L"positionX", ::System::Single::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnpositionX);
        this->columnpositionY = (gcnew ::System::Data::DataColumn(L"positionY", ::System::Single::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnpositionY);
        this->columnlevel_Id = (gcnew ::System::Data::DataColumn(L"level_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnlevel_Id);
        this->columnpositionX->AllowDBNull = false;
        this->columnpositionX->Namespace = L"";
        this->columnpositionY->AllowDBNull = false;
        this->columnpositionY->Namespace = L"";
    }
    
    inline SMP::NewDataSet::spawnRow^  NewDataSet::spawnDataTable::NewspawnRow() {
        return (cli::safe_cast<SMP::NewDataSet::spawnRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::spawnDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew SMP::NewDataSet::spawnRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::spawnDataTable::GetRowType() {
        return SMP::NewDataSet::spawnRow::typeid;
    }
    
    inline ::System::Void NewDataSet::spawnDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->spawnRowChanged(this, (gcnew SMP::NewDataSet::spawnRowChangeEvent((cli::safe_cast<SMP::NewDataSet::spawnRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::spawnDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->spawnRowChanging(this, (gcnew SMP::NewDataSet::spawnRowChangeEvent((cli::safe_cast<SMP::NewDataSet::spawnRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::spawnDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->spawnRowDeleted(this, (gcnew SMP::NewDataSet::spawnRowChangeEvent((cli::safe_cast<SMP::NewDataSet::spawnRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::spawnDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->spawnRowDeleting(this, (gcnew SMP::NewDataSet::spawnRowChangeEvent((cli::safe_cast<SMP::NewDataSet::spawnRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::spawnDataTable::RemovespawnRow(SMP::NewDataSet::spawnRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::spawnDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        SMP::NewDataSet^  ds = (gcnew SMP::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"spawnDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::checkpointsDataTable::checkpointsDataTable() {
        this->TableName = L"checkpoints";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::checkpointsDataTable::checkpointsDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::checkpointsDataTable::checkpointsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::checkpointsDataTable::checkpoints_IdColumn::get() {
        return this->columncheckpoints_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::checkpointsDataTable::level_IdColumn::get() {
        return this->columnlevel_Id;
    }
    
    inline ::System::Int32 NewDataSet::checkpointsDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline SMP::NewDataSet::checkpointsRow^  NewDataSet::checkpointsDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<SMP::NewDataSet::checkpointsRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::checkpointsDataTable::AddcheckpointsRow(SMP::NewDataSet::checkpointsRow^  row) {
        this->Rows->Add(row);
    }
    
    inline SMP::NewDataSet::checkpointsRow^  NewDataSet::checkpointsDataTable::AddcheckpointsRow(SMP::NewDataSet::levelRow^  parentlevelRowBylevel_checkpoints) {
        SMP::NewDataSet::checkpointsRow^  rowcheckpointsRow = (cli::safe_cast<SMP::NewDataSet::checkpointsRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, nullptr};
        if (parentlevelRowBylevel_checkpoints != nullptr) {
            columnValuesArray[1] = parentlevelRowBylevel_checkpoints[4];
        }
        rowcheckpointsRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowcheckpointsRow);
        return rowcheckpointsRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::checkpointsDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::checkpointsDataTable::Clone() {
        SMP::NewDataSet::checkpointsDataTable^  cln = (cli::safe_cast<SMP::NewDataSet::checkpointsDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::checkpointsDataTable::CreateInstance() {
        return (gcnew SMP::NewDataSet::checkpointsDataTable());
    }
    
    inline ::System::Void NewDataSet::checkpointsDataTable::InitVars() {
        this->columncheckpoints_Id = __super::Columns[L"checkpoints_Id"];
        this->columnlevel_Id = __super::Columns[L"level_Id"];
    }
    
    inline ::System::Void NewDataSet::checkpointsDataTable::InitClass() {
        this->columncheckpoints_Id = (gcnew ::System::Data::DataColumn(L"checkpoints_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columncheckpoints_Id);
        this->columnlevel_Id = (gcnew ::System::Data::DataColumn(L"level_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnlevel_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columncheckpoints_Id}, 
                true)));
        this->columncheckpoints_Id->AutoIncrement = true;
        this->columncheckpoints_Id->AllowDBNull = false;
        this->columncheckpoints_Id->Unique = true;
    }
    
    inline SMP::NewDataSet::checkpointsRow^  NewDataSet::checkpointsDataTable::NewcheckpointsRow() {
        return (cli::safe_cast<SMP::NewDataSet::checkpointsRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::checkpointsDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew SMP::NewDataSet::checkpointsRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::checkpointsDataTable::GetRowType() {
        return SMP::NewDataSet::checkpointsRow::typeid;
    }
    
    inline ::System::Void NewDataSet::checkpointsDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->checkpointsRowChanged(this, (gcnew SMP::NewDataSet::checkpointsRowChangeEvent((cli::safe_cast<SMP::NewDataSet::checkpointsRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::checkpointsDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->checkpointsRowChanging(this, (gcnew SMP::NewDataSet::checkpointsRowChangeEvent((cli::safe_cast<SMP::NewDataSet::checkpointsRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::checkpointsDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->checkpointsRowDeleted(this, (gcnew SMP::NewDataSet::checkpointsRowChangeEvent((cli::safe_cast<SMP::NewDataSet::checkpointsRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::checkpointsDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->checkpointsRowDeleting(this, (gcnew SMP::NewDataSet::checkpointsRowChangeEvent((cli::safe_cast<SMP::NewDataSet::checkpointsRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::checkpointsDataTable::RemovecheckpointsRow(SMP::NewDataSet::checkpointsRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::checkpointsDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        SMP::NewDataSet^  ds = (gcnew SMP::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"checkpointsDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::checkpointDataTable::checkpointDataTable() {
        this->TableName = L"checkpoint";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::checkpointDataTable::checkpointDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::checkpointDataTable::checkpointDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::checkpointDataTable::imgColumn::get() {
        return this->columnimg;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::checkpointDataTable::positionXColumn::get() {
        return this->columnpositionX;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::checkpointDataTable::positionYColumn::get() {
        return this->columnpositionY;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::checkpointDataTable::checkpoints_IdColumn::get() {
        return this->columncheckpoints_Id;
    }
    
    inline ::System::Int32 NewDataSet::checkpointDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline SMP::NewDataSet::checkpointRow^  NewDataSet::checkpointDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<SMP::NewDataSet::checkpointRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::checkpointDataTable::AddcheckpointRow(SMP::NewDataSet::checkpointRow^  row) {
        this->Rows->Add(row);
    }
    
    inline SMP::NewDataSet::checkpointRow^  NewDataSet::checkpointDataTable::AddcheckpointRow(System::String^  img, System::Single positionX, 
                System::Single positionY, SMP::NewDataSet::checkpointsRow^  parentcheckpointsRowBycheckpoints_checkpoint) {
        SMP::NewDataSet::checkpointRow^  rowcheckpointRow = (cli::safe_cast<SMP::NewDataSet::checkpointRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {img, positionX, positionY, 
            nullptr};
        if (parentcheckpointsRowBycheckpoints_checkpoint != nullptr) {
            columnValuesArray[3] = parentcheckpointsRowBycheckpoints_checkpoint[0];
        }
        rowcheckpointRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowcheckpointRow);
        return rowcheckpointRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::checkpointDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::checkpointDataTable::Clone() {
        SMP::NewDataSet::checkpointDataTable^  cln = (cli::safe_cast<SMP::NewDataSet::checkpointDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::checkpointDataTable::CreateInstance() {
        return (gcnew SMP::NewDataSet::checkpointDataTable());
    }
    
    inline ::System::Void NewDataSet::checkpointDataTable::InitVars() {
        this->columnimg = __super::Columns[L"img"];
        this->columnpositionX = __super::Columns[L"positionX"];
        this->columnpositionY = __super::Columns[L"positionY"];
        this->columncheckpoints_Id = __super::Columns[L"checkpoints_Id"];
    }
    
    inline ::System::Void NewDataSet::checkpointDataTable::InitClass() {
        this->columnimg = (gcnew ::System::Data::DataColumn(L"img", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnimg);
        this->columnpositionX = (gcnew ::System::Data::DataColumn(L"positionX", ::System::Single::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnpositionX);
        this->columnpositionY = (gcnew ::System::Data::DataColumn(L"positionY", ::System::Single::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnpositionY);
        this->columncheckpoints_Id = (gcnew ::System::Data::DataColumn(L"checkpoints_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columncheckpoints_Id);
        this->columnimg->AllowDBNull = false;
        this->columnimg->Namespace = L"";
        this->columnpositionX->AllowDBNull = false;
        this->columnpositionX->Namespace = L"";
        this->columnpositionY->AllowDBNull = false;
        this->columnpositionY->Namespace = L"";
    }
    
    inline SMP::NewDataSet::checkpointRow^  NewDataSet::checkpointDataTable::NewcheckpointRow() {
        return (cli::safe_cast<SMP::NewDataSet::checkpointRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::checkpointDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew SMP::NewDataSet::checkpointRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::checkpointDataTable::GetRowType() {
        return SMP::NewDataSet::checkpointRow::typeid;
    }
    
    inline ::System::Void NewDataSet::checkpointDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->checkpointRowChanged(this, (gcnew SMP::NewDataSet::checkpointRowChangeEvent((cli::safe_cast<SMP::NewDataSet::checkpointRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::checkpointDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->checkpointRowChanging(this, (gcnew SMP::NewDataSet::checkpointRowChangeEvent((cli::safe_cast<SMP::NewDataSet::checkpointRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::checkpointDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->checkpointRowDeleted(this, (gcnew SMP::NewDataSet::checkpointRowChangeEvent((cli::safe_cast<SMP::NewDataSet::checkpointRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::checkpointDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->checkpointRowDeleting(this, (gcnew SMP::NewDataSet::checkpointRowChangeEvent((cli::safe_cast<SMP::NewDataSet::checkpointRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::checkpointDataTable::RemovecheckpointRow(SMP::NewDataSet::checkpointRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::checkpointDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        SMP::NewDataSet^  ds = (gcnew SMP::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"checkpointDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::backgroundsDataTable::backgroundsDataTable() {
        this->TableName = L"backgrounds";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::backgroundsDataTable::backgroundsDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::backgroundsDataTable::backgroundsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::backgroundsDataTable::backgrounds_IdColumn::get() {
        return this->columnbackgrounds_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::backgroundsDataTable::level_IdColumn::get() {
        return this->columnlevel_Id;
    }
    
    inline ::System::Int32 NewDataSet::backgroundsDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline SMP::NewDataSet::backgroundsRow^  NewDataSet::backgroundsDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<SMP::NewDataSet::backgroundsRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::backgroundsDataTable::AddbackgroundsRow(SMP::NewDataSet::backgroundsRow^  row) {
        this->Rows->Add(row);
    }
    
    inline SMP::NewDataSet::backgroundsRow^  NewDataSet::backgroundsDataTable::AddbackgroundsRow(SMP::NewDataSet::levelRow^  parentlevelRowBylevel_backgrounds) {
        SMP::NewDataSet::backgroundsRow^  rowbackgroundsRow = (cli::safe_cast<SMP::NewDataSet::backgroundsRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, nullptr};
        if (parentlevelRowBylevel_backgrounds != nullptr) {
            columnValuesArray[1] = parentlevelRowBylevel_backgrounds[4];
        }
        rowbackgroundsRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowbackgroundsRow);
        return rowbackgroundsRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::backgroundsDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::backgroundsDataTable::Clone() {
        SMP::NewDataSet::backgroundsDataTable^  cln = (cli::safe_cast<SMP::NewDataSet::backgroundsDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::backgroundsDataTable::CreateInstance() {
        return (gcnew SMP::NewDataSet::backgroundsDataTable());
    }
    
    inline ::System::Void NewDataSet::backgroundsDataTable::InitVars() {
        this->columnbackgrounds_Id = __super::Columns[L"backgrounds_Id"];
        this->columnlevel_Id = __super::Columns[L"level_Id"];
    }
    
    inline ::System::Void NewDataSet::backgroundsDataTable::InitClass() {
        this->columnbackgrounds_Id = (gcnew ::System::Data::DataColumn(L"backgrounds_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnbackgrounds_Id);
        this->columnlevel_Id = (gcnew ::System::Data::DataColumn(L"level_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnlevel_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnbackgrounds_Id}, 
                true)));
        this->columnbackgrounds_Id->AutoIncrement = true;
        this->columnbackgrounds_Id->AllowDBNull = false;
        this->columnbackgrounds_Id->Unique = true;
    }
    
    inline SMP::NewDataSet::backgroundsRow^  NewDataSet::backgroundsDataTable::NewbackgroundsRow() {
        return (cli::safe_cast<SMP::NewDataSet::backgroundsRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::backgroundsDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew SMP::NewDataSet::backgroundsRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::backgroundsDataTable::GetRowType() {
        return SMP::NewDataSet::backgroundsRow::typeid;
    }
    
    inline ::System::Void NewDataSet::backgroundsDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->backgroundsRowChanged(this, (gcnew SMP::NewDataSet::backgroundsRowChangeEvent((cli::safe_cast<SMP::NewDataSet::backgroundsRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::backgroundsDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->backgroundsRowChanging(this, (gcnew SMP::NewDataSet::backgroundsRowChangeEvent((cli::safe_cast<SMP::NewDataSet::backgroundsRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::backgroundsDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->backgroundsRowDeleted(this, (gcnew SMP::NewDataSet::backgroundsRowChangeEvent((cli::safe_cast<SMP::NewDataSet::backgroundsRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::backgroundsDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->backgroundsRowDeleting(this, (gcnew SMP::NewDataSet::backgroundsRowChangeEvent((cli::safe_cast<SMP::NewDataSet::backgroundsRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::backgroundsDataTable::RemovebackgroundsRow(SMP::NewDataSet::backgroundsRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::backgroundsDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        SMP::NewDataSet^  ds = (gcnew SMP::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"backgroundsDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::backgroundDataTable::backgroundDataTable() {
        this->TableName = L"background";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::backgroundDataTable::backgroundDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::backgroundDataTable::backgroundDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::backgroundDataTable::imgColumn::get() {
        return this->columnimg;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::backgroundDataTable::positionXColumn::get() {
        return this->columnpositionX;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::backgroundDataTable::positionYColumn::get() {
        return this->columnpositionY;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::backgroundDataTable::backgrounds_IdColumn::get() {
        return this->columnbackgrounds_Id;
    }
    
    inline ::System::Int32 NewDataSet::backgroundDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline SMP::NewDataSet::backgroundRow^  NewDataSet::backgroundDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<SMP::NewDataSet::backgroundRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::backgroundDataTable::AddbackgroundRow(SMP::NewDataSet::backgroundRow^  row) {
        this->Rows->Add(row);
    }
    
    inline SMP::NewDataSet::backgroundRow^  NewDataSet::backgroundDataTable::AddbackgroundRow(System::String^  img, System::Single positionX, 
                System::Single positionY, SMP::NewDataSet::backgroundsRow^  parentbackgroundsRowBybackgrounds_background) {
        SMP::NewDataSet::backgroundRow^  rowbackgroundRow = (cli::safe_cast<SMP::NewDataSet::backgroundRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {img, positionX, positionY, 
            nullptr};
        if (parentbackgroundsRowBybackgrounds_background != nullptr) {
            columnValuesArray[3] = parentbackgroundsRowBybackgrounds_background[0];
        }
        rowbackgroundRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowbackgroundRow);
        return rowbackgroundRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::backgroundDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::backgroundDataTable::Clone() {
        SMP::NewDataSet::backgroundDataTable^  cln = (cli::safe_cast<SMP::NewDataSet::backgroundDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::backgroundDataTable::CreateInstance() {
        return (gcnew SMP::NewDataSet::backgroundDataTable());
    }
    
    inline ::System::Void NewDataSet::backgroundDataTable::InitVars() {
        this->columnimg = __super::Columns[L"img"];
        this->columnpositionX = __super::Columns[L"positionX"];
        this->columnpositionY = __super::Columns[L"positionY"];
        this->columnbackgrounds_Id = __super::Columns[L"backgrounds_Id"];
    }
    
    inline ::System::Void NewDataSet::backgroundDataTable::InitClass() {
        this->columnimg = (gcnew ::System::Data::DataColumn(L"img", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnimg);
        this->columnpositionX = (gcnew ::System::Data::DataColumn(L"positionX", ::System::Single::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnpositionX);
        this->columnpositionY = (gcnew ::System::Data::DataColumn(L"positionY", ::System::Single::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnpositionY);
        this->columnbackgrounds_Id = (gcnew ::System::Data::DataColumn(L"backgrounds_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnbackgrounds_Id);
        this->columnimg->AllowDBNull = false;
        this->columnimg->Namespace = L"";
        this->columnpositionX->AllowDBNull = false;
        this->columnpositionX->Namespace = L"";
        this->columnpositionY->AllowDBNull = false;
        this->columnpositionY->Namespace = L"";
    }
    
    inline SMP::NewDataSet::backgroundRow^  NewDataSet::backgroundDataTable::NewbackgroundRow() {
        return (cli::safe_cast<SMP::NewDataSet::backgroundRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::backgroundDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew SMP::NewDataSet::backgroundRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::backgroundDataTable::GetRowType() {
        return SMP::NewDataSet::backgroundRow::typeid;
    }
    
    inline ::System::Void NewDataSet::backgroundDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->backgroundRowChanged(this, (gcnew SMP::NewDataSet::backgroundRowChangeEvent((cli::safe_cast<SMP::NewDataSet::backgroundRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::backgroundDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->backgroundRowChanging(this, (gcnew SMP::NewDataSet::backgroundRowChangeEvent((cli::safe_cast<SMP::NewDataSet::backgroundRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::backgroundDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->backgroundRowDeleted(this, (gcnew SMP::NewDataSet::backgroundRowChangeEvent((cli::safe_cast<SMP::NewDataSet::backgroundRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::backgroundDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->backgroundRowDeleting(this, (gcnew SMP::NewDataSet::backgroundRowChangeEvent((cli::safe_cast<SMP::NewDataSet::backgroundRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::backgroundDataTable::RemovebackgroundRow(SMP::NewDataSet::backgroundRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::backgroundDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        SMP::NewDataSet^  ds = (gcnew SMP::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"backgroundDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::foregroundsDataTable::foregroundsDataTable() {
        this->TableName = L"foregrounds";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::foregroundsDataTable::foregroundsDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::foregroundsDataTable::foregroundsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::foregroundsDataTable::foregrounds_IdColumn::get() {
        return this->columnforegrounds_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::foregroundsDataTable::level_IdColumn::get() {
        return this->columnlevel_Id;
    }
    
    inline ::System::Int32 NewDataSet::foregroundsDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline SMP::NewDataSet::foregroundsRow^  NewDataSet::foregroundsDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<SMP::NewDataSet::foregroundsRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::foregroundsDataTable::AddforegroundsRow(SMP::NewDataSet::foregroundsRow^  row) {
        this->Rows->Add(row);
    }
    
    inline SMP::NewDataSet::foregroundsRow^  NewDataSet::foregroundsDataTable::AddforegroundsRow(SMP::NewDataSet::levelRow^  parentlevelRowBylevel_foregrounds) {
        SMP::NewDataSet::foregroundsRow^  rowforegroundsRow = (cli::safe_cast<SMP::NewDataSet::foregroundsRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, nullptr};
        if (parentlevelRowBylevel_foregrounds != nullptr) {
            columnValuesArray[1] = parentlevelRowBylevel_foregrounds[4];
        }
        rowforegroundsRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowforegroundsRow);
        return rowforegroundsRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::foregroundsDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::foregroundsDataTable::Clone() {
        SMP::NewDataSet::foregroundsDataTable^  cln = (cli::safe_cast<SMP::NewDataSet::foregroundsDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::foregroundsDataTable::CreateInstance() {
        return (gcnew SMP::NewDataSet::foregroundsDataTable());
    }
    
    inline ::System::Void NewDataSet::foregroundsDataTable::InitVars() {
        this->columnforegrounds_Id = __super::Columns[L"foregrounds_Id"];
        this->columnlevel_Id = __super::Columns[L"level_Id"];
    }
    
    inline ::System::Void NewDataSet::foregroundsDataTable::InitClass() {
        this->columnforegrounds_Id = (gcnew ::System::Data::DataColumn(L"foregrounds_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnforegrounds_Id);
        this->columnlevel_Id = (gcnew ::System::Data::DataColumn(L"level_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnlevel_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnforegrounds_Id}, 
                true)));
        this->columnforegrounds_Id->AutoIncrement = true;
        this->columnforegrounds_Id->AllowDBNull = false;
        this->columnforegrounds_Id->Unique = true;
    }
    
    inline SMP::NewDataSet::foregroundsRow^  NewDataSet::foregroundsDataTable::NewforegroundsRow() {
        return (cli::safe_cast<SMP::NewDataSet::foregroundsRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::foregroundsDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew SMP::NewDataSet::foregroundsRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::foregroundsDataTable::GetRowType() {
        return SMP::NewDataSet::foregroundsRow::typeid;
    }
    
    inline ::System::Void NewDataSet::foregroundsDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->foregroundsRowChanged(this, (gcnew SMP::NewDataSet::foregroundsRowChangeEvent((cli::safe_cast<SMP::NewDataSet::foregroundsRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::foregroundsDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->foregroundsRowChanging(this, (gcnew SMP::NewDataSet::foregroundsRowChangeEvent((cli::safe_cast<SMP::NewDataSet::foregroundsRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::foregroundsDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->foregroundsRowDeleted(this, (gcnew SMP::NewDataSet::foregroundsRowChangeEvent((cli::safe_cast<SMP::NewDataSet::foregroundsRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::foregroundsDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->foregroundsRowDeleting(this, (gcnew SMP::NewDataSet::foregroundsRowChangeEvent((cli::safe_cast<SMP::NewDataSet::foregroundsRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::foregroundsDataTable::RemoveforegroundsRow(SMP::NewDataSet::foregroundsRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::foregroundsDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        SMP::NewDataSet^  ds = (gcnew SMP::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"foregroundsDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::foregroundDataTable::foregroundDataTable() {
        this->TableName = L"foreground";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::foregroundDataTable::foregroundDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::foregroundDataTable::foregroundDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::foregroundDataTable::imgColumn::get() {
        return this->columnimg;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::foregroundDataTable::positionXColumn::get() {
        return this->columnpositionX;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::foregroundDataTable::positionYColumn::get() {
        return this->columnpositionY;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::foregroundDataTable::foregrounds_IdColumn::get() {
        return this->columnforegrounds_Id;
    }
    
    inline ::System::Int32 NewDataSet::foregroundDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline SMP::NewDataSet::foregroundRow^  NewDataSet::foregroundDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<SMP::NewDataSet::foregroundRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::foregroundDataTable::AddforegroundRow(SMP::NewDataSet::foregroundRow^  row) {
        this->Rows->Add(row);
    }
    
    inline SMP::NewDataSet::foregroundRow^  NewDataSet::foregroundDataTable::AddforegroundRow(System::String^  img, System::Single positionX, 
                System::Single positionY, SMP::NewDataSet::foregroundsRow^  parentforegroundsRowByforegrounds_foreground) {
        SMP::NewDataSet::foregroundRow^  rowforegroundRow = (cli::safe_cast<SMP::NewDataSet::foregroundRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {img, positionX, positionY, 
            nullptr};
        if (parentforegroundsRowByforegrounds_foreground != nullptr) {
            columnValuesArray[3] = parentforegroundsRowByforegrounds_foreground[0];
        }
        rowforegroundRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowforegroundRow);
        return rowforegroundRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::foregroundDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::foregroundDataTable::Clone() {
        SMP::NewDataSet::foregroundDataTable^  cln = (cli::safe_cast<SMP::NewDataSet::foregroundDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::foregroundDataTable::CreateInstance() {
        return (gcnew SMP::NewDataSet::foregroundDataTable());
    }
    
    inline ::System::Void NewDataSet::foregroundDataTable::InitVars() {
        this->columnimg = __super::Columns[L"img"];
        this->columnpositionX = __super::Columns[L"positionX"];
        this->columnpositionY = __super::Columns[L"positionY"];
        this->columnforegrounds_Id = __super::Columns[L"foregrounds_Id"];
    }
    
    inline ::System::Void NewDataSet::foregroundDataTable::InitClass() {
        this->columnimg = (gcnew ::System::Data::DataColumn(L"img", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnimg);
        this->columnpositionX = (gcnew ::System::Data::DataColumn(L"positionX", ::System::Single::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnpositionX);
        this->columnpositionY = (gcnew ::System::Data::DataColumn(L"positionY", ::System::Single::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnpositionY);
        this->columnforegrounds_Id = (gcnew ::System::Data::DataColumn(L"foregrounds_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnforegrounds_Id);
        this->columnimg->AllowDBNull = false;
        this->columnimg->Namespace = L"";
        this->columnpositionX->AllowDBNull = false;
        this->columnpositionX->Namespace = L"";
        this->columnpositionY->AllowDBNull = false;
        this->columnpositionY->Namespace = L"";
    }
    
    inline SMP::NewDataSet::foregroundRow^  NewDataSet::foregroundDataTable::NewforegroundRow() {
        return (cli::safe_cast<SMP::NewDataSet::foregroundRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::foregroundDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew SMP::NewDataSet::foregroundRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::foregroundDataTable::GetRowType() {
        return SMP::NewDataSet::foregroundRow::typeid;
    }
    
    inline ::System::Void NewDataSet::foregroundDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->foregroundRowChanged(this, (gcnew SMP::NewDataSet::foregroundRowChangeEvent((cli::safe_cast<SMP::NewDataSet::foregroundRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::foregroundDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->foregroundRowChanging(this, (gcnew SMP::NewDataSet::foregroundRowChangeEvent((cli::safe_cast<SMP::NewDataSet::foregroundRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::foregroundDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->foregroundRowDeleted(this, (gcnew SMP::NewDataSet::foregroundRowChangeEvent((cli::safe_cast<SMP::NewDataSet::foregroundRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::foregroundDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->foregroundRowDeleting(this, (gcnew SMP::NewDataSet::foregroundRowChangeEvent((cli::safe_cast<SMP::NewDataSet::foregroundRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::foregroundDataTable::RemoveforegroundRow(SMP::NewDataSet::foregroundRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::foregroundDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        SMP::NewDataSet^  ds = (gcnew SMP::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"foregroundDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::objectsDataTable::objectsDataTable() {
        this->TableName = L"objects";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::objectsDataTable::objectsDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::objectsDataTable::objectsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::objectsDataTable::objects_IdColumn::get() {
        return this->columnobjects_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::objectsDataTable::level_IdColumn::get() {
        return this->columnlevel_Id;
    }
    
    inline ::System::Int32 NewDataSet::objectsDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline SMP::NewDataSet::objectsRow^  NewDataSet::objectsDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<SMP::NewDataSet::objectsRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::objectsDataTable::AddobjectsRow(SMP::NewDataSet::objectsRow^  row) {
        this->Rows->Add(row);
    }
    
    inline SMP::NewDataSet::objectsRow^  NewDataSet::objectsDataTable::AddobjectsRow(SMP::NewDataSet::levelRow^  parentlevelRowBylevel_objects) {
        SMP::NewDataSet::objectsRow^  rowobjectsRow = (cli::safe_cast<SMP::NewDataSet::objectsRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, nullptr};
        if (parentlevelRowBylevel_objects != nullptr) {
            columnValuesArray[1] = parentlevelRowBylevel_objects[4];
        }
        rowobjectsRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowobjectsRow);
        return rowobjectsRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::objectsDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::objectsDataTable::Clone() {
        SMP::NewDataSet::objectsDataTable^  cln = (cli::safe_cast<SMP::NewDataSet::objectsDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::objectsDataTable::CreateInstance() {
        return (gcnew SMP::NewDataSet::objectsDataTable());
    }
    
    inline ::System::Void NewDataSet::objectsDataTable::InitVars() {
        this->columnobjects_Id = __super::Columns[L"objects_Id"];
        this->columnlevel_Id = __super::Columns[L"level_Id"];
    }
    
    inline ::System::Void NewDataSet::objectsDataTable::InitClass() {
        this->columnobjects_Id = (gcnew ::System::Data::DataColumn(L"objects_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnobjects_Id);
        this->columnlevel_Id = (gcnew ::System::Data::DataColumn(L"level_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnlevel_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnobjects_Id}, 
                true)));
        this->columnobjects_Id->AutoIncrement = true;
        this->columnobjects_Id->AllowDBNull = false;
        this->columnobjects_Id->Unique = true;
    }
    
    inline SMP::NewDataSet::objectsRow^  NewDataSet::objectsDataTable::NewobjectsRow() {
        return (cli::safe_cast<SMP::NewDataSet::objectsRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::objectsDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew SMP::NewDataSet::objectsRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::objectsDataTable::GetRowType() {
        return SMP::NewDataSet::objectsRow::typeid;
    }
    
    inline ::System::Void NewDataSet::objectsDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->objectsRowChanged(this, (gcnew SMP::NewDataSet::objectsRowChangeEvent((cli::safe_cast<SMP::NewDataSet::objectsRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::objectsDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->objectsRowChanging(this, (gcnew SMP::NewDataSet::objectsRowChangeEvent((cli::safe_cast<SMP::NewDataSet::objectsRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::objectsDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->objectsRowDeleted(this, (gcnew SMP::NewDataSet::objectsRowChangeEvent((cli::safe_cast<SMP::NewDataSet::objectsRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::objectsDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->objectsRowDeleting(this, (gcnew SMP::NewDataSet::objectsRowChangeEvent((cli::safe_cast<SMP::NewDataSet::objectsRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::objectsDataTable::RemoveobjectsRow(SMP::NewDataSet::objectsRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::objectsDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        SMP::NewDataSet^  ds = (gcnew SMP::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"objectsDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::objectDataTable::objectDataTable() {
        this->TableName = L"object";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::objectDataTable::objectDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::objectDataTable::objectDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::objectDataTable::imgColumn::get() {
        return this->columnimg;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::objectDataTable::positionXColumn::get() {
        return this->columnpositionX;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::objectDataTable::positionYColumn::get() {
        return this->columnpositionY;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::objectDataTable::objects_IdColumn::get() {
        return this->columnobjects_Id;
    }
    
    inline ::System::Int32 NewDataSet::objectDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline SMP::NewDataSet::objectRow^  NewDataSet::objectDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<SMP::NewDataSet::objectRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::objectDataTable::AddobjectRow(SMP::NewDataSet::objectRow^  row) {
        this->Rows->Add(row);
    }
    
    inline SMP::NewDataSet::objectRow^  NewDataSet::objectDataTable::AddobjectRow(System::String^  img, System::Single positionX, 
                System::Single positionY, SMP::NewDataSet::objectsRow^  parentobjectsRowByobjects_object) {
        SMP::NewDataSet::objectRow^  rowobjectRow = (cli::safe_cast<SMP::NewDataSet::objectRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {img, positionX, positionY, 
            nullptr};
        if (parentobjectsRowByobjects_object != nullptr) {
            columnValuesArray[3] = parentobjectsRowByobjects_object[0];
        }
        rowobjectRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowobjectRow);
        return rowobjectRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::objectDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::objectDataTable::Clone() {
        SMP::NewDataSet::objectDataTable^  cln = (cli::safe_cast<SMP::NewDataSet::objectDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::objectDataTable::CreateInstance() {
        return (gcnew SMP::NewDataSet::objectDataTable());
    }
    
    inline ::System::Void NewDataSet::objectDataTable::InitVars() {
        this->columnimg = __super::Columns[L"img"];
        this->columnpositionX = __super::Columns[L"positionX"];
        this->columnpositionY = __super::Columns[L"positionY"];
        this->columnobjects_Id = __super::Columns[L"objects_Id"];
    }
    
    inline ::System::Void NewDataSet::objectDataTable::InitClass() {
        this->columnimg = (gcnew ::System::Data::DataColumn(L"img", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnimg);
        this->columnpositionX = (gcnew ::System::Data::DataColumn(L"positionX", ::System::Single::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnpositionX);
        this->columnpositionY = (gcnew ::System::Data::DataColumn(L"positionY", ::System::Single::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnpositionY);
        this->columnobjects_Id = (gcnew ::System::Data::DataColumn(L"objects_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnobjects_Id);
        this->columnimg->AllowDBNull = false;
        this->columnimg->Namespace = L"";
        this->columnpositionX->AllowDBNull = false;
        this->columnpositionX->Namespace = L"";
        this->columnpositionY->AllowDBNull = false;
        this->columnpositionY->Namespace = L"";
    }
    
    inline SMP::NewDataSet::objectRow^  NewDataSet::objectDataTable::NewobjectRow() {
        return (cli::safe_cast<SMP::NewDataSet::objectRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::objectDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew SMP::NewDataSet::objectRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::objectDataTable::GetRowType() {
        return SMP::NewDataSet::objectRow::typeid;
    }
    
    inline ::System::Void NewDataSet::objectDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->objectRowChanged(this, (gcnew SMP::NewDataSet::objectRowChangeEvent((cli::safe_cast<SMP::NewDataSet::objectRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::objectDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->objectRowChanging(this, (gcnew SMP::NewDataSet::objectRowChangeEvent((cli::safe_cast<SMP::NewDataSet::objectRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::objectDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->objectRowDeleted(this, (gcnew SMP::NewDataSet::objectRowChangeEvent((cli::safe_cast<SMP::NewDataSet::objectRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::objectDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->objectRowDeleting(this, (gcnew SMP::NewDataSet::objectRowChangeEvent((cli::safe_cast<SMP::NewDataSet::objectRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::objectDataTable::RemoveobjectRow(SMP::NewDataSet::objectRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::objectDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        SMP::NewDataSet^  ds = (gcnew SMP::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"objectDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::finishesDataTable::finishesDataTable() {
        this->TableName = L"finishes";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::finishesDataTable::finishesDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::finishesDataTable::finishesDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::finishesDataTable::finishes_IdColumn::get() {
        return this->columnfinishes_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::finishesDataTable::level_IdColumn::get() {
        return this->columnlevel_Id;
    }
    
    inline ::System::Int32 NewDataSet::finishesDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline SMP::NewDataSet::finishesRow^  NewDataSet::finishesDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<SMP::NewDataSet::finishesRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::finishesDataTable::AddfinishesRow(SMP::NewDataSet::finishesRow^  row) {
        this->Rows->Add(row);
    }
    
    inline SMP::NewDataSet::finishesRow^  NewDataSet::finishesDataTable::AddfinishesRow(SMP::NewDataSet::levelRow^  parentlevelRowBylevel_finishes) {
        SMP::NewDataSet::finishesRow^  rowfinishesRow = (cli::safe_cast<SMP::NewDataSet::finishesRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, nullptr};
        if (parentlevelRowBylevel_finishes != nullptr) {
            columnValuesArray[1] = parentlevelRowBylevel_finishes[4];
        }
        rowfinishesRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowfinishesRow);
        return rowfinishesRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::finishesDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::finishesDataTable::Clone() {
        SMP::NewDataSet::finishesDataTable^  cln = (cli::safe_cast<SMP::NewDataSet::finishesDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::finishesDataTable::CreateInstance() {
        return (gcnew SMP::NewDataSet::finishesDataTable());
    }
    
    inline ::System::Void NewDataSet::finishesDataTable::InitVars() {
        this->columnfinishes_Id = __super::Columns[L"finishes_Id"];
        this->columnlevel_Id = __super::Columns[L"level_Id"];
    }
    
    inline ::System::Void NewDataSet::finishesDataTable::InitClass() {
        this->columnfinishes_Id = (gcnew ::System::Data::DataColumn(L"finishes_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnfinishes_Id);
        this->columnlevel_Id = (gcnew ::System::Data::DataColumn(L"level_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnlevel_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnfinishes_Id}, 
                true)));
        this->columnfinishes_Id->AutoIncrement = true;
        this->columnfinishes_Id->AllowDBNull = false;
        this->columnfinishes_Id->Unique = true;
    }
    
    inline SMP::NewDataSet::finishesRow^  NewDataSet::finishesDataTable::NewfinishesRow() {
        return (cli::safe_cast<SMP::NewDataSet::finishesRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::finishesDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew SMP::NewDataSet::finishesRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::finishesDataTable::GetRowType() {
        return SMP::NewDataSet::finishesRow::typeid;
    }
    
    inline ::System::Void NewDataSet::finishesDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->finishesRowChanged(this, (gcnew SMP::NewDataSet::finishesRowChangeEvent((cli::safe_cast<SMP::NewDataSet::finishesRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::finishesDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->finishesRowChanging(this, (gcnew SMP::NewDataSet::finishesRowChangeEvent((cli::safe_cast<SMP::NewDataSet::finishesRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::finishesDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->finishesRowDeleted(this, (gcnew SMP::NewDataSet::finishesRowChangeEvent((cli::safe_cast<SMP::NewDataSet::finishesRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::finishesDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->finishesRowDeleting(this, (gcnew SMP::NewDataSet::finishesRowChangeEvent((cli::safe_cast<SMP::NewDataSet::finishesRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::finishesDataTable::RemovefinishesRow(SMP::NewDataSet::finishesRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::finishesDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        SMP::NewDataSet^  ds = (gcnew SMP::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"finishesDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::finishDataTable::finishDataTable() {
        this->TableName = L"finish";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::finishDataTable::finishDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::finishDataTable::finishDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::finishDataTable::imgColumn::get() {
        return this->columnimg;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::finishDataTable::positionXColumn::get() {
        return this->columnpositionX;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::finishDataTable::positionYColumn::get() {
        return this->columnpositionY;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::finishDataTable::finishes_IdColumn::get() {
        return this->columnfinishes_Id;
    }
    
    inline ::System::Int32 NewDataSet::finishDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline SMP::NewDataSet::finishRow^  NewDataSet::finishDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<SMP::NewDataSet::finishRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::finishDataTable::AddfinishRow(SMP::NewDataSet::finishRow^  row) {
        this->Rows->Add(row);
    }
    
    inline SMP::NewDataSet::finishRow^  NewDataSet::finishDataTable::AddfinishRow(System::String^  img, System::Single positionX, 
                System::Single positionY, SMP::NewDataSet::finishesRow^  parentfinishesRowByfinishes_finish) {
        SMP::NewDataSet::finishRow^  rowfinishRow = (cli::safe_cast<SMP::NewDataSet::finishRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {img, positionX, positionY, 
            nullptr};
        if (parentfinishesRowByfinishes_finish != nullptr) {
            columnValuesArray[3] = parentfinishesRowByfinishes_finish[0];
        }
        rowfinishRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowfinishRow);
        return rowfinishRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::finishDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::finishDataTable::Clone() {
        SMP::NewDataSet::finishDataTable^  cln = (cli::safe_cast<SMP::NewDataSet::finishDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::finishDataTable::CreateInstance() {
        return (gcnew SMP::NewDataSet::finishDataTable());
    }
    
    inline ::System::Void NewDataSet::finishDataTable::InitVars() {
        this->columnimg = __super::Columns[L"img"];
        this->columnpositionX = __super::Columns[L"positionX"];
        this->columnpositionY = __super::Columns[L"positionY"];
        this->columnfinishes_Id = __super::Columns[L"finishes_Id"];
    }
    
    inline ::System::Void NewDataSet::finishDataTable::InitClass() {
        this->columnimg = (gcnew ::System::Data::DataColumn(L"img", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnimg);
        this->columnpositionX = (gcnew ::System::Data::DataColumn(L"positionX", ::System::Single::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnpositionX);
        this->columnpositionY = (gcnew ::System::Data::DataColumn(L"positionY", ::System::Single::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnpositionY);
        this->columnfinishes_Id = (gcnew ::System::Data::DataColumn(L"finishes_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnfinishes_Id);
        this->columnimg->AllowDBNull = false;
        this->columnimg->Namespace = L"";
        this->columnpositionX->AllowDBNull = false;
        this->columnpositionX->Namespace = L"";
        this->columnpositionY->AllowDBNull = false;
        this->columnpositionY->Namespace = L"";
    }
    
    inline SMP::NewDataSet::finishRow^  NewDataSet::finishDataTable::NewfinishRow() {
        return (cli::safe_cast<SMP::NewDataSet::finishRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::finishDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew SMP::NewDataSet::finishRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::finishDataTable::GetRowType() {
        return SMP::NewDataSet::finishRow::typeid;
    }
    
    inline ::System::Void NewDataSet::finishDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->finishRowChanged(this, (gcnew SMP::NewDataSet::finishRowChangeEvent((cli::safe_cast<SMP::NewDataSet::finishRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::finishDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->finishRowChanging(this, (gcnew SMP::NewDataSet::finishRowChangeEvent((cli::safe_cast<SMP::NewDataSet::finishRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::finishDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->finishRowDeleted(this, (gcnew SMP::NewDataSet::finishRowChangeEvent((cli::safe_cast<SMP::NewDataSet::finishRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::finishDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->finishRowDeleting(this, (gcnew SMP::NewDataSet::finishRowChangeEvent((cli::safe_cast<SMP::NewDataSet::finishRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::finishDataTable::RemovefinishRow(SMP::NewDataSet::finishRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::finishDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        SMP::NewDataSet^  ds = (gcnew SMP::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"finishDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::projectilesDataTable::projectilesDataTable() {
        this->TableName = L"projectiles";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::projectilesDataTable::projectilesDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::projectilesDataTable::projectilesDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::projectilesDataTable::projectiles_IdColumn::get() {
        return this->columnprojectiles_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::projectilesDataTable::level_IdColumn::get() {
        return this->columnlevel_Id;
    }
    
    inline ::System::Int32 NewDataSet::projectilesDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline SMP::NewDataSet::projectilesRow^  NewDataSet::projectilesDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<SMP::NewDataSet::projectilesRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::projectilesDataTable::AddprojectilesRow(SMP::NewDataSet::projectilesRow^  row) {
        this->Rows->Add(row);
    }
    
    inline SMP::NewDataSet::projectilesRow^  NewDataSet::projectilesDataTable::AddprojectilesRow(SMP::NewDataSet::levelRow^  parentlevelRowBylevel_projectiles) {
        SMP::NewDataSet::projectilesRow^  rowprojectilesRow = (cli::safe_cast<SMP::NewDataSet::projectilesRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, nullptr};
        if (parentlevelRowBylevel_projectiles != nullptr) {
            columnValuesArray[1] = parentlevelRowBylevel_projectiles[4];
        }
        rowprojectilesRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowprojectilesRow);
        return rowprojectilesRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::projectilesDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::projectilesDataTable::Clone() {
        SMP::NewDataSet::projectilesDataTable^  cln = (cli::safe_cast<SMP::NewDataSet::projectilesDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::projectilesDataTable::CreateInstance() {
        return (gcnew SMP::NewDataSet::projectilesDataTable());
    }
    
    inline ::System::Void NewDataSet::projectilesDataTable::InitVars() {
        this->columnprojectiles_Id = __super::Columns[L"projectiles_Id"];
        this->columnlevel_Id = __super::Columns[L"level_Id"];
    }
    
    inline ::System::Void NewDataSet::projectilesDataTable::InitClass() {
        this->columnprojectiles_Id = (gcnew ::System::Data::DataColumn(L"projectiles_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnprojectiles_Id);
        this->columnlevel_Id = (gcnew ::System::Data::DataColumn(L"level_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnlevel_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnprojectiles_Id}, 
                true)));
        this->columnprojectiles_Id->AutoIncrement = true;
        this->columnprojectiles_Id->AllowDBNull = false;
        this->columnprojectiles_Id->Unique = true;
    }
    
    inline SMP::NewDataSet::projectilesRow^  NewDataSet::projectilesDataTable::NewprojectilesRow() {
        return (cli::safe_cast<SMP::NewDataSet::projectilesRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::projectilesDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew SMP::NewDataSet::projectilesRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::projectilesDataTable::GetRowType() {
        return SMP::NewDataSet::projectilesRow::typeid;
    }
    
    inline ::System::Void NewDataSet::projectilesDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->projectilesRowChanged(this, (gcnew SMP::NewDataSet::projectilesRowChangeEvent((cli::safe_cast<SMP::NewDataSet::projectilesRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::projectilesDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->projectilesRowChanging(this, (gcnew SMP::NewDataSet::projectilesRowChangeEvent((cli::safe_cast<SMP::NewDataSet::projectilesRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::projectilesDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->projectilesRowDeleted(this, (gcnew SMP::NewDataSet::projectilesRowChangeEvent((cli::safe_cast<SMP::NewDataSet::projectilesRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::projectilesDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->projectilesRowDeleting(this, (gcnew SMP::NewDataSet::projectilesRowChangeEvent((cli::safe_cast<SMP::NewDataSet::projectilesRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::projectilesDataTable::RemoveprojectilesRow(SMP::NewDataSet::projectilesRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::projectilesDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        SMP::NewDataSet^  ds = (gcnew SMP::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"projectilesDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::projectileDataTable::projectileDataTable() {
        this->TableName = L"projectile";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::projectileDataTable::projectileDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::projectileDataTable::projectileDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::projectileDataTable::imgColumn::get() {
        return this->columnimg;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::projectileDataTable::projectiles_IdColumn::get() {
        return this->columnprojectiles_Id;
    }
    
    inline ::System::Int32 NewDataSet::projectileDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline SMP::NewDataSet::projectileRow^  NewDataSet::projectileDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<SMP::NewDataSet::projectileRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::projectileDataTable::AddprojectileRow(SMP::NewDataSet::projectileRow^  row) {
        this->Rows->Add(row);
    }
    
    inline SMP::NewDataSet::projectileRow^  NewDataSet::projectileDataTable::AddprojectileRow(System::String^  img, SMP::NewDataSet::projectilesRow^  parentprojectilesRowByprojectiles_projectile) {
        SMP::NewDataSet::projectileRow^  rowprojectileRow = (cli::safe_cast<SMP::NewDataSet::projectileRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {img, nullptr};
        if (parentprojectilesRowByprojectiles_projectile != nullptr) {
            columnValuesArray[1] = parentprojectilesRowByprojectiles_projectile[0];
        }
        rowprojectileRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowprojectileRow);
        return rowprojectileRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::projectileDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::projectileDataTable::Clone() {
        SMP::NewDataSet::projectileDataTable^  cln = (cli::safe_cast<SMP::NewDataSet::projectileDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::projectileDataTable::CreateInstance() {
        return (gcnew SMP::NewDataSet::projectileDataTable());
    }
    
    inline ::System::Void NewDataSet::projectileDataTable::InitVars() {
        this->columnimg = __super::Columns[L"img"];
        this->columnprojectiles_Id = __super::Columns[L"projectiles_Id"];
    }
    
    inline ::System::Void NewDataSet::projectileDataTable::InitClass() {
        this->columnimg = (gcnew ::System::Data::DataColumn(L"img", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnimg);
        this->columnprojectiles_Id = (gcnew ::System::Data::DataColumn(L"projectiles_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnprojectiles_Id);
        this->columnimg->AllowDBNull = false;
        this->columnimg->Namespace = L"";
    }
    
    inline SMP::NewDataSet::projectileRow^  NewDataSet::projectileDataTable::NewprojectileRow() {
        return (cli::safe_cast<SMP::NewDataSet::projectileRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::projectileDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew SMP::NewDataSet::projectileRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::projectileDataTable::GetRowType() {
        return SMP::NewDataSet::projectileRow::typeid;
    }
    
    inline ::System::Void NewDataSet::projectileDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->projectileRowChanged(this, (gcnew SMP::NewDataSet::projectileRowChangeEvent((cli::safe_cast<SMP::NewDataSet::projectileRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::projectileDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->projectileRowChanging(this, (gcnew SMP::NewDataSet::projectileRowChangeEvent((cli::safe_cast<SMP::NewDataSet::projectileRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::projectileDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->projectileRowDeleted(this, (gcnew SMP::NewDataSet::projectileRowChangeEvent((cli::safe_cast<SMP::NewDataSet::projectileRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::projectileDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->projectileRowDeleting(this, (gcnew SMP::NewDataSet::projectileRowChangeEvent((cli::safe_cast<SMP::NewDataSet::projectileRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::projectileDataTable::RemoveprojectileRow(SMP::NewDataSet::projectileRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::projectileDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        SMP::NewDataSet^  ds = (gcnew SMP::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"projectileDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::itemsDataTable::itemsDataTable() {
        this->TableName = L"items";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::itemsDataTable::itemsDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::itemsDataTable::itemsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::itemsDataTable::items_IdColumn::get() {
        return this->columnitems_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::itemsDataTable::level_IdColumn::get() {
        return this->columnlevel_Id;
    }
    
    inline ::System::Int32 NewDataSet::itemsDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline SMP::NewDataSet::itemsRow^  NewDataSet::itemsDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<SMP::NewDataSet::itemsRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::itemsDataTable::AdditemsRow(SMP::NewDataSet::itemsRow^  row) {
        this->Rows->Add(row);
    }
    
    inline SMP::NewDataSet::itemsRow^  NewDataSet::itemsDataTable::AdditemsRow(SMP::NewDataSet::levelRow^  parentlevelRowBylevel_items) {
        SMP::NewDataSet::itemsRow^  rowitemsRow = (cli::safe_cast<SMP::NewDataSet::itemsRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, nullptr};
        if (parentlevelRowBylevel_items != nullptr) {
            columnValuesArray[1] = parentlevelRowBylevel_items[4];
        }
        rowitemsRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowitemsRow);
        return rowitemsRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::itemsDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::itemsDataTable::Clone() {
        SMP::NewDataSet::itemsDataTable^  cln = (cli::safe_cast<SMP::NewDataSet::itemsDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::itemsDataTable::CreateInstance() {
        return (gcnew SMP::NewDataSet::itemsDataTable());
    }
    
    inline ::System::Void NewDataSet::itemsDataTable::InitVars() {
        this->columnitems_Id = __super::Columns[L"items_Id"];
        this->columnlevel_Id = __super::Columns[L"level_Id"];
    }
    
    inline ::System::Void NewDataSet::itemsDataTable::InitClass() {
        this->columnitems_Id = (gcnew ::System::Data::DataColumn(L"items_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnitems_Id);
        this->columnlevel_Id = (gcnew ::System::Data::DataColumn(L"level_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnlevel_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnitems_Id}, 
                true)));
        this->columnitems_Id->AutoIncrement = true;
        this->columnitems_Id->AllowDBNull = false;
        this->columnitems_Id->Unique = true;
    }
    
    inline SMP::NewDataSet::itemsRow^  NewDataSet::itemsDataTable::NewitemsRow() {
        return (cli::safe_cast<SMP::NewDataSet::itemsRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::itemsDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew SMP::NewDataSet::itemsRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::itemsDataTable::GetRowType() {
        return SMP::NewDataSet::itemsRow::typeid;
    }
    
    inline ::System::Void NewDataSet::itemsDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->itemsRowChanged(this, (gcnew SMP::NewDataSet::itemsRowChangeEvent((cli::safe_cast<SMP::NewDataSet::itemsRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::itemsDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->itemsRowChanging(this, (gcnew SMP::NewDataSet::itemsRowChangeEvent((cli::safe_cast<SMP::NewDataSet::itemsRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::itemsDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->itemsRowDeleted(this, (gcnew SMP::NewDataSet::itemsRowChangeEvent((cli::safe_cast<SMP::NewDataSet::itemsRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::itemsDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->itemsRowDeleting(this, (gcnew SMP::NewDataSet::itemsRowChangeEvent((cli::safe_cast<SMP::NewDataSet::itemsRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::itemsDataTable::RemoveitemsRow(SMP::NewDataSet::itemsRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::itemsDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        SMP::NewDataSet^  ds = (gcnew SMP::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"itemsDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::itemDataTable::itemDataTable() {
        this->TableName = L"item";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::itemDataTable::itemDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::itemDataTable::itemDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::itemDataTable::imgColumn::get() {
        return this->columnimg;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::itemDataTable::typeColumn::get() {
        return this->columntype;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::itemDataTable::items_IdColumn::get() {
        return this->columnitems_Id;
    }
    
    inline ::System::Int32 NewDataSet::itemDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline SMP::NewDataSet::itemRow^  NewDataSet::itemDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<SMP::NewDataSet::itemRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::itemDataTable::AdditemRow(SMP::NewDataSet::itemRow^  row) {
        this->Rows->Add(row);
    }
    
    inline SMP::NewDataSet::itemRow^  NewDataSet::itemDataTable::AdditemRow(System::String^  img, System::Byte type, SMP::NewDataSet::itemsRow^  parentitemsRowByitems_item) {
        SMP::NewDataSet::itemRow^  rowitemRow = (cli::safe_cast<SMP::NewDataSet::itemRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {img, type, nullptr};
        if (parentitemsRowByitems_item != nullptr) {
            columnValuesArray[2] = parentitemsRowByitems_item[0];
        }
        rowitemRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowitemRow);
        return rowitemRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::itemDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::itemDataTable::Clone() {
        SMP::NewDataSet::itemDataTable^  cln = (cli::safe_cast<SMP::NewDataSet::itemDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::itemDataTable::CreateInstance() {
        return (gcnew SMP::NewDataSet::itemDataTable());
    }
    
    inline ::System::Void NewDataSet::itemDataTable::InitVars() {
        this->columnimg = __super::Columns[L"img"];
        this->columntype = __super::Columns[L"type"];
        this->columnitems_Id = __super::Columns[L"items_Id"];
    }
    
    inline ::System::Void NewDataSet::itemDataTable::InitClass() {
        this->columnimg = (gcnew ::System::Data::DataColumn(L"img", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnimg);
        this->columntype = (gcnew ::System::Data::DataColumn(L"type", ::System::Byte::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columntype);
        this->columnitems_Id = (gcnew ::System::Data::DataColumn(L"items_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnitems_Id);
        this->columnimg->AllowDBNull = false;
        this->columnimg->Namespace = L"";
        this->columntype->AllowDBNull = false;
        this->columntype->Namespace = L"";
    }
    
    inline SMP::NewDataSet::itemRow^  NewDataSet::itemDataTable::NewitemRow() {
        return (cli::safe_cast<SMP::NewDataSet::itemRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::itemDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew SMP::NewDataSet::itemRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::itemDataTable::GetRowType() {
        return SMP::NewDataSet::itemRow::typeid;
    }
    
    inline ::System::Void NewDataSet::itemDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->itemRowChanged(this, (gcnew SMP::NewDataSet::itemRowChangeEvent((cli::safe_cast<SMP::NewDataSet::itemRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::itemDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->itemRowChanging(this, (gcnew SMP::NewDataSet::itemRowChangeEvent((cli::safe_cast<SMP::NewDataSet::itemRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::itemDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->itemRowDeleted(this, (gcnew SMP::NewDataSet::itemRowChangeEvent((cli::safe_cast<SMP::NewDataSet::itemRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::itemDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->itemRowDeleting(this, (gcnew SMP::NewDataSet::itemRowChangeEvent((cli::safe_cast<SMP::NewDataSet::itemRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::itemDataTable::RemoveitemRow(SMP::NewDataSet::itemRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::itemDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        SMP::NewDataSet^  ds = (gcnew SMP::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"itemDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::monstersDataTable::monstersDataTable() {
        this->TableName = L"monsters";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::monstersDataTable::monstersDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::monstersDataTable::monstersDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::monstersDataTable::monsters_IdColumn::get() {
        return this->columnmonsters_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::monstersDataTable::level_IdColumn::get() {
        return this->columnlevel_Id;
    }
    
    inline ::System::Int32 NewDataSet::monstersDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline SMP::NewDataSet::monstersRow^  NewDataSet::monstersDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<SMP::NewDataSet::monstersRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::monstersDataTable::AddmonstersRow(SMP::NewDataSet::monstersRow^  row) {
        this->Rows->Add(row);
    }
    
    inline SMP::NewDataSet::monstersRow^  NewDataSet::monstersDataTable::AddmonstersRow(SMP::NewDataSet::levelRow^  parentlevelRowBylevel_monsters) {
        SMP::NewDataSet::monstersRow^  rowmonstersRow = (cli::safe_cast<SMP::NewDataSet::monstersRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, nullptr};
        if (parentlevelRowBylevel_monsters != nullptr) {
            columnValuesArray[1] = parentlevelRowBylevel_monsters[4];
        }
        rowmonstersRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowmonstersRow);
        return rowmonstersRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::monstersDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::monstersDataTable::Clone() {
        SMP::NewDataSet::monstersDataTable^  cln = (cli::safe_cast<SMP::NewDataSet::monstersDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::monstersDataTable::CreateInstance() {
        return (gcnew SMP::NewDataSet::monstersDataTable());
    }
    
    inline ::System::Void NewDataSet::monstersDataTable::InitVars() {
        this->columnmonsters_Id = __super::Columns[L"monsters_Id"];
        this->columnlevel_Id = __super::Columns[L"level_Id"];
    }
    
    inline ::System::Void NewDataSet::monstersDataTable::InitClass() {
        this->columnmonsters_Id = (gcnew ::System::Data::DataColumn(L"monsters_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnmonsters_Id);
        this->columnlevel_Id = (gcnew ::System::Data::DataColumn(L"level_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnlevel_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnmonsters_Id}, 
                true)));
        this->columnmonsters_Id->AutoIncrement = true;
        this->columnmonsters_Id->AllowDBNull = false;
        this->columnmonsters_Id->Unique = true;
    }
    
    inline SMP::NewDataSet::monstersRow^  NewDataSet::monstersDataTable::NewmonstersRow() {
        return (cli::safe_cast<SMP::NewDataSet::monstersRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::monstersDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew SMP::NewDataSet::monstersRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::monstersDataTable::GetRowType() {
        return SMP::NewDataSet::monstersRow::typeid;
    }
    
    inline ::System::Void NewDataSet::monstersDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->monstersRowChanged(this, (gcnew SMP::NewDataSet::monstersRowChangeEvent((cli::safe_cast<SMP::NewDataSet::monstersRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::monstersDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->monstersRowChanging(this, (gcnew SMP::NewDataSet::monstersRowChangeEvent((cli::safe_cast<SMP::NewDataSet::monstersRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::monstersDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->monstersRowDeleted(this, (gcnew SMP::NewDataSet::monstersRowChangeEvent((cli::safe_cast<SMP::NewDataSet::monstersRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::monstersDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->monstersRowDeleting(this, (gcnew SMP::NewDataSet::monstersRowChangeEvent((cli::safe_cast<SMP::NewDataSet::monstersRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::monstersDataTable::RemovemonstersRow(SMP::NewDataSet::monstersRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::monstersDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        SMP::NewDataSet^  ds = (gcnew SMP::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"monstersDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::walking_monsterDataTable::walking_monsterDataTable() {
        this->TableName = L"walking_monster";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::walking_monsterDataTable::walking_monsterDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::walking_monsterDataTable::walking_monsterDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::walking_monsterDataTable::nameColumn::get() {
        return this->columnname;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::walking_monsterDataTable::walking_monster_IdColumn::get() {
        return this->columnwalking_monster_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::walking_monsterDataTable::monsters_IdColumn::get() {
        return this->columnmonsters_Id;
    }
    
    inline ::System::Int32 NewDataSet::walking_monsterDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline SMP::NewDataSet::walking_monsterRow^  NewDataSet::walking_monsterDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<SMP::NewDataSet::walking_monsterRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::walking_monsterDataTable::Addwalking_monsterRow(SMP::NewDataSet::walking_monsterRow^  row) {
        this->Rows->Add(row);
    }
    
    inline SMP::NewDataSet::walking_monsterRow^  NewDataSet::walking_monsterDataTable::Addwalking_monsterRow(System::String^  name, 
                SMP::NewDataSet::monstersRow^  parentmonstersRowBymonsters_walking_monster) {
        SMP::NewDataSet::walking_monsterRow^  rowwalking_monsterRow = (cli::safe_cast<SMP::NewDataSet::walking_monsterRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {name, nullptr, nullptr};
        if (parentmonstersRowBymonsters_walking_monster != nullptr) {
            columnValuesArray[2] = parentmonstersRowBymonsters_walking_monster[0];
        }
        rowwalking_monsterRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowwalking_monsterRow);
        return rowwalking_monsterRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::walking_monsterDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::walking_monsterDataTable::Clone() {
        SMP::NewDataSet::walking_monsterDataTable^  cln = (cli::safe_cast<SMP::NewDataSet::walking_monsterDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::walking_monsterDataTable::CreateInstance() {
        return (gcnew SMP::NewDataSet::walking_monsterDataTable());
    }
    
    inline ::System::Void NewDataSet::walking_monsterDataTable::InitVars() {
        this->columnname = __super::Columns[L"name"];
        this->columnwalking_monster_Id = __super::Columns[L"walking_monster_Id"];
        this->columnmonsters_Id = __super::Columns[L"monsters_Id"];
    }
    
    inline ::System::Void NewDataSet::walking_monsterDataTable::InitClass() {
        this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnname);
        this->columnwalking_monster_Id = (gcnew ::System::Data::DataColumn(L"walking_monster_Id", ::System::Int32::typeid, nullptr, 
            ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnwalking_monster_Id);
        this->columnmonsters_Id = (gcnew ::System::Data::DataColumn(L"monsters_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnmonsters_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnwalking_monster_Id}, 
                true)));
        this->columnname->AllowDBNull = false;
        this->columnname->Namespace = L"";
        this->columnwalking_monster_Id->AutoIncrement = true;
        this->columnwalking_monster_Id->AllowDBNull = false;
        this->columnwalking_monster_Id->Unique = true;
    }
    
    inline SMP::NewDataSet::walking_monsterRow^  NewDataSet::walking_monsterDataTable::Newwalking_monsterRow() {
        return (cli::safe_cast<SMP::NewDataSet::walking_monsterRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::walking_monsterDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew SMP::NewDataSet::walking_monsterRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::walking_monsterDataTable::GetRowType() {
        return SMP::NewDataSet::walking_monsterRow::typeid;
    }
    
    inline ::System::Void NewDataSet::walking_monsterDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->walking_monsterRowChanged(this, (gcnew SMP::NewDataSet::walking_monsterRowChangeEvent((cli::safe_cast<SMP::NewDataSet::walking_monsterRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::walking_monsterDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->walking_monsterRowChanging(this, (gcnew SMP::NewDataSet::walking_monsterRowChangeEvent((cli::safe_cast<SMP::NewDataSet::walking_monsterRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::walking_monsterDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->walking_monsterRowDeleted(this, (gcnew SMP::NewDataSet::walking_monsterRowChangeEvent((cli::safe_cast<SMP::NewDataSet::walking_monsterRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::walking_monsterDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->walking_monsterRowDeleting(this, (gcnew SMP::NewDataSet::walking_monsterRowChangeEvent((cli::safe_cast<SMP::NewDataSet::walking_monsterRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::walking_monsterDataTable::Removewalking_monsterRow(SMP::NewDataSet::walking_monsterRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::walking_monsterDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        SMP::NewDataSet^  ds = (gcnew SMP::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"walking_monsterDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::occ_monsterDataTable::occ_monsterDataTable() {
        this->TableName = L"occ_monster";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::occ_monsterDataTable::occ_monsterDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::occ_monsterDataTable::occ_monsterDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::occ_monsterDataTable::positionXColumn::get() {
        return this->columnpositionX;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::occ_monsterDataTable::positionYColumn::get() {
        return this->columnpositionY;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::occ_monsterDataTable::walking_monster_IdColumn::get() {
        return this->columnwalking_monster_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::occ_monsterDataTable::flying_monster_IdColumn::get() {
        return this->columnflying_monster_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::occ_monsterDataTable::shell_monster_IdColumn::get() {
        return this->columnshell_monster_Id;
    }
    
    inline ::System::Int32 NewDataSet::occ_monsterDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline SMP::NewDataSet::occ_monsterRow^  NewDataSet::occ_monsterDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<SMP::NewDataSet::occ_monsterRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::occ_monsterDataTable::Addocc_monsterRow(SMP::NewDataSet::occ_monsterRow^  row) {
        this->Rows->Add(row);
    }
    
    inline SMP::NewDataSet::occ_monsterRow^  NewDataSet::occ_monsterDataTable::Addocc_monsterRow(System::Single positionX, 
                System::Single positionY, SMP::NewDataSet::walking_monsterRow^  parentwalking_monsterRowBywalking_monster_occ_monster, 
                SMP::NewDataSet::flying_monsterRow^  parentflying_monsterRowByflying_monster_occ_monster, SMP::NewDataSet::shell_monsterRow^  parentshell_monsterRowByshell_monster_occ_monster) {
        SMP::NewDataSet::occ_monsterRow^  rowocc_monsterRow = (cli::safe_cast<SMP::NewDataSet::occ_monsterRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(5) {positionX, positionY, 
            nullptr, nullptr, nullptr};
        if (parentwalking_monsterRowBywalking_monster_occ_monster != nullptr) {
            columnValuesArray[2] = parentwalking_monsterRowBywalking_monster_occ_monster[1];
        }
        if (parentflying_monsterRowByflying_monster_occ_monster != nullptr) {
            columnValuesArray[3] = parentflying_monsterRowByflying_monster_occ_monster[1];
        }
        if (parentshell_monsterRowByshell_monster_occ_monster != nullptr) {
            columnValuesArray[4] = parentshell_monsterRowByshell_monster_occ_monster[1];
        }
        rowocc_monsterRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowocc_monsterRow);
        return rowocc_monsterRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::occ_monsterDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::occ_monsterDataTable::Clone() {
        SMP::NewDataSet::occ_monsterDataTable^  cln = (cli::safe_cast<SMP::NewDataSet::occ_monsterDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::occ_monsterDataTable::CreateInstance() {
        return (gcnew SMP::NewDataSet::occ_monsterDataTable());
    }
    
    inline ::System::Void NewDataSet::occ_monsterDataTable::InitVars() {
        this->columnpositionX = __super::Columns[L"positionX"];
        this->columnpositionY = __super::Columns[L"positionY"];
        this->columnwalking_monster_Id = __super::Columns[L"walking_monster_Id"];
        this->columnflying_monster_Id = __super::Columns[L"flying_monster_Id"];
        this->columnshell_monster_Id = __super::Columns[L"shell_monster_Id"];
    }
    
    inline ::System::Void NewDataSet::occ_monsterDataTable::InitClass() {
        this->columnpositionX = (gcnew ::System::Data::DataColumn(L"positionX", ::System::Single::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnpositionX);
        this->columnpositionY = (gcnew ::System::Data::DataColumn(L"positionY", ::System::Single::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnpositionY);
        this->columnwalking_monster_Id = (gcnew ::System::Data::DataColumn(L"walking_monster_Id", ::System::Int32::typeid, nullptr, 
            ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnwalking_monster_Id);
        this->columnflying_monster_Id = (gcnew ::System::Data::DataColumn(L"flying_monster_Id", ::System::Int32::typeid, nullptr, 
            ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnflying_monster_Id);
        this->columnshell_monster_Id = (gcnew ::System::Data::DataColumn(L"shell_monster_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnshell_monster_Id);
        this->columnpositionX->AllowDBNull = false;
        this->columnpositionX->Namespace = L"";
        this->columnpositionY->AllowDBNull = false;
        this->columnpositionY->Namespace = L"";
    }
    
    inline SMP::NewDataSet::occ_monsterRow^  NewDataSet::occ_monsterDataTable::Newocc_monsterRow() {
        return (cli::safe_cast<SMP::NewDataSet::occ_monsterRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::occ_monsterDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew SMP::NewDataSet::occ_monsterRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::occ_monsterDataTable::GetRowType() {
        return SMP::NewDataSet::occ_monsterRow::typeid;
    }
    
    inline ::System::Void NewDataSet::occ_monsterDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->occ_monsterRowChanged(this, (gcnew SMP::NewDataSet::occ_monsterRowChangeEvent((cli::safe_cast<SMP::NewDataSet::occ_monsterRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::occ_monsterDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->occ_monsterRowChanging(this, (gcnew SMP::NewDataSet::occ_monsterRowChangeEvent((cli::safe_cast<SMP::NewDataSet::occ_monsterRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::occ_monsterDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->occ_monsterRowDeleted(this, (gcnew SMP::NewDataSet::occ_monsterRowChangeEvent((cli::safe_cast<SMP::NewDataSet::occ_monsterRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::occ_monsterDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->occ_monsterRowDeleting(this, (gcnew SMP::NewDataSet::occ_monsterRowChangeEvent((cli::safe_cast<SMP::NewDataSet::occ_monsterRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::occ_monsterDataTable::Removeocc_monsterRow(SMP::NewDataSet::occ_monsterRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::occ_monsterDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        SMP::NewDataSet^  ds = (gcnew SMP::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"occ_monsterDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::flying_monsterDataTable::flying_monsterDataTable() {
        this->TableName = L"flying_monster";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::flying_monsterDataTable::flying_monsterDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::flying_monsterDataTable::flying_monsterDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::flying_monsterDataTable::nameColumn::get() {
        return this->columnname;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::flying_monsterDataTable::flying_monster_IdColumn::get() {
        return this->columnflying_monster_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::flying_monsterDataTable::monsters_IdColumn::get() {
        return this->columnmonsters_Id;
    }
    
    inline ::System::Int32 NewDataSet::flying_monsterDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline SMP::NewDataSet::flying_monsterRow^  NewDataSet::flying_monsterDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<SMP::NewDataSet::flying_monsterRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::flying_monsterDataTable::Addflying_monsterRow(SMP::NewDataSet::flying_monsterRow^  row) {
        this->Rows->Add(row);
    }
    
    inline SMP::NewDataSet::flying_monsterRow^  NewDataSet::flying_monsterDataTable::Addflying_monsterRow(System::String^  name, 
                SMP::NewDataSet::monstersRow^  parentmonstersRowBymonsters_flying_monster) {
        SMP::NewDataSet::flying_monsterRow^  rowflying_monsterRow = (cli::safe_cast<SMP::NewDataSet::flying_monsterRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {name, nullptr, nullptr};
        if (parentmonstersRowBymonsters_flying_monster != nullptr) {
            columnValuesArray[2] = parentmonstersRowBymonsters_flying_monster[0];
        }
        rowflying_monsterRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowflying_monsterRow);
        return rowflying_monsterRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::flying_monsterDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::flying_monsterDataTable::Clone() {
        SMP::NewDataSet::flying_monsterDataTable^  cln = (cli::safe_cast<SMP::NewDataSet::flying_monsterDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::flying_monsterDataTable::CreateInstance() {
        return (gcnew SMP::NewDataSet::flying_monsterDataTable());
    }
    
    inline ::System::Void NewDataSet::flying_monsterDataTable::InitVars() {
        this->columnname = __super::Columns[L"name"];
        this->columnflying_monster_Id = __super::Columns[L"flying_monster_Id"];
        this->columnmonsters_Id = __super::Columns[L"monsters_Id"];
    }
    
    inline ::System::Void NewDataSet::flying_monsterDataTable::InitClass() {
        this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnname);
        this->columnflying_monster_Id = (gcnew ::System::Data::DataColumn(L"flying_monster_Id", ::System::Int32::typeid, nullptr, 
            ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnflying_monster_Id);
        this->columnmonsters_Id = (gcnew ::System::Data::DataColumn(L"monsters_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnmonsters_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnflying_monster_Id}, 
                true)));
        this->columnname->AllowDBNull = false;
        this->columnname->Namespace = L"";
        this->columnflying_monster_Id->AutoIncrement = true;
        this->columnflying_monster_Id->AllowDBNull = false;
        this->columnflying_monster_Id->Unique = true;
    }
    
    inline SMP::NewDataSet::flying_monsterRow^  NewDataSet::flying_monsterDataTable::Newflying_monsterRow() {
        return (cli::safe_cast<SMP::NewDataSet::flying_monsterRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::flying_monsterDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew SMP::NewDataSet::flying_monsterRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::flying_monsterDataTable::GetRowType() {
        return SMP::NewDataSet::flying_monsterRow::typeid;
    }
    
    inline ::System::Void NewDataSet::flying_monsterDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->flying_monsterRowChanged(this, (gcnew SMP::NewDataSet::flying_monsterRowChangeEvent((cli::safe_cast<SMP::NewDataSet::flying_monsterRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::flying_monsterDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->flying_monsterRowChanging(this, (gcnew SMP::NewDataSet::flying_monsterRowChangeEvent((cli::safe_cast<SMP::NewDataSet::flying_monsterRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::flying_monsterDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->flying_monsterRowDeleted(this, (gcnew SMP::NewDataSet::flying_monsterRowChangeEvent((cli::safe_cast<SMP::NewDataSet::flying_monsterRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::flying_monsterDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->flying_monsterRowDeleting(this, (gcnew SMP::NewDataSet::flying_monsterRowChangeEvent((cli::safe_cast<SMP::NewDataSet::flying_monsterRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::flying_monsterDataTable::Removeflying_monsterRow(SMP::NewDataSet::flying_monsterRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::flying_monsterDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        SMP::NewDataSet^  ds = (gcnew SMP::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"flying_monsterDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::shell_monsterDataTable::shell_monsterDataTable() {
        this->TableName = L"shell_monster";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::shell_monsterDataTable::shell_monsterDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::shell_monsterDataTable::shell_monsterDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::shell_monsterDataTable::nameColumn::get() {
        return this->columnname;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::shell_monsterDataTable::shell_monster_IdColumn::get() {
        return this->columnshell_monster_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::shell_monsterDataTable::monsters_IdColumn::get() {
        return this->columnmonsters_Id;
    }
    
    inline ::System::Int32 NewDataSet::shell_monsterDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline SMP::NewDataSet::shell_monsterRow^  NewDataSet::shell_monsterDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<SMP::NewDataSet::shell_monsterRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::shell_monsterDataTable::Addshell_monsterRow(SMP::NewDataSet::shell_monsterRow^  row) {
        this->Rows->Add(row);
    }
    
    inline SMP::NewDataSet::shell_monsterRow^  NewDataSet::shell_monsterDataTable::Addshell_monsterRow(System::String^  name, 
                SMP::NewDataSet::monstersRow^  parentmonstersRowBymonsters_shell_monster) {
        SMP::NewDataSet::shell_monsterRow^  rowshell_monsterRow = (cli::safe_cast<SMP::NewDataSet::shell_monsterRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {name, nullptr, nullptr};
        if (parentmonstersRowBymonsters_shell_monster != nullptr) {
            columnValuesArray[2] = parentmonstersRowBymonsters_shell_monster[0];
        }
        rowshell_monsterRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowshell_monsterRow);
        return rowshell_monsterRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::shell_monsterDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::shell_monsterDataTable::Clone() {
        SMP::NewDataSet::shell_monsterDataTable^  cln = (cli::safe_cast<SMP::NewDataSet::shell_monsterDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::shell_monsterDataTable::CreateInstance() {
        return (gcnew SMP::NewDataSet::shell_monsterDataTable());
    }
    
    inline ::System::Void NewDataSet::shell_monsterDataTable::InitVars() {
        this->columnname = __super::Columns[L"name"];
        this->columnshell_monster_Id = __super::Columns[L"shell_monster_Id"];
        this->columnmonsters_Id = __super::Columns[L"monsters_Id"];
    }
    
    inline ::System::Void NewDataSet::shell_monsterDataTable::InitClass() {
        this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnname);
        this->columnshell_monster_Id = (gcnew ::System::Data::DataColumn(L"shell_monster_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnshell_monster_Id);
        this->columnmonsters_Id = (gcnew ::System::Data::DataColumn(L"monsters_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnmonsters_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnshell_monster_Id}, 
                true)));
        this->columnname->AllowDBNull = false;
        this->columnname->Namespace = L"";
        this->columnshell_monster_Id->AutoIncrement = true;
        this->columnshell_monster_Id->AllowDBNull = false;
        this->columnshell_monster_Id->Unique = true;
    }
    
    inline SMP::NewDataSet::shell_monsterRow^  NewDataSet::shell_monsterDataTable::Newshell_monsterRow() {
        return (cli::safe_cast<SMP::NewDataSet::shell_monsterRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::shell_monsterDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew SMP::NewDataSet::shell_monsterRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::shell_monsterDataTable::GetRowType() {
        return SMP::NewDataSet::shell_monsterRow::typeid;
    }
    
    inline ::System::Void NewDataSet::shell_monsterDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->shell_monsterRowChanged(this, (gcnew SMP::NewDataSet::shell_monsterRowChangeEvent((cli::safe_cast<SMP::NewDataSet::shell_monsterRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::shell_monsterDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->shell_monsterRowChanging(this, (gcnew SMP::NewDataSet::shell_monsterRowChangeEvent((cli::safe_cast<SMP::NewDataSet::shell_monsterRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::shell_monsterDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->shell_monsterRowDeleted(this, (gcnew SMP::NewDataSet::shell_monsterRowChangeEvent((cli::safe_cast<SMP::NewDataSet::shell_monsterRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::shell_monsterDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->shell_monsterRowDeleting(this, (gcnew SMP::NewDataSet::shell_monsterRowChangeEvent((cli::safe_cast<SMP::NewDataSet::shell_monsterRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::shell_monsterDataTable::Removeshell_monsterRow(SMP::NewDataSet::shell_monsterRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::shell_monsterDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        SMP::NewDataSet^  ds = (gcnew SMP::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"shell_monsterDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::pipesDataTable::pipesDataTable() {
        this->TableName = L"pipes";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::pipesDataTable::pipesDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::pipesDataTable::pipesDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::pipesDataTable::pipes_IdColumn::get() {
        return this->columnpipes_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::pipesDataTable::level_IdColumn::get() {
        return this->columnlevel_Id;
    }
    
    inline ::System::Int32 NewDataSet::pipesDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline SMP::NewDataSet::pipesRow^  NewDataSet::pipesDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<SMP::NewDataSet::pipesRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::pipesDataTable::AddpipesRow(SMP::NewDataSet::pipesRow^  row) {
        this->Rows->Add(row);
    }
    
    inline SMP::NewDataSet::pipesRow^  NewDataSet::pipesDataTable::AddpipesRow(SMP::NewDataSet::levelRow^  parentlevelRowBylevel_pipes) {
        SMP::NewDataSet::pipesRow^  rowpipesRow = (cli::safe_cast<SMP::NewDataSet::pipesRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, nullptr};
        if (parentlevelRowBylevel_pipes != nullptr) {
            columnValuesArray[1] = parentlevelRowBylevel_pipes[4];
        }
        rowpipesRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowpipesRow);
        return rowpipesRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::pipesDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::pipesDataTable::Clone() {
        SMP::NewDataSet::pipesDataTable^  cln = (cli::safe_cast<SMP::NewDataSet::pipesDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::pipesDataTable::CreateInstance() {
        return (gcnew SMP::NewDataSet::pipesDataTable());
    }
    
    inline ::System::Void NewDataSet::pipesDataTable::InitVars() {
        this->columnpipes_Id = __super::Columns[L"pipes_Id"];
        this->columnlevel_Id = __super::Columns[L"level_Id"];
    }
    
    inline ::System::Void NewDataSet::pipesDataTable::InitClass() {
        this->columnpipes_Id = (gcnew ::System::Data::DataColumn(L"pipes_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnpipes_Id);
        this->columnlevel_Id = (gcnew ::System::Data::DataColumn(L"level_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnlevel_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnpipes_Id}, 
                true)));
        this->columnpipes_Id->AutoIncrement = true;
        this->columnpipes_Id->AllowDBNull = false;
        this->columnpipes_Id->Unique = true;
    }
    
    inline SMP::NewDataSet::pipesRow^  NewDataSet::pipesDataTable::NewpipesRow() {
        return (cli::safe_cast<SMP::NewDataSet::pipesRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::pipesDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew SMP::NewDataSet::pipesRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::pipesDataTable::GetRowType() {
        return SMP::NewDataSet::pipesRow::typeid;
    }
    
    inline ::System::Void NewDataSet::pipesDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->pipesRowChanged(this, (gcnew SMP::NewDataSet::pipesRowChangeEvent((cli::safe_cast<SMP::NewDataSet::pipesRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::pipesDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->pipesRowChanging(this, (gcnew SMP::NewDataSet::pipesRowChangeEvent((cli::safe_cast<SMP::NewDataSet::pipesRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::pipesDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->pipesRowDeleted(this, (gcnew SMP::NewDataSet::pipesRowChangeEvent((cli::safe_cast<SMP::NewDataSet::pipesRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::pipesDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->pipesRowDeleting(this, (gcnew SMP::NewDataSet::pipesRowChangeEvent((cli::safe_cast<SMP::NewDataSet::pipesRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::pipesDataTable::RemovepipesRow(SMP::NewDataSet::pipesRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::pipesDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        SMP::NewDataSet^  ds = (gcnew SMP::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"pipesDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::pipeDataTable::pipeDataTable() {
        this->TableName = L"pipe";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::pipeDataTable::pipeDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::pipeDataTable::pipeDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::pipeDataTable::imgColumn::get() {
        return this->columnimg;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::pipeDataTable::positionXColumn::get() {
        return this->columnpositionX;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::pipeDataTable::positionYColumn::get() {
        return this->columnpositionY;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::pipeDataTable::destination_pipeColumn::get() {
        return this->columndestination_pipe;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::pipeDataTable::level_destinationColumn::get() {
        return this->columnlevel_destination;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::pipeDataTable::stateColumn::get() {
        return this->columnstate;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::pipeDataTable::lengthColumn::get() {
        return this->columnlength;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::pipeDataTable::directionColumn::get() {
        return this->columndirection;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::pipeDataTable::monsterColumn::get() {
        return this->columnmonster;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::pipeDataTable::pipes_IdColumn::get() {
        return this->columnpipes_Id;
    }
    
    inline ::System::Int32 NewDataSet::pipeDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline SMP::NewDataSet::pipeRow^  NewDataSet::pipeDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<SMP::NewDataSet::pipeRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::pipeDataTable::AddpipeRow(SMP::NewDataSet::pipeRow^  row) {
        this->Rows->Add(row);
    }
    
    inline SMP::NewDataSet::pipeRow^  NewDataSet::pipeDataTable::AddpipeRow(
                System::String^  img, 
                System::Single positionX, 
                System::Single positionY, 
                System::Byte destination_pipe, 
                System::String^  level_destination, 
                System::Byte state, 
                System::Byte length, 
                System::Byte direction, 
                System::SByte monster, 
                SMP::NewDataSet::pipesRow^  parentpipesRowBypipes_pipe) {
        SMP::NewDataSet::pipeRow^  rowpipeRow = (cli::safe_cast<SMP::NewDataSet::pipeRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(10) {img, positionX, positionY, 
            destination_pipe, level_destination, state, length, direction, monster, nullptr};
        if (parentpipesRowBypipes_pipe != nullptr) {
            columnValuesArray[9] = parentpipesRowBypipes_pipe[0];
        }
        rowpipeRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowpipeRow);
        return rowpipeRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::pipeDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::pipeDataTable::Clone() {
        SMP::NewDataSet::pipeDataTable^  cln = (cli::safe_cast<SMP::NewDataSet::pipeDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::pipeDataTable::CreateInstance() {
        return (gcnew SMP::NewDataSet::pipeDataTable());
    }
    
    inline ::System::Void NewDataSet::pipeDataTable::InitVars() {
        this->columnimg = __super::Columns[L"img"];
        this->columnpositionX = __super::Columns[L"positionX"];
        this->columnpositionY = __super::Columns[L"positionY"];
        this->columndestination_pipe = __super::Columns[L"destination_pipe"];
        this->columnlevel_destination = __super::Columns[L"level_destination"];
        this->columnstate = __super::Columns[L"state"];
        this->columnlength = __super::Columns[L"length"];
        this->columndirection = __super::Columns[L"direction"];
        this->columnmonster = __super::Columns[L"monster"];
        this->columnpipes_Id = __super::Columns[L"pipes_Id"];
    }
    
    inline ::System::Void NewDataSet::pipeDataTable::InitClass() {
        this->columnimg = (gcnew ::System::Data::DataColumn(L"img", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnimg);
        this->columnpositionX = (gcnew ::System::Data::DataColumn(L"positionX", ::System::Single::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnpositionX);
        this->columnpositionY = (gcnew ::System::Data::DataColumn(L"positionY", ::System::Single::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnpositionY);
        this->columndestination_pipe = (gcnew ::System::Data::DataColumn(L"destination_pipe", ::System::Byte::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columndestination_pipe);
        this->columnlevel_destination = (gcnew ::System::Data::DataColumn(L"level_destination", ::System::String::typeid, nullptr, 
            ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnlevel_destination);
        this->columnstate = (gcnew ::System::Data::DataColumn(L"state", ::System::Byte::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnstate);
        this->columnlength = (gcnew ::System::Data::DataColumn(L"length", ::System::Byte::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnlength);
        this->columndirection = (gcnew ::System::Data::DataColumn(L"direction", ::System::Byte::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columndirection);
        this->columnmonster = (gcnew ::System::Data::DataColumn(L"monster", ::System::SByte::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnmonster);
        this->columnpipes_Id = (gcnew ::System::Data::DataColumn(L"pipes_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnpipes_Id);
        this->columnimg->AllowDBNull = false;
        this->columnimg->Namespace = L"";
        this->columnpositionX->AllowDBNull = false;
        this->columnpositionX->Namespace = L"";
        this->columnpositionY->AllowDBNull = false;
        this->columnpositionY->Namespace = L"";
        this->columndestination_pipe->AllowDBNull = false;
        this->columndestination_pipe->Namespace = L"";
        this->columnlevel_destination->AllowDBNull = false;
        this->columnlevel_destination->Namespace = L"";
        this->columnstate->AllowDBNull = false;
        this->columnstate->Namespace = L"";
        this->columnlength->AllowDBNull = false;
        this->columnlength->Namespace = L"";
        this->columndirection->AllowDBNull = false;
        this->columndirection->Namespace = L"";
        this->columnmonster->AllowDBNull = false;
        this->columnmonster->Namespace = L"";
    }
    
    inline SMP::NewDataSet::pipeRow^  NewDataSet::pipeDataTable::NewpipeRow() {
        return (cli::safe_cast<SMP::NewDataSet::pipeRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::pipeDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew SMP::NewDataSet::pipeRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::pipeDataTable::GetRowType() {
        return SMP::NewDataSet::pipeRow::typeid;
    }
    
    inline ::System::Void NewDataSet::pipeDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->pipeRowChanged(this, (gcnew SMP::NewDataSet::pipeRowChangeEvent((cli::safe_cast<SMP::NewDataSet::pipeRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::pipeDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->pipeRowChanging(this, (gcnew SMP::NewDataSet::pipeRowChangeEvent((cli::safe_cast<SMP::NewDataSet::pipeRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::pipeDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->pipeRowDeleted(this, (gcnew SMP::NewDataSet::pipeRowChangeEvent((cli::safe_cast<SMP::NewDataSet::pipeRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::pipeDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->pipeRowDeleting(this, (gcnew SMP::NewDataSet::pipeRowChangeEvent((cli::safe_cast<SMP::NewDataSet::pipeRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::pipeDataTable::RemovepipeRow(SMP::NewDataSet::pipeRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::pipeDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        SMP::NewDataSet^  ds = (gcnew SMP::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"pipeDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::blocksDataTable::blocksDataTable() {
        this->TableName = L"blocks";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::blocksDataTable::blocksDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::blocksDataTable::blocksDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::blocksDataTable::blocks_IdColumn::get() {
        return this->columnblocks_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::blocksDataTable::level_IdColumn::get() {
        return this->columnlevel_Id;
    }
    
    inline ::System::Int32 NewDataSet::blocksDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline SMP::NewDataSet::blocksRow^  NewDataSet::blocksDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<SMP::NewDataSet::blocksRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::blocksDataTable::AddblocksRow(SMP::NewDataSet::blocksRow^  row) {
        this->Rows->Add(row);
    }
    
    inline SMP::NewDataSet::blocksRow^  NewDataSet::blocksDataTable::AddblocksRow(SMP::NewDataSet::levelRow^  parentlevelRowBylevel_blocks) {
        SMP::NewDataSet::blocksRow^  rowblocksRow = (cli::safe_cast<SMP::NewDataSet::blocksRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, nullptr};
        if (parentlevelRowBylevel_blocks != nullptr) {
            columnValuesArray[1] = parentlevelRowBylevel_blocks[4];
        }
        rowblocksRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowblocksRow);
        return rowblocksRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::blocksDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::blocksDataTable::Clone() {
        SMP::NewDataSet::blocksDataTable^  cln = (cli::safe_cast<SMP::NewDataSet::blocksDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::blocksDataTable::CreateInstance() {
        return (gcnew SMP::NewDataSet::blocksDataTable());
    }
    
    inline ::System::Void NewDataSet::blocksDataTable::InitVars() {
        this->columnblocks_Id = __super::Columns[L"blocks_Id"];
        this->columnlevel_Id = __super::Columns[L"level_Id"];
    }
    
    inline ::System::Void NewDataSet::blocksDataTable::InitClass() {
        this->columnblocks_Id = (gcnew ::System::Data::DataColumn(L"blocks_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnblocks_Id);
        this->columnlevel_Id = (gcnew ::System::Data::DataColumn(L"level_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnlevel_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnblocks_Id}, 
                true)));
        this->columnblocks_Id->AutoIncrement = true;
        this->columnblocks_Id->AllowDBNull = false;
        this->columnblocks_Id->Unique = true;
    }
    
    inline SMP::NewDataSet::blocksRow^  NewDataSet::blocksDataTable::NewblocksRow() {
        return (cli::safe_cast<SMP::NewDataSet::blocksRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::blocksDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew SMP::NewDataSet::blocksRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::blocksDataTable::GetRowType() {
        return SMP::NewDataSet::blocksRow::typeid;
    }
    
    inline ::System::Void NewDataSet::blocksDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->blocksRowChanged(this, (gcnew SMP::NewDataSet::blocksRowChangeEvent((cli::safe_cast<SMP::NewDataSet::blocksRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::blocksDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->blocksRowChanging(this, (gcnew SMP::NewDataSet::blocksRowChangeEvent((cli::safe_cast<SMP::NewDataSet::blocksRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::blocksDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->blocksRowDeleted(this, (gcnew SMP::NewDataSet::blocksRowChangeEvent((cli::safe_cast<SMP::NewDataSet::blocksRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::blocksDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->blocksRowDeleting(this, (gcnew SMP::NewDataSet::blocksRowChangeEvent((cli::safe_cast<SMP::NewDataSet::blocksRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::blocksDataTable::RemoveblocksRow(SMP::NewDataSet::blocksRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::blocksDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        SMP::NewDataSet^  ds = (gcnew SMP::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"blocksDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::tilesetDataTable::tilesetDataTable() {
        this->TableName = L"tileset";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::tilesetDataTable::tilesetDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::tilesetDataTable::tilesetDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::tilesetDataTable::imgColumn::get() {
        return this->columnimg;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::tilesetDataTable::blocSizeXColumn::get() {
        return this->columnblocSizeX;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::tilesetDataTable::blocSizeYColumn::get() {
        return this->columnblocSizeY;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::tilesetDataTable::tileset_IdColumn::get() {
        return this->columntileset_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::tilesetDataTable::blocks_IdColumn::get() {
        return this->columnblocks_Id;
    }
    
    inline ::System::Int32 NewDataSet::tilesetDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline SMP::NewDataSet::tilesetRow^  NewDataSet::tilesetDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<SMP::NewDataSet::tilesetRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::tilesetDataTable::AddtilesetRow(SMP::NewDataSet::tilesetRow^  row) {
        this->Rows->Add(row);
    }
    
    inline SMP::NewDataSet::tilesetRow^  NewDataSet::tilesetDataTable::AddtilesetRow(System::String^  img, System::Single blocSizeX, 
                System::Single blocSizeY, SMP::NewDataSet::blocksRow^  parentblocksRowByblocks_tileset) {
        SMP::NewDataSet::tilesetRow^  rowtilesetRow = (cli::safe_cast<SMP::NewDataSet::tilesetRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(5) {img, blocSizeX, blocSizeY, 
            nullptr, nullptr};
        if (parentblocksRowByblocks_tileset != nullptr) {
            columnValuesArray[4] = parentblocksRowByblocks_tileset[0];
        }
        rowtilesetRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowtilesetRow);
        return rowtilesetRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::tilesetDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::tilesetDataTable::Clone() {
        SMP::NewDataSet::tilesetDataTable^  cln = (cli::safe_cast<SMP::NewDataSet::tilesetDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::tilesetDataTable::CreateInstance() {
        return (gcnew SMP::NewDataSet::tilesetDataTable());
    }
    
    inline ::System::Void NewDataSet::tilesetDataTable::InitVars() {
        this->columnimg = __super::Columns[L"img"];
        this->columnblocSizeX = __super::Columns[L"blocSizeX"];
        this->columnblocSizeY = __super::Columns[L"blocSizeY"];
        this->columntileset_Id = __super::Columns[L"tileset_Id"];
        this->columnblocks_Id = __super::Columns[L"blocks_Id"];
    }
    
    inline ::System::Void NewDataSet::tilesetDataTable::InitClass() {
        this->columnimg = (gcnew ::System::Data::DataColumn(L"img", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnimg);
        this->columnblocSizeX = (gcnew ::System::Data::DataColumn(L"blocSizeX", ::System::Single::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnblocSizeX);
        this->columnblocSizeY = (gcnew ::System::Data::DataColumn(L"blocSizeY", ::System::Single::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnblocSizeY);
        this->columntileset_Id = (gcnew ::System::Data::DataColumn(L"tileset_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columntileset_Id);
        this->columnblocks_Id = (gcnew ::System::Data::DataColumn(L"blocks_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnblocks_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columntileset_Id}, 
                true)));
        this->columnimg->AllowDBNull = false;
        this->columnimg->Namespace = L"";
        this->columnblocSizeX->AllowDBNull = false;
        this->columnblocSizeX->Namespace = L"";
        this->columnblocSizeY->AllowDBNull = false;
        this->columnblocSizeY->Namespace = L"";
        this->columntileset_Id->AutoIncrement = true;
        this->columntileset_Id->AllowDBNull = false;
        this->columntileset_Id->Unique = true;
    }
    
    inline SMP::NewDataSet::tilesetRow^  NewDataSet::tilesetDataTable::NewtilesetRow() {
        return (cli::safe_cast<SMP::NewDataSet::tilesetRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::tilesetDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew SMP::NewDataSet::tilesetRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::tilesetDataTable::GetRowType() {
        return SMP::NewDataSet::tilesetRow::typeid;
    }
    
    inline ::System::Void NewDataSet::tilesetDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->tilesetRowChanged(this, (gcnew SMP::NewDataSet::tilesetRowChangeEvent((cli::safe_cast<SMP::NewDataSet::tilesetRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::tilesetDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->tilesetRowChanging(this, (gcnew SMP::NewDataSet::tilesetRowChangeEvent((cli::safe_cast<SMP::NewDataSet::tilesetRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::tilesetDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->tilesetRowDeleted(this, (gcnew SMP::NewDataSet::tilesetRowChangeEvent((cli::safe_cast<SMP::NewDataSet::tilesetRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::tilesetDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->tilesetRowDeleting(this, (gcnew SMP::NewDataSet::tilesetRowChangeEvent((cli::safe_cast<SMP::NewDataSet::tilesetRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::tilesetDataTable::RemovetilesetRow(SMP::NewDataSet::tilesetRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::tilesetDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        SMP::NewDataSet^  ds = (gcnew SMP::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"tilesetDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::blockDataTable::blockDataTable() {
        this->TableName = L"block";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::blockDataTable::blockDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::blockDataTable::blockDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::blockDataTable::type_blocColumn::get() {
        return this->columntype_bloc;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::blockDataTable::physicIndexColumn::get() {
        return this->columnphysicIndex;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::blockDataTable::tileset_IdColumn::get() {
        return this->columntileset_Id;
    }
    
    inline ::System::Int32 NewDataSet::blockDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline SMP::NewDataSet::blockRow^  NewDataSet::blockDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<SMP::NewDataSet::blockRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::blockDataTable::AddblockRow(SMP::NewDataSet::blockRow^  row) {
        this->Rows->Add(row);
    }
    
    inline SMP::NewDataSet::blockRow^  NewDataSet::blockDataTable::AddblockRow(System::UInt32 type_bloc, System::UInt32 physicIndex, 
                SMP::NewDataSet::tilesetRow^  parenttilesetRowBytileset_block) {
        SMP::NewDataSet::blockRow^  rowblockRow = (cli::safe_cast<SMP::NewDataSet::blockRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {type_bloc, physicIndex, 
            nullptr};
        if (parenttilesetRowBytileset_block != nullptr) {
            columnValuesArray[2] = parenttilesetRowBytileset_block[3];
        }
        rowblockRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowblockRow);
        return rowblockRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::blockDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::blockDataTable::Clone() {
        SMP::NewDataSet::blockDataTable^  cln = (cli::safe_cast<SMP::NewDataSet::blockDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::blockDataTable::CreateInstance() {
        return (gcnew SMP::NewDataSet::blockDataTable());
    }
    
    inline ::System::Void NewDataSet::blockDataTable::InitVars() {
        this->columntype_bloc = __super::Columns[L"type_bloc"];
        this->columnphysicIndex = __super::Columns[L"physicIndex"];
        this->columntileset_Id = __super::Columns[L"tileset_Id"];
    }
    
    inline ::System::Void NewDataSet::blockDataTable::InitClass() {
        this->columntype_bloc = (gcnew ::System::Data::DataColumn(L"type_bloc", ::System::UInt32::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columntype_bloc);
        this->columnphysicIndex = (gcnew ::System::Data::DataColumn(L"physicIndex", ::System::UInt32::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnphysicIndex);
        this->columntileset_Id = (gcnew ::System::Data::DataColumn(L"tileset_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columntileset_Id);
        this->columntype_bloc->AllowDBNull = false;
        this->columntype_bloc->Namespace = L"";
        this->columnphysicIndex->AllowDBNull = false;
        this->columnphysicIndex->Namespace = L"";
    }
    
    inline SMP::NewDataSet::blockRow^  NewDataSet::blockDataTable::NewblockRow() {
        return (cli::safe_cast<SMP::NewDataSet::blockRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::blockDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew SMP::NewDataSet::blockRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::blockDataTable::GetRowType() {
        return SMP::NewDataSet::blockRow::typeid;
    }
    
    inline ::System::Void NewDataSet::blockDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->blockRowChanged(this, (gcnew SMP::NewDataSet::blockRowChangeEvent((cli::safe_cast<SMP::NewDataSet::blockRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::blockDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->blockRowChanging(this, (gcnew SMP::NewDataSet::blockRowChangeEvent((cli::safe_cast<SMP::NewDataSet::blockRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::blockDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->blockRowDeleted(this, (gcnew SMP::NewDataSet::blockRowChangeEvent((cli::safe_cast<SMP::NewDataSet::blockRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::blockDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->blockRowDeleting(this, (gcnew SMP::NewDataSet::blockRowChangeEvent((cli::safe_cast<SMP::NewDataSet::blockRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::blockDataTable::RemoveblockRow(SMP::NewDataSet::blockRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::blockDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        SMP::NewDataSet^  ds = (gcnew SMP::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"blockDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::layersDataTable::layersDataTable() {
        this->TableName = L"layers";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::layersDataTable::layersDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::layersDataTable::layersDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::layersDataTable::nbColumn::get() {
        return this->columnnb;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::layersDataTable::layers_IdColumn::get() {
        return this->columnlayers_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::layersDataTable::blocks_IdColumn::get() {
        return this->columnblocks_Id;
    }
    
    inline ::System::Int32 NewDataSet::layersDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline SMP::NewDataSet::layersRow^  NewDataSet::layersDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<SMP::NewDataSet::layersRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::layersDataTable::AddlayersRow(SMP::NewDataSet::layersRow^  row) {
        this->Rows->Add(row);
    }
    
    inline SMP::NewDataSet::layersRow^  NewDataSet::layersDataTable::AddlayersRow(System::Byte nb, SMP::NewDataSet::blocksRow^  parentblocksRowByblocks_layers) {
        SMP::NewDataSet::layersRow^  rowlayersRow = (cli::safe_cast<SMP::NewDataSet::layersRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {nb, nullptr, nullptr};
        if (parentblocksRowByblocks_layers != nullptr) {
            columnValuesArray[2] = parentblocksRowByblocks_layers[0];
        }
        rowlayersRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowlayersRow);
        return rowlayersRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::layersDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::layersDataTable::Clone() {
        SMP::NewDataSet::layersDataTable^  cln = (cli::safe_cast<SMP::NewDataSet::layersDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::layersDataTable::CreateInstance() {
        return (gcnew SMP::NewDataSet::layersDataTable());
    }
    
    inline ::System::Void NewDataSet::layersDataTable::InitVars() {
        this->columnnb = __super::Columns[L"nb"];
        this->columnlayers_Id = __super::Columns[L"layers_Id"];
        this->columnblocks_Id = __super::Columns[L"blocks_Id"];
    }
    
    inline ::System::Void NewDataSet::layersDataTable::InitClass() {
        this->columnnb = (gcnew ::System::Data::DataColumn(L"nb", ::System::Byte::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnnb);
        this->columnlayers_Id = (gcnew ::System::Data::DataColumn(L"layers_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnlayers_Id);
        this->columnblocks_Id = (gcnew ::System::Data::DataColumn(L"blocks_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnblocks_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnlayers_Id}, 
                true)));
        this->columnnb->AllowDBNull = false;
        this->columnnb->Namespace = L"";
        this->columnlayers_Id->AutoIncrement = true;
        this->columnlayers_Id->AllowDBNull = false;
        this->columnlayers_Id->Unique = true;
    }
    
    inline SMP::NewDataSet::layersRow^  NewDataSet::layersDataTable::NewlayersRow() {
        return (cli::safe_cast<SMP::NewDataSet::layersRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::layersDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew SMP::NewDataSet::layersRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::layersDataTable::GetRowType() {
        return SMP::NewDataSet::layersRow::typeid;
    }
    
    inline ::System::Void NewDataSet::layersDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->layersRowChanged(this, (gcnew SMP::NewDataSet::layersRowChangeEvent((cli::safe_cast<SMP::NewDataSet::layersRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::layersDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->layersRowChanging(this, (gcnew SMP::NewDataSet::layersRowChangeEvent((cli::safe_cast<SMP::NewDataSet::layersRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::layersDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->layersRowDeleted(this, (gcnew SMP::NewDataSet::layersRowChangeEvent((cli::safe_cast<SMP::NewDataSet::layersRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::layersDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->layersRowDeleting(this, (gcnew SMP::NewDataSet::layersRowChangeEvent((cli::safe_cast<SMP::NewDataSet::layersRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::layersDataTable::RemovelayersRow(SMP::NewDataSet::layersRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::layersDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        SMP::NewDataSet^  ds = (gcnew SMP::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"layersDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::layerDataTable::layerDataTable() {
        this->TableName = L"layer";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::layerDataTable::layerDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::layerDataTable::layerDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::layerDataTable::indexColumn::get() {
        return this->columnindex;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::layerDataTable::layer_IdColumn::get() {
        return this->columnlayer_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::layerDataTable::layers_IdColumn::get() {
        return this->columnlayers_Id;
    }
    
    inline ::System::Int32 NewDataSet::layerDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline SMP::NewDataSet::layerRow^  NewDataSet::layerDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<SMP::NewDataSet::layerRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::layerDataTable::AddlayerRow(SMP::NewDataSet::layerRow^  row) {
        this->Rows->Add(row);
    }
    
    inline SMP::NewDataSet::layerRow^  NewDataSet::layerDataTable::AddlayerRow(System::Byte index, SMP::NewDataSet::layersRow^  parentlayersRowBylayers_layer) {
        SMP::NewDataSet::layerRow^  rowlayerRow = (cli::safe_cast<SMP::NewDataSet::layerRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {index, nullptr, nullptr};
        if (parentlayersRowBylayers_layer != nullptr) {
            columnValuesArray[2] = parentlayersRowBylayers_layer[1];
        }
        rowlayerRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowlayerRow);
        return rowlayerRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::layerDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::layerDataTable::Clone() {
        SMP::NewDataSet::layerDataTable^  cln = (cli::safe_cast<SMP::NewDataSet::layerDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::layerDataTable::CreateInstance() {
        return (gcnew SMP::NewDataSet::layerDataTable());
    }
    
    inline ::System::Void NewDataSet::layerDataTable::InitVars() {
        this->columnindex = __super::Columns[L"index"];
        this->columnlayer_Id = __super::Columns[L"layer_Id"];
        this->columnlayers_Id = __super::Columns[L"layers_Id"];
    }
    
    inline ::System::Void NewDataSet::layerDataTable::InitClass() {
        this->columnindex = (gcnew ::System::Data::DataColumn(L"index", ::System::Byte::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnindex);
        this->columnlayer_Id = (gcnew ::System::Data::DataColumn(L"layer_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnlayer_Id);
        this->columnlayers_Id = (gcnew ::System::Data::DataColumn(L"layers_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnlayers_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnlayer_Id}, 
                true)));
        this->columnindex->AllowDBNull = false;
        this->columnindex->Namespace = L"";
        this->columnlayer_Id->AutoIncrement = true;
        this->columnlayer_Id->AllowDBNull = false;
        this->columnlayer_Id->Unique = true;
    }
    
    inline SMP::NewDataSet::layerRow^  NewDataSet::layerDataTable::NewlayerRow() {
        return (cli::safe_cast<SMP::NewDataSet::layerRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::layerDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew SMP::NewDataSet::layerRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::layerDataTable::GetRowType() {
        return SMP::NewDataSet::layerRow::typeid;
    }
    
    inline ::System::Void NewDataSet::layerDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->layerRowChanged(this, (gcnew SMP::NewDataSet::layerRowChangeEvent((cli::safe_cast<SMP::NewDataSet::layerRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::layerDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->layerRowChanging(this, (gcnew SMP::NewDataSet::layerRowChangeEvent((cli::safe_cast<SMP::NewDataSet::layerRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::layerDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->layerRowDeleted(this, (gcnew SMP::NewDataSet::layerRowChangeEvent((cli::safe_cast<SMP::NewDataSet::layerRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::layerDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->layerRowDeleting(this, (gcnew SMP::NewDataSet::layerRowChangeEvent((cli::safe_cast<SMP::NewDataSet::layerRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::layerDataTable::RemovelayerRow(SMP::NewDataSet::layerRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::layerDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        SMP::NewDataSet^  ds = (gcnew SMP::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"layerDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::occ_blockDataTable::occ_blockDataTable() {
        this->TableName = L"occ_block";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::occ_blockDataTable::occ_blockDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::occ_blockDataTable::occ_blockDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::occ_blockDataTable::positionXColumn::get() {
        return this->columnpositionX;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::occ_blockDataTable::positionYColumn::get() {
        return this->columnpositionY;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::occ_blockDataTable::actualColumn::get() {
        return this->columnactual;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::occ_blockDataTable::altColumn::get() {
        return this->columnalt;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::occ_blockDataTable::itemColumn::get() {
        return this->columnitem;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::occ_blockDataTable::layer_IdColumn::get() {
        return this->columnlayer_Id;
    }
    
    inline ::System::Int32 NewDataSet::occ_blockDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline SMP::NewDataSet::occ_blockRow^  NewDataSet::occ_blockDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<SMP::NewDataSet::occ_blockRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::occ_blockDataTable::Addocc_blockRow(SMP::NewDataSet::occ_blockRow^  row) {
        this->Rows->Add(row);
    }
    
    inline SMP::NewDataSet::occ_blockRow^  NewDataSet::occ_blockDataTable::Addocc_blockRow(
                System::Single positionX, 
                System::Single positionY, 
                System::Byte actual, 
                System::SByte alt, 
                System::SByte item, 
                SMP::NewDataSet::layerRow^  parentlayerRowBylayer_occ_block) {
        SMP::NewDataSet::occ_blockRow^  rowocc_blockRow = (cli::safe_cast<SMP::NewDataSet::occ_blockRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(6) {positionX, positionY, 
            actual, alt, item, nullptr};
        if (parentlayerRowBylayer_occ_block != nullptr) {
            columnValuesArray[5] = parentlayerRowBylayer_occ_block[1];
        }
        rowocc_blockRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowocc_blockRow);
        return rowocc_blockRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::occ_blockDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::occ_blockDataTable::Clone() {
        SMP::NewDataSet::occ_blockDataTable^  cln = (cli::safe_cast<SMP::NewDataSet::occ_blockDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::occ_blockDataTable::CreateInstance() {
        return (gcnew SMP::NewDataSet::occ_blockDataTable());
    }
    
    inline ::System::Void NewDataSet::occ_blockDataTable::InitVars() {
        this->columnpositionX = __super::Columns[L"positionX"];
        this->columnpositionY = __super::Columns[L"positionY"];
        this->columnactual = __super::Columns[L"actual"];
        this->columnalt = __super::Columns[L"alt"];
        this->columnitem = __super::Columns[L"item"];
        this->columnlayer_Id = __super::Columns[L"layer_Id"];
    }
    
    inline ::System::Void NewDataSet::occ_blockDataTable::InitClass() {
        this->columnpositionX = (gcnew ::System::Data::DataColumn(L"positionX", ::System::Single::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnpositionX);
        this->columnpositionY = (gcnew ::System::Data::DataColumn(L"positionY", ::System::Single::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnpositionY);
        this->columnactual = (gcnew ::System::Data::DataColumn(L"actual", ::System::Byte::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnactual);
        this->columnalt = (gcnew ::System::Data::DataColumn(L"alt", ::System::SByte::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnalt);
        this->columnitem = (gcnew ::System::Data::DataColumn(L"item", ::System::SByte::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnitem);
        this->columnlayer_Id = (gcnew ::System::Data::DataColumn(L"layer_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnlayer_Id);
        this->columnpositionX->AllowDBNull = false;
        this->columnpositionX->Namespace = L"";
        this->columnpositionY->AllowDBNull = false;
        this->columnpositionY->Namespace = L"";
        this->columnactual->AllowDBNull = false;
        this->columnactual->Namespace = L"";
        this->columnalt->AllowDBNull = false;
        this->columnalt->Namespace = L"";
        this->columnitem->AllowDBNull = false;
        this->columnitem->Namespace = L"";
    }
    
    inline SMP::NewDataSet::occ_blockRow^  NewDataSet::occ_blockDataTable::Newocc_blockRow() {
        return (cli::safe_cast<SMP::NewDataSet::occ_blockRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::occ_blockDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew SMP::NewDataSet::occ_blockRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::occ_blockDataTable::GetRowType() {
        return SMP::NewDataSet::occ_blockRow::typeid;
    }
    
    inline ::System::Void NewDataSet::occ_blockDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->occ_blockRowChanged(this, (gcnew SMP::NewDataSet::occ_blockRowChangeEvent((cli::safe_cast<SMP::NewDataSet::occ_blockRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::occ_blockDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->occ_blockRowChanging(this, (gcnew SMP::NewDataSet::occ_blockRowChangeEvent((cli::safe_cast<SMP::NewDataSet::occ_blockRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::occ_blockDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->occ_blockRowDeleted(this, (gcnew SMP::NewDataSet::occ_blockRowChangeEvent((cli::safe_cast<SMP::NewDataSet::occ_blockRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::occ_blockDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->occ_blockRowDeleting(this, (gcnew SMP::NewDataSet::occ_blockRowChangeEvent((cli::safe_cast<SMP::NewDataSet::occ_blockRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::occ_blockDataTable::Removeocc_blockRow(SMP::NewDataSet::occ_blockRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::occ_blockDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        SMP::NewDataSet^  ds = (gcnew SMP::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"occ_blockDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::levelRow::levelRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tablelevel = (cli::safe_cast<SMP::NewDataSet::levelDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::levelRow::name::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tablelevel->nameColumn]));
    }
    inline System::Void NewDataSet::levelRow::name::set(System::String^  value) {
        this[this->tablelevel->nameColumn] = value;
    }
    
    inline System::Byte NewDataSet::levelRow::width::get() {
        return (cli::safe_cast<::System::Byte >(this[this->tablelevel->widthColumn]));
    }
    inline System::Void NewDataSet::levelRow::width::set(System::Byte value) {
        this[this->tablelevel->widthColumn] = value;
    }
    
    inline System::Byte NewDataSet::levelRow::height::get() {
        return (cli::safe_cast<::System::Byte >(this[this->tablelevel->heightColumn]));
    }
    inline System::Void NewDataSet::levelRow::height::set(System::Byte value) {
        this[this->tablelevel->heightColumn] = value;
    }
    
    inline System::String^  NewDataSet::levelRow::music::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tablelevel->musicColumn]));
    }
    inline System::Void NewDataSet::levelRow::music::set(System::String^  value) {
        this[this->tablelevel->musicColumn] = value;
    }
    
    inline System::Int32 NewDataSet::levelRow::level_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tablelevel->level_IdColumn]));
    }
    inline System::Void NewDataSet::levelRow::level_Id::set(System::Int32 value) {
        this[this->tablelevel->level_IdColumn] = value;
    }
    
    inline cli::array< SMP::NewDataSet::spawnRow^  >^  NewDataSet::levelRow::GetspawnRows() {
        if (this->Table->ChildRelations[L"level_spawn"] == nullptr) {
            return gcnew cli::array< SMP::NewDataSet::spawnRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< SMP::NewDataSet::spawnRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"level_spawn"])));
        }
    }
    
    inline cli::array< SMP::NewDataSet::checkpointsRow^  >^  NewDataSet::levelRow::GetcheckpointsRows() {
        if (this->Table->ChildRelations[L"level_checkpoints"] == nullptr) {
            return gcnew cli::array< SMP::NewDataSet::checkpointsRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< SMP::NewDataSet::checkpointsRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"level_checkpoints"])));
        }
    }
    
    inline cli::array< SMP::NewDataSet::backgroundsRow^  >^  NewDataSet::levelRow::GetbackgroundsRows() {
        if (this->Table->ChildRelations[L"level_backgrounds"] == nullptr) {
            return gcnew cli::array< SMP::NewDataSet::backgroundsRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< SMP::NewDataSet::backgroundsRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"level_backgrounds"])));
        }
    }
    
    inline cli::array< SMP::NewDataSet::foregroundsRow^  >^  NewDataSet::levelRow::GetforegroundsRows() {
        if (this->Table->ChildRelations[L"level_foregrounds"] == nullptr) {
            return gcnew cli::array< SMP::NewDataSet::foregroundsRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< SMP::NewDataSet::foregroundsRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"level_foregrounds"])));
        }
    }
    
    inline cli::array< SMP::NewDataSet::objectsRow^  >^  NewDataSet::levelRow::GetobjectsRows() {
        if (this->Table->ChildRelations[L"level_objects"] == nullptr) {
            return gcnew cli::array< SMP::NewDataSet::objectsRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< SMP::NewDataSet::objectsRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"level_objects"])));
        }
    }
    
    inline cli::array< SMP::NewDataSet::finishesRow^  >^  NewDataSet::levelRow::GetfinishesRows() {
        if (this->Table->ChildRelations[L"level_finishes"] == nullptr) {
            return gcnew cli::array< SMP::NewDataSet::finishesRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< SMP::NewDataSet::finishesRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"level_finishes"])));
        }
    }
    
    inline cli::array< SMP::NewDataSet::projectilesRow^  >^  NewDataSet::levelRow::GetprojectilesRows() {
        if (this->Table->ChildRelations[L"level_projectiles"] == nullptr) {
            return gcnew cli::array< SMP::NewDataSet::projectilesRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< SMP::NewDataSet::projectilesRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"level_projectiles"])));
        }
    }
    
    inline cli::array< SMP::NewDataSet::itemsRow^  >^  NewDataSet::levelRow::GetitemsRows() {
        if (this->Table->ChildRelations[L"level_items"] == nullptr) {
            return gcnew cli::array< SMP::NewDataSet::itemsRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< SMP::NewDataSet::itemsRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"level_items"])));
        }
    }
    
    inline cli::array< SMP::NewDataSet::monstersRow^  >^  NewDataSet::levelRow::GetmonstersRows() {
        if (this->Table->ChildRelations[L"level_monsters"] == nullptr) {
            return gcnew cli::array< SMP::NewDataSet::monstersRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< SMP::NewDataSet::monstersRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"level_monsters"])));
        }
    }
    
    inline cli::array< SMP::NewDataSet::pipesRow^  >^  NewDataSet::levelRow::GetpipesRows() {
        if (this->Table->ChildRelations[L"level_pipes"] == nullptr) {
            return gcnew cli::array< SMP::NewDataSet::pipesRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< SMP::NewDataSet::pipesRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"level_pipes"])));
        }
    }
    
    inline cli::array< SMP::NewDataSet::blocksRow^  >^  NewDataSet::levelRow::GetblocksRows() {
        if (this->Table->ChildRelations[L"level_blocks"] == nullptr) {
            return gcnew cli::array< SMP::NewDataSet::blocksRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< SMP::NewDataSet::blocksRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"level_blocks"])));
        }
    }
    
    
    inline NewDataSet::spawnRow::spawnRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tablespawn = (cli::safe_cast<SMP::NewDataSet::spawnDataTable^  >(this->Table));
    }
    
    inline System::Single NewDataSet::spawnRow::positionX::get() {
        return (cli::safe_cast<::System::Single >(this[this->tablespawn->positionXColumn]));
    }
    inline System::Void NewDataSet::spawnRow::positionX::set(System::Single value) {
        this[this->tablespawn->positionXColumn] = value;
    }
    
    inline System::Single NewDataSet::spawnRow::positionY::get() {
        return (cli::safe_cast<::System::Single >(this[this->tablespawn->positionYColumn]));
    }
    inline System::Void NewDataSet::spawnRow::positionY::set(System::Single value) {
        this[this->tablespawn->positionYColumn] = value;
    }
    
    inline System::Int32 NewDataSet::spawnRow::level_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tablespawn->level_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'level_Id\' in table \'spawn\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::spawnRow::level_Id::set(System::Int32 value) {
        this[this->tablespawn->level_IdColumn] = value;
    }
    
    inline SMP::NewDataSet::levelRow^  NewDataSet::spawnRow::levelRow::get() {
        return (cli::safe_cast<SMP::NewDataSet::levelRow^  >(this->GetParentRow(this->Table->ParentRelations[L"level_spawn"])));
    }
    inline System::Void NewDataSet::spawnRow::levelRow::set(SMP::NewDataSet::levelRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"level_spawn"]);
    }
    
    inline ::System::Boolean NewDataSet::spawnRow::Islevel_IdNull() {
        return this->IsNull(this->tablespawn->level_IdColumn);
    }
    
    inline ::System::Void NewDataSet::spawnRow::Setlevel_IdNull() {
        this[this->tablespawn->level_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::checkpointsRow::checkpointsRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tablecheckpoints = (cli::safe_cast<SMP::NewDataSet::checkpointsDataTable^  >(this->Table));
    }
    
    inline System::Int32 NewDataSet::checkpointsRow::checkpoints_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tablecheckpoints->checkpoints_IdColumn]));
    }
    inline System::Void NewDataSet::checkpointsRow::checkpoints_Id::set(System::Int32 value) {
        this[this->tablecheckpoints->checkpoints_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::checkpointsRow::level_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tablecheckpoints->level_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'level_Id\' in table \'checkpoints\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::checkpointsRow::level_Id::set(System::Int32 value) {
        this[this->tablecheckpoints->level_IdColumn] = value;
    }
    
    inline SMP::NewDataSet::levelRow^  NewDataSet::checkpointsRow::levelRow::get() {
        return (cli::safe_cast<SMP::NewDataSet::levelRow^  >(this->GetParentRow(this->Table->ParentRelations[L"level_checkpoints"])));
    }
    inline System::Void NewDataSet::checkpointsRow::levelRow::set(SMP::NewDataSet::levelRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"level_checkpoints"]);
    }
    
    inline ::System::Boolean NewDataSet::checkpointsRow::Islevel_IdNull() {
        return this->IsNull(this->tablecheckpoints->level_IdColumn);
    }
    
    inline ::System::Void NewDataSet::checkpointsRow::Setlevel_IdNull() {
        this[this->tablecheckpoints->level_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< SMP::NewDataSet::checkpointRow^  >^  NewDataSet::checkpointsRow::GetcheckpointRows() {
        if (this->Table->ChildRelations[L"checkpoints_checkpoint"] == nullptr) {
            return gcnew cli::array< SMP::NewDataSet::checkpointRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< SMP::NewDataSet::checkpointRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"checkpoints_checkpoint"])));
        }
    }
    
    
    inline NewDataSet::checkpointRow::checkpointRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tablecheckpoint = (cli::safe_cast<SMP::NewDataSet::checkpointDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::checkpointRow::img::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tablecheckpoint->imgColumn]));
    }
    inline System::Void NewDataSet::checkpointRow::img::set(System::String^  value) {
        this[this->tablecheckpoint->imgColumn] = value;
    }
    
    inline System::Single NewDataSet::checkpointRow::positionX::get() {
        return (cli::safe_cast<::System::Single >(this[this->tablecheckpoint->positionXColumn]));
    }
    inline System::Void NewDataSet::checkpointRow::positionX::set(System::Single value) {
        this[this->tablecheckpoint->positionXColumn] = value;
    }
    
    inline System::Single NewDataSet::checkpointRow::positionY::get() {
        return (cli::safe_cast<::System::Single >(this[this->tablecheckpoint->positionYColumn]));
    }
    inline System::Void NewDataSet::checkpointRow::positionY::set(System::Single value) {
        this[this->tablecheckpoint->positionYColumn] = value;
    }
    
    inline System::Int32 NewDataSet::checkpointRow::checkpoints_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tablecheckpoint->checkpoints_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'checkpoints_Id\' in table \'checkpoint\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::checkpointRow::checkpoints_Id::set(System::Int32 value) {
        this[this->tablecheckpoint->checkpoints_IdColumn] = value;
    }
    
    inline SMP::NewDataSet::checkpointsRow^  NewDataSet::checkpointRow::checkpointsRow::get() {
        return (cli::safe_cast<SMP::NewDataSet::checkpointsRow^  >(this->GetParentRow(this->Table->ParentRelations[L"checkpoints_checkpoint"])));
    }
    inline System::Void NewDataSet::checkpointRow::checkpointsRow::set(SMP::NewDataSet::checkpointsRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"checkpoints_checkpoint"]);
    }
    
    inline ::System::Boolean NewDataSet::checkpointRow::Ischeckpoints_IdNull() {
        return this->IsNull(this->tablecheckpoint->checkpoints_IdColumn);
    }
    
    inline ::System::Void NewDataSet::checkpointRow::Setcheckpoints_IdNull() {
        this[this->tablecheckpoint->checkpoints_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::backgroundsRow::backgroundsRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tablebackgrounds = (cli::safe_cast<SMP::NewDataSet::backgroundsDataTable^  >(this->Table));
    }
    
    inline System::Int32 NewDataSet::backgroundsRow::backgrounds_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tablebackgrounds->backgrounds_IdColumn]));
    }
    inline System::Void NewDataSet::backgroundsRow::backgrounds_Id::set(System::Int32 value) {
        this[this->tablebackgrounds->backgrounds_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::backgroundsRow::level_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tablebackgrounds->level_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'level_Id\' in table \'backgrounds\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::backgroundsRow::level_Id::set(System::Int32 value) {
        this[this->tablebackgrounds->level_IdColumn] = value;
    }
    
    inline SMP::NewDataSet::levelRow^  NewDataSet::backgroundsRow::levelRow::get() {
        return (cli::safe_cast<SMP::NewDataSet::levelRow^  >(this->GetParentRow(this->Table->ParentRelations[L"level_backgrounds"])));
    }
    inline System::Void NewDataSet::backgroundsRow::levelRow::set(SMP::NewDataSet::levelRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"level_backgrounds"]);
    }
    
    inline ::System::Boolean NewDataSet::backgroundsRow::Islevel_IdNull() {
        return this->IsNull(this->tablebackgrounds->level_IdColumn);
    }
    
    inline ::System::Void NewDataSet::backgroundsRow::Setlevel_IdNull() {
        this[this->tablebackgrounds->level_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< SMP::NewDataSet::backgroundRow^  >^  NewDataSet::backgroundsRow::GetbackgroundRows() {
        if (this->Table->ChildRelations[L"backgrounds_background"] == nullptr) {
            return gcnew cli::array< SMP::NewDataSet::backgroundRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< SMP::NewDataSet::backgroundRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"backgrounds_background"])));
        }
    }
    
    
    inline NewDataSet::backgroundRow::backgroundRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tablebackground = (cli::safe_cast<SMP::NewDataSet::backgroundDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::backgroundRow::img::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tablebackground->imgColumn]));
    }
    inline System::Void NewDataSet::backgroundRow::img::set(System::String^  value) {
        this[this->tablebackground->imgColumn] = value;
    }
    
    inline System::Single NewDataSet::backgroundRow::positionX::get() {
        return (cli::safe_cast<::System::Single >(this[this->tablebackground->positionXColumn]));
    }
    inline System::Void NewDataSet::backgroundRow::positionX::set(System::Single value) {
        this[this->tablebackground->positionXColumn] = value;
    }
    
    inline System::Single NewDataSet::backgroundRow::positionY::get() {
        return (cli::safe_cast<::System::Single >(this[this->tablebackground->positionYColumn]));
    }
    inline System::Void NewDataSet::backgroundRow::positionY::set(System::Single value) {
        this[this->tablebackground->positionYColumn] = value;
    }
    
    inline System::Int32 NewDataSet::backgroundRow::backgrounds_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tablebackground->backgrounds_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'backgrounds_Id\' in table \'background\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::backgroundRow::backgrounds_Id::set(System::Int32 value) {
        this[this->tablebackground->backgrounds_IdColumn] = value;
    }
    
    inline SMP::NewDataSet::backgroundsRow^  NewDataSet::backgroundRow::backgroundsRow::get() {
        return (cli::safe_cast<SMP::NewDataSet::backgroundsRow^  >(this->GetParentRow(this->Table->ParentRelations[L"backgrounds_background"])));
    }
    inline System::Void NewDataSet::backgroundRow::backgroundsRow::set(SMP::NewDataSet::backgroundsRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"backgrounds_background"]);
    }
    
    inline ::System::Boolean NewDataSet::backgroundRow::Isbackgrounds_IdNull() {
        return this->IsNull(this->tablebackground->backgrounds_IdColumn);
    }
    
    inline ::System::Void NewDataSet::backgroundRow::Setbackgrounds_IdNull() {
        this[this->tablebackground->backgrounds_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::foregroundsRow::foregroundsRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableforegrounds = (cli::safe_cast<SMP::NewDataSet::foregroundsDataTable^  >(this->Table));
    }
    
    inline System::Int32 NewDataSet::foregroundsRow::foregrounds_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tableforegrounds->foregrounds_IdColumn]));
    }
    inline System::Void NewDataSet::foregroundsRow::foregrounds_Id::set(System::Int32 value) {
        this[this->tableforegrounds->foregrounds_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::foregroundsRow::level_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableforegrounds->level_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'level_Id\' in table \'foregrounds\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::foregroundsRow::level_Id::set(System::Int32 value) {
        this[this->tableforegrounds->level_IdColumn] = value;
    }
    
    inline SMP::NewDataSet::levelRow^  NewDataSet::foregroundsRow::levelRow::get() {
        return (cli::safe_cast<SMP::NewDataSet::levelRow^  >(this->GetParentRow(this->Table->ParentRelations[L"level_foregrounds"])));
    }
    inline System::Void NewDataSet::foregroundsRow::levelRow::set(SMP::NewDataSet::levelRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"level_foregrounds"]);
    }
    
    inline ::System::Boolean NewDataSet::foregroundsRow::Islevel_IdNull() {
        return this->IsNull(this->tableforegrounds->level_IdColumn);
    }
    
    inline ::System::Void NewDataSet::foregroundsRow::Setlevel_IdNull() {
        this[this->tableforegrounds->level_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< SMP::NewDataSet::foregroundRow^  >^  NewDataSet::foregroundsRow::GetforegroundRows() {
        if (this->Table->ChildRelations[L"foregrounds_foreground"] == nullptr) {
            return gcnew cli::array< SMP::NewDataSet::foregroundRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< SMP::NewDataSet::foregroundRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"foregrounds_foreground"])));
        }
    }
    
    
    inline NewDataSet::foregroundRow::foregroundRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableforeground = (cli::safe_cast<SMP::NewDataSet::foregroundDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::foregroundRow::img::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableforeground->imgColumn]));
    }
    inline System::Void NewDataSet::foregroundRow::img::set(System::String^  value) {
        this[this->tableforeground->imgColumn] = value;
    }
    
    inline System::Single NewDataSet::foregroundRow::positionX::get() {
        return (cli::safe_cast<::System::Single >(this[this->tableforeground->positionXColumn]));
    }
    inline System::Void NewDataSet::foregroundRow::positionX::set(System::Single value) {
        this[this->tableforeground->positionXColumn] = value;
    }
    
    inline System::Single NewDataSet::foregroundRow::positionY::get() {
        return (cli::safe_cast<::System::Single >(this[this->tableforeground->positionYColumn]));
    }
    inline System::Void NewDataSet::foregroundRow::positionY::set(System::Single value) {
        this[this->tableforeground->positionYColumn] = value;
    }
    
    inline System::Int32 NewDataSet::foregroundRow::foregrounds_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableforeground->foregrounds_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'foregrounds_Id\' in table \'foreground\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::foregroundRow::foregrounds_Id::set(System::Int32 value) {
        this[this->tableforeground->foregrounds_IdColumn] = value;
    }
    
    inline SMP::NewDataSet::foregroundsRow^  NewDataSet::foregroundRow::foregroundsRow::get() {
        return (cli::safe_cast<SMP::NewDataSet::foregroundsRow^  >(this->GetParentRow(this->Table->ParentRelations[L"foregrounds_foreground"])));
    }
    inline System::Void NewDataSet::foregroundRow::foregroundsRow::set(SMP::NewDataSet::foregroundsRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"foregrounds_foreground"]);
    }
    
    inline ::System::Boolean NewDataSet::foregroundRow::Isforegrounds_IdNull() {
        return this->IsNull(this->tableforeground->foregrounds_IdColumn);
    }
    
    inline ::System::Void NewDataSet::foregroundRow::Setforegrounds_IdNull() {
        this[this->tableforeground->foregrounds_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::objectsRow::objectsRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableobjects = (cli::safe_cast<SMP::NewDataSet::objectsDataTable^  >(this->Table));
    }
    
    inline System::Int32 NewDataSet::objectsRow::objects_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tableobjects->objects_IdColumn]));
    }
    inline System::Void NewDataSet::objectsRow::objects_Id::set(System::Int32 value) {
        this[this->tableobjects->objects_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::objectsRow::level_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableobjects->level_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'level_Id\' in table \'objects\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::objectsRow::level_Id::set(System::Int32 value) {
        this[this->tableobjects->level_IdColumn] = value;
    }
    
    inline SMP::NewDataSet::levelRow^  NewDataSet::objectsRow::levelRow::get() {
        return (cli::safe_cast<SMP::NewDataSet::levelRow^  >(this->GetParentRow(this->Table->ParentRelations[L"level_objects"])));
    }
    inline System::Void NewDataSet::objectsRow::levelRow::set(SMP::NewDataSet::levelRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"level_objects"]);
    }
    
    inline ::System::Boolean NewDataSet::objectsRow::Islevel_IdNull() {
        return this->IsNull(this->tableobjects->level_IdColumn);
    }
    
    inline ::System::Void NewDataSet::objectsRow::Setlevel_IdNull() {
        this[this->tableobjects->level_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< SMP::NewDataSet::objectRow^  >^  NewDataSet::objectsRow::GetobjectRows() {
        if (this->Table->ChildRelations[L"objects_object"] == nullptr) {
            return gcnew cli::array< SMP::NewDataSet::objectRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< SMP::NewDataSet::objectRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"objects_object"])));
        }
    }
    
    
    inline NewDataSet::objectRow::objectRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableobject = (cli::safe_cast<SMP::NewDataSet::objectDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::objectRow::img::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableobject->imgColumn]));
    }
    inline System::Void NewDataSet::objectRow::img::set(System::String^  value) {
        this[this->tableobject->imgColumn] = value;
    }
    
    inline System::Single NewDataSet::objectRow::positionX::get() {
        return (cli::safe_cast<::System::Single >(this[this->tableobject->positionXColumn]));
    }
    inline System::Void NewDataSet::objectRow::positionX::set(System::Single value) {
        this[this->tableobject->positionXColumn] = value;
    }
    
    inline System::Single NewDataSet::objectRow::positionY::get() {
        return (cli::safe_cast<::System::Single >(this[this->tableobject->positionYColumn]));
    }
    inline System::Void NewDataSet::objectRow::positionY::set(System::Single value) {
        this[this->tableobject->positionYColumn] = value;
    }
    
    inline System::Int32 NewDataSet::objectRow::objects_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableobject->objects_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'objects_Id\' in table \'object\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::objectRow::objects_Id::set(System::Int32 value) {
        this[this->tableobject->objects_IdColumn] = value;
    }
    
    inline SMP::NewDataSet::objectsRow^  NewDataSet::objectRow::objectsRow::get() {
        return (cli::safe_cast<SMP::NewDataSet::objectsRow^  >(this->GetParentRow(this->Table->ParentRelations[L"objects_object"])));
    }
    inline System::Void NewDataSet::objectRow::objectsRow::set(SMP::NewDataSet::objectsRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"objects_object"]);
    }
    
    inline ::System::Boolean NewDataSet::objectRow::Isobjects_IdNull() {
        return this->IsNull(this->tableobject->objects_IdColumn);
    }
    
    inline ::System::Void NewDataSet::objectRow::Setobjects_IdNull() {
        this[this->tableobject->objects_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::finishesRow::finishesRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tablefinishes = (cli::safe_cast<SMP::NewDataSet::finishesDataTable^  >(this->Table));
    }
    
    inline System::Int32 NewDataSet::finishesRow::finishes_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tablefinishes->finishes_IdColumn]));
    }
    inline System::Void NewDataSet::finishesRow::finishes_Id::set(System::Int32 value) {
        this[this->tablefinishes->finishes_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::finishesRow::level_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tablefinishes->level_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'level_Id\' in table \'finishes\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::finishesRow::level_Id::set(System::Int32 value) {
        this[this->tablefinishes->level_IdColumn] = value;
    }
    
    inline SMP::NewDataSet::levelRow^  NewDataSet::finishesRow::levelRow::get() {
        return (cli::safe_cast<SMP::NewDataSet::levelRow^  >(this->GetParentRow(this->Table->ParentRelations[L"level_finishes"])));
    }
    inline System::Void NewDataSet::finishesRow::levelRow::set(SMP::NewDataSet::levelRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"level_finishes"]);
    }
    
    inline ::System::Boolean NewDataSet::finishesRow::Islevel_IdNull() {
        return this->IsNull(this->tablefinishes->level_IdColumn);
    }
    
    inline ::System::Void NewDataSet::finishesRow::Setlevel_IdNull() {
        this[this->tablefinishes->level_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< SMP::NewDataSet::finishRow^  >^  NewDataSet::finishesRow::GetfinishRows() {
        if (this->Table->ChildRelations[L"finishes_finish"] == nullptr) {
            return gcnew cli::array< SMP::NewDataSet::finishRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< SMP::NewDataSet::finishRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"finishes_finish"])));
        }
    }
    
    
    inline NewDataSet::finishRow::finishRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tablefinish = (cli::safe_cast<SMP::NewDataSet::finishDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::finishRow::img::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tablefinish->imgColumn]));
    }
    inline System::Void NewDataSet::finishRow::img::set(System::String^  value) {
        this[this->tablefinish->imgColumn] = value;
    }
    
    inline System::Single NewDataSet::finishRow::positionX::get() {
        return (cli::safe_cast<::System::Single >(this[this->tablefinish->positionXColumn]));
    }
    inline System::Void NewDataSet::finishRow::positionX::set(System::Single value) {
        this[this->tablefinish->positionXColumn] = value;
    }
    
    inline System::Single NewDataSet::finishRow::positionY::get() {
        return (cli::safe_cast<::System::Single >(this[this->tablefinish->positionYColumn]));
    }
    inline System::Void NewDataSet::finishRow::positionY::set(System::Single value) {
        this[this->tablefinish->positionYColumn] = value;
    }
    
    inline System::Int32 NewDataSet::finishRow::finishes_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tablefinish->finishes_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'finishes_Id\' in table \'finish\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::finishRow::finishes_Id::set(System::Int32 value) {
        this[this->tablefinish->finishes_IdColumn] = value;
    }
    
    inline SMP::NewDataSet::finishesRow^  NewDataSet::finishRow::finishesRow::get() {
        return (cli::safe_cast<SMP::NewDataSet::finishesRow^  >(this->GetParentRow(this->Table->ParentRelations[L"finishes_finish"])));
    }
    inline System::Void NewDataSet::finishRow::finishesRow::set(SMP::NewDataSet::finishesRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"finishes_finish"]);
    }
    
    inline ::System::Boolean NewDataSet::finishRow::Isfinishes_IdNull() {
        return this->IsNull(this->tablefinish->finishes_IdColumn);
    }
    
    inline ::System::Void NewDataSet::finishRow::Setfinishes_IdNull() {
        this[this->tablefinish->finishes_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::projectilesRow::projectilesRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableprojectiles = (cli::safe_cast<SMP::NewDataSet::projectilesDataTable^  >(this->Table));
    }
    
    inline System::Int32 NewDataSet::projectilesRow::projectiles_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tableprojectiles->projectiles_IdColumn]));
    }
    inline System::Void NewDataSet::projectilesRow::projectiles_Id::set(System::Int32 value) {
        this[this->tableprojectiles->projectiles_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::projectilesRow::level_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableprojectiles->level_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'level_Id\' in table \'projectiles\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::projectilesRow::level_Id::set(System::Int32 value) {
        this[this->tableprojectiles->level_IdColumn] = value;
    }
    
    inline SMP::NewDataSet::levelRow^  NewDataSet::projectilesRow::levelRow::get() {
        return (cli::safe_cast<SMP::NewDataSet::levelRow^  >(this->GetParentRow(this->Table->ParentRelations[L"level_projectiles"])));
    }
    inline System::Void NewDataSet::projectilesRow::levelRow::set(SMP::NewDataSet::levelRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"level_projectiles"]);
    }
    
    inline ::System::Boolean NewDataSet::projectilesRow::Islevel_IdNull() {
        return this->IsNull(this->tableprojectiles->level_IdColumn);
    }
    
    inline ::System::Void NewDataSet::projectilesRow::Setlevel_IdNull() {
        this[this->tableprojectiles->level_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< SMP::NewDataSet::projectileRow^  >^  NewDataSet::projectilesRow::GetprojectileRows() {
        if (this->Table->ChildRelations[L"projectiles_projectile"] == nullptr) {
            return gcnew cli::array< SMP::NewDataSet::projectileRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< SMP::NewDataSet::projectileRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"projectiles_projectile"])));
        }
    }
    
    
    inline NewDataSet::projectileRow::projectileRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableprojectile = (cli::safe_cast<SMP::NewDataSet::projectileDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::projectileRow::img::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableprojectile->imgColumn]));
    }
    inline System::Void NewDataSet::projectileRow::img::set(System::String^  value) {
        this[this->tableprojectile->imgColumn] = value;
    }
    
    inline System::Int32 NewDataSet::projectileRow::projectiles_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableprojectile->projectiles_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'projectiles_Id\' in table \'projectile\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::projectileRow::projectiles_Id::set(System::Int32 value) {
        this[this->tableprojectile->projectiles_IdColumn] = value;
    }
    
    inline SMP::NewDataSet::projectilesRow^  NewDataSet::projectileRow::projectilesRow::get() {
        return (cli::safe_cast<SMP::NewDataSet::projectilesRow^  >(this->GetParentRow(this->Table->ParentRelations[L"projectiles_projectile"])));
    }
    inline System::Void NewDataSet::projectileRow::projectilesRow::set(SMP::NewDataSet::projectilesRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"projectiles_projectile"]);
    }
    
    inline ::System::Boolean NewDataSet::projectileRow::Isprojectiles_IdNull() {
        return this->IsNull(this->tableprojectile->projectiles_IdColumn);
    }
    
    inline ::System::Void NewDataSet::projectileRow::Setprojectiles_IdNull() {
        this[this->tableprojectile->projectiles_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::itemsRow::itemsRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableitems = (cli::safe_cast<SMP::NewDataSet::itemsDataTable^  >(this->Table));
    }
    
    inline System::Int32 NewDataSet::itemsRow::items_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tableitems->items_IdColumn]));
    }
    inline System::Void NewDataSet::itemsRow::items_Id::set(System::Int32 value) {
        this[this->tableitems->items_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::itemsRow::level_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableitems->level_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'level_Id\' in table \'items\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::itemsRow::level_Id::set(System::Int32 value) {
        this[this->tableitems->level_IdColumn] = value;
    }
    
    inline SMP::NewDataSet::levelRow^  NewDataSet::itemsRow::levelRow::get() {
        return (cli::safe_cast<SMP::NewDataSet::levelRow^  >(this->GetParentRow(this->Table->ParentRelations[L"level_items"])));
    }
    inline System::Void NewDataSet::itemsRow::levelRow::set(SMP::NewDataSet::levelRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"level_items"]);
    }
    
    inline ::System::Boolean NewDataSet::itemsRow::Islevel_IdNull() {
        return this->IsNull(this->tableitems->level_IdColumn);
    }
    
    inline ::System::Void NewDataSet::itemsRow::Setlevel_IdNull() {
        this[this->tableitems->level_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< SMP::NewDataSet::itemRow^  >^  NewDataSet::itemsRow::GetitemRows() {
        if (this->Table->ChildRelations[L"items_item"] == nullptr) {
            return gcnew cli::array< SMP::NewDataSet::itemRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< SMP::NewDataSet::itemRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"items_item"])));
        }
    }
    
    
    inline NewDataSet::itemRow::itemRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableitem = (cli::safe_cast<SMP::NewDataSet::itemDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::itemRow::img::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableitem->imgColumn]));
    }
    inline System::Void NewDataSet::itemRow::img::set(System::String^  value) {
        this[this->tableitem->imgColumn] = value;
    }
    
    inline System::Byte NewDataSet::itemRow::type::get() {
        return (cli::safe_cast<::System::Byte >(this[this->tableitem->typeColumn]));
    }
    inline System::Void NewDataSet::itemRow::type::set(System::Byte value) {
        this[this->tableitem->typeColumn] = value;
    }
    
    inline System::Int32 NewDataSet::itemRow::items_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableitem->items_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'items_Id\' in table \'item\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::itemRow::items_Id::set(System::Int32 value) {
        this[this->tableitem->items_IdColumn] = value;
    }
    
    inline SMP::NewDataSet::itemsRow^  NewDataSet::itemRow::itemsRow::get() {
        return (cli::safe_cast<SMP::NewDataSet::itemsRow^  >(this->GetParentRow(this->Table->ParentRelations[L"items_item"])));
    }
    inline System::Void NewDataSet::itemRow::itemsRow::set(SMP::NewDataSet::itemsRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"items_item"]);
    }
    
    inline ::System::Boolean NewDataSet::itemRow::Isitems_IdNull() {
        return this->IsNull(this->tableitem->items_IdColumn);
    }
    
    inline ::System::Void NewDataSet::itemRow::Setitems_IdNull() {
        this[this->tableitem->items_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::monstersRow::monstersRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tablemonsters = (cli::safe_cast<SMP::NewDataSet::monstersDataTable^  >(this->Table));
    }
    
    inline System::Int32 NewDataSet::monstersRow::monsters_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tablemonsters->monsters_IdColumn]));
    }
    inline System::Void NewDataSet::monstersRow::monsters_Id::set(System::Int32 value) {
        this[this->tablemonsters->monsters_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::monstersRow::level_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tablemonsters->level_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'level_Id\' in table \'monsters\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::monstersRow::level_Id::set(System::Int32 value) {
        this[this->tablemonsters->level_IdColumn] = value;
    }
    
    inline SMP::NewDataSet::levelRow^  NewDataSet::monstersRow::levelRow::get() {
        return (cli::safe_cast<SMP::NewDataSet::levelRow^  >(this->GetParentRow(this->Table->ParentRelations[L"level_monsters"])));
    }
    inline System::Void NewDataSet::monstersRow::levelRow::set(SMP::NewDataSet::levelRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"level_monsters"]);
    }
    
    inline ::System::Boolean NewDataSet::monstersRow::Islevel_IdNull() {
        return this->IsNull(this->tablemonsters->level_IdColumn);
    }
    
    inline ::System::Void NewDataSet::monstersRow::Setlevel_IdNull() {
        this[this->tablemonsters->level_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< SMP::NewDataSet::walking_monsterRow^  >^  NewDataSet::monstersRow::Getwalking_monsterRows() {
        if (this->Table->ChildRelations[L"monsters_walking_monster"] == nullptr) {
            return gcnew cli::array< SMP::NewDataSet::walking_monsterRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< SMP::NewDataSet::walking_monsterRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"monsters_walking_monster"])));
        }
    }
    
    inline cli::array< SMP::NewDataSet::flying_monsterRow^  >^  NewDataSet::monstersRow::Getflying_monsterRows() {
        if (this->Table->ChildRelations[L"monsters_flying_monster"] == nullptr) {
            return gcnew cli::array< SMP::NewDataSet::flying_monsterRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< SMP::NewDataSet::flying_monsterRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"monsters_flying_monster"])));
        }
    }
    
    inline cli::array< SMP::NewDataSet::shell_monsterRow^  >^  NewDataSet::monstersRow::Getshell_monsterRows() {
        if (this->Table->ChildRelations[L"monsters_shell_monster"] == nullptr) {
            return gcnew cli::array< SMP::NewDataSet::shell_monsterRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< SMP::NewDataSet::shell_monsterRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"monsters_shell_monster"])));
        }
    }
    
    
    inline NewDataSet::walking_monsterRow::walking_monsterRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tablewalking_monster = (cli::safe_cast<SMP::NewDataSet::walking_monsterDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::walking_monsterRow::name::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tablewalking_monster->nameColumn]));
    }
    inline System::Void NewDataSet::walking_monsterRow::name::set(System::String^  value) {
        this[this->tablewalking_monster->nameColumn] = value;
    }
    
    inline System::Int32 NewDataSet::walking_monsterRow::walking_monster_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tablewalking_monster->walking_monster_IdColumn]));
    }
    inline System::Void NewDataSet::walking_monsterRow::walking_monster_Id::set(System::Int32 value) {
        this[this->tablewalking_monster->walking_monster_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::walking_monsterRow::monsters_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tablewalking_monster->monsters_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'monsters_Id\' in table \'walking_monster\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::walking_monsterRow::monsters_Id::set(System::Int32 value) {
        this[this->tablewalking_monster->monsters_IdColumn] = value;
    }
    
    inline SMP::NewDataSet::monstersRow^  NewDataSet::walking_monsterRow::monstersRow::get() {
        return (cli::safe_cast<SMP::NewDataSet::monstersRow^  >(this->GetParentRow(this->Table->ParentRelations[L"monsters_walking_monster"])));
    }
    inline System::Void NewDataSet::walking_monsterRow::monstersRow::set(SMP::NewDataSet::monstersRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"monsters_walking_monster"]);
    }
    
    inline ::System::Boolean NewDataSet::walking_monsterRow::Ismonsters_IdNull() {
        return this->IsNull(this->tablewalking_monster->monsters_IdColumn);
    }
    
    inline ::System::Void NewDataSet::walking_monsterRow::Setmonsters_IdNull() {
        this[this->tablewalking_monster->monsters_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< SMP::NewDataSet::occ_monsterRow^  >^  NewDataSet::walking_monsterRow::Getocc_monsterRows() {
        if (this->Table->ChildRelations[L"walking_monster_occ_monster"] == nullptr) {
            return gcnew cli::array< SMP::NewDataSet::occ_monsterRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< SMP::NewDataSet::occ_monsterRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"walking_monster_occ_monster"])));
        }
    }
    
    
    inline NewDataSet::occ_monsterRow::occ_monsterRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableocc_monster = (cli::safe_cast<SMP::NewDataSet::occ_monsterDataTable^  >(this->Table));
    }
    
    inline System::Single NewDataSet::occ_monsterRow::positionX::get() {
        return (cli::safe_cast<::System::Single >(this[this->tableocc_monster->positionXColumn]));
    }
    inline System::Void NewDataSet::occ_monsterRow::positionX::set(System::Single value) {
        this[this->tableocc_monster->positionXColumn] = value;
    }
    
    inline System::Single NewDataSet::occ_monsterRow::positionY::get() {
        return (cli::safe_cast<::System::Single >(this[this->tableocc_monster->positionYColumn]));
    }
    inline System::Void NewDataSet::occ_monsterRow::positionY::set(System::Single value) {
        this[this->tableocc_monster->positionYColumn] = value;
    }
    
    inline System::Int32 NewDataSet::occ_monsterRow::walking_monster_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableocc_monster->walking_monster_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'walking_monster_Id\' in table \'occ_monster\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::occ_monsterRow::walking_monster_Id::set(System::Int32 value) {
        this[this->tableocc_monster->walking_monster_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::occ_monsterRow::flying_monster_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableocc_monster->flying_monster_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'flying_monster_Id\' in table \'occ_monster\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::occ_monsterRow::flying_monster_Id::set(System::Int32 value) {
        this[this->tableocc_monster->flying_monster_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::occ_monsterRow::shell_monster_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableocc_monster->shell_monster_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'shell_monster_Id\' in table \'occ_monster\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::occ_monsterRow::shell_monster_Id::set(System::Int32 value) {
        this[this->tableocc_monster->shell_monster_IdColumn] = value;
    }
    
    inline SMP::NewDataSet::walking_monsterRow^  NewDataSet::occ_monsterRow::walking_monsterRow::get() {
        return (cli::safe_cast<SMP::NewDataSet::walking_monsterRow^  >(this->GetParentRow(this->Table->ParentRelations[L"walking_monster_occ_monster"])));
    }
    inline System::Void NewDataSet::occ_monsterRow::walking_monsterRow::set(SMP::NewDataSet::walking_monsterRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"walking_monster_occ_monster"]);
    }
    
    inline SMP::NewDataSet::flying_monsterRow^  NewDataSet::occ_monsterRow::flying_monsterRow::get() {
        return (cli::safe_cast<SMP::NewDataSet::flying_monsterRow^  >(this->GetParentRow(this->Table->ParentRelations[L"flying_monster_occ_monster"])));
    }
    inline System::Void NewDataSet::occ_monsterRow::flying_monsterRow::set(SMP::NewDataSet::flying_monsterRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"flying_monster_occ_monster"]);
    }
    
    inline SMP::NewDataSet::shell_monsterRow^  NewDataSet::occ_monsterRow::shell_monsterRow::get() {
        return (cli::safe_cast<SMP::NewDataSet::shell_monsterRow^  >(this->GetParentRow(this->Table->ParentRelations[L"shell_monster_occ_monster"])));
    }
    inline System::Void NewDataSet::occ_monsterRow::shell_monsterRow::set(SMP::NewDataSet::shell_monsterRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"shell_monster_occ_monster"]);
    }
    
    inline ::System::Boolean NewDataSet::occ_monsterRow::Iswalking_monster_IdNull() {
        return this->IsNull(this->tableocc_monster->walking_monster_IdColumn);
    }
    
    inline ::System::Void NewDataSet::occ_monsterRow::Setwalking_monster_IdNull() {
        this[this->tableocc_monster->walking_monster_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::occ_monsterRow::Isflying_monster_IdNull() {
        return this->IsNull(this->tableocc_monster->flying_monster_IdColumn);
    }
    
    inline ::System::Void NewDataSet::occ_monsterRow::Setflying_monster_IdNull() {
        this[this->tableocc_monster->flying_monster_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::occ_monsterRow::Isshell_monster_IdNull() {
        return this->IsNull(this->tableocc_monster->shell_monster_IdColumn);
    }
    
    inline ::System::Void NewDataSet::occ_monsterRow::Setshell_monster_IdNull() {
        this[this->tableocc_monster->shell_monster_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::flying_monsterRow::flying_monsterRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableflying_monster = (cli::safe_cast<SMP::NewDataSet::flying_monsterDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::flying_monsterRow::name::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableflying_monster->nameColumn]));
    }
    inline System::Void NewDataSet::flying_monsterRow::name::set(System::String^  value) {
        this[this->tableflying_monster->nameColumn] = value;
    }
    
    inline System::Int32 NewDataSet::flying_monsterRow::flying_monster_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tableflying_monster->flying_monster_IdColumn]));
    }
    inline System::Void NewDataSet::flying_monsterRow::flying_monster_Id::set(System::Int32 value) {
        this[this->tableflying_monster->flying_monster_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::flying_monsterRow::monsters_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableflying_monster->monsters_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'monsters_Id\' in table \'flying_monster\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::flying_monsterRow::monsters_Id::set(System::Int32 value) {
        this[this->tableflying_monster->monsters_IdColumn] = value;
    }
    
    inline SMP::NewDataSet::monstersRow^  NewDataSet::flying_monsterRow::monstersRow::get() {
        return (cli::safe_cast<SMP::NewDataSet::monstersRow^  >(this->GetParentRow(this->Table->ParentRelations[L"monsters_flying_monster"])));
    }
    inline System::Void NewDataSet::flying_monsterRow::monstersRow::set(SMP::NewDataSet::monstersRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"monsters_flying_monster"]);
    }
    
    inline ::System::Boolean NewDataSet::flying_monsterRow::Ismonsters_IdNull() {
        return this->IsNull(this->tableflying_monster->monsters_IdColumn);
    }
    
    inline ::System::Void NewDataSet::flying_monsterRow::Setmonsters_IdNull() {
        this[this->tableflying_monster->monsters_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< SMP::NewDataSet::occ_monsterRow^  >^  NewDataSet::flying_monsterRow::Getocc_monsterRows() {
        if (this->Table->ChildRelations[L"flying_monster_occ_monster"] == nullptr) {
            return gcnew cli::array< SMP::NewDataSet::occ_monsterRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< SMP::NewDataSet::occ_monsterRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"flying_monster_occ_monster"])));
        }
    }
    
    
    inline NewDataSet::shell_monsterRow::shell_monsterRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableshell_monster = (cli::safe_cast<SMP::NewDataSet::shell_monsterDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::shell_monsterRow::name::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableshell_monster->nameColumn]));
    }
    inline System::Void NewDataSet::shell_monsterRow::name::set(System::String^  value) {
        this[this->tableshell_monster->nameColumn] = value;
    }
    
    inline System::Int32 NewDataSet::shell_monsterRow::shell_monster_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tableshell_monster->shell_monster_IdColumn]));
    }
    inline System::Void NewDataSet::shell_monsterRow::shell_monster_Id::set(System::Int32 value) {
        this[this->tableshell_monster->shell_monster_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::shell_monsterRow::monsters_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableshell_monster->monsters_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'monsters_Id\' in table \'shell_monster\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::shell_monsterRow::monsters_Id::set(System::Int32 value) {
        this[this->tableshell_monster->monsters_IdColumn] = value;
    }
    
    inline SMP::NewDataSet::monstersRow^  NewDataSet::shell_monsterRow::monstersRow::get() {
        return (cli::safe_cast<SMP::NewDataSet::monstersRow^  >(this->GetParentRow(this->Table->ParentRelations[L"monsters_shell_monster"])));
    }
    inline System::Void NewDataSet::shell_monsterRow::monstersRow::set(SMP::NewDataSet::monstersRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"monsters_shell_monster"]);
    }
    
    inline ::System::Boolean NewDataSet::shell_monsterRow::Ismonsters_IdNull() {
        return this->IsNull(this->tableshell_monster->monsters_IdColumn);
    }
    
    inline ::System::Void NewDataSet::shell_monsterRow::Setmonsters_IdNull() {
        this[this->tableshell_monster->monsters_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< SMP::NewDataSet::occ_monsterRow^  >^  NewDataSet::shell_monsterRow::Getocc_monsterRows() {
        if (this->Table->ChildRelations[L"shell_monster_occ_monster"] == nullptr) {
            return gcnew cli::array< SMP::NewDataSet::occ_monsterRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< SMP::NewDataSet::occ_monsterRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"shell_monster_occ_monster"])));
        }
    }
    
    
    inline NewDataSet::pipesRow::pipesRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tablepipes = (cli::safe_cast<SMP::NewDataSet::pipesDataTable^  >(this->Table));
    }
    
    inline System::Int32 NewDataSet::pipesRow::pipes_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tablepipes->pipes_IdColumn]));
    }
    inline System::Void NewDataSet::pipesRow::pipes_Id::set(System::Int32 value) {
        this[this->tablepipes->pipes_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::pipesRow::level_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tablepipes->level_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'level_Id\' in table \'pipes\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::pipesRow::level_Id::set(System::Int32 value) {
        this[this->tablepipes->level_IdColumn] = value;
    }
    
    inline SMP::NewDataSet::levelRow^  NewDataSet::pipesRow::levelRow::get() {
        return (cli::safe_cast<SMP::NewDataSet::levelRow^  >(this->GetParentRow(this->Table->ParentRelations[L"level_pipes"])));
    }
    inline System::Void NewDataSet::pipesRow::levelRow::set(SMP::NewDataSet::levelRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"level_pipes"]);
    }
    
    inline ::System::Boolean NewDataSet::pipesRow::Islevel_IdNull() {
        return this->IsNull(this->tablepipes->level_IdColumn);
    }
    
    inline ::System::Void NewDataSet::pipesRow::Setlevel_IdNull() {
        this[this->tablepipes->level_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< SMP::NewDataSet::pipeRow^  >^  NewDataSet::pipesRow::GetpipeRows() {
        if (this->Table->ChildRelations[L"pipes_pipe"] == nullptr) {
            return gcnew cli::array< SMP::NewDataSet::pipeRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< SMP::NewDataSet::pipeRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"pipes_pipe"])));
        }
    }
    
    
    inline NewDataSet::pipeRow::pipeRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tablepipe = (cli::safe_cast<SMP::NewDataSet::pipeDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::pipeRow::img::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tablepipe->imgColumn]));
    }
    inline System::Void NewDataSet::pipeRow::img::set(System::String^  value) {
        this[this->tablepipe->imgColumn] = value;
    }
    
    inline System::Single NewDataSet::pipeRow::positionX::get() {
        return (cli::safe_cast<::System::Single >(this[this->tablepipe->positionXColumn]));
    }
    inline System::Void NewDataSet::pipeRow::positionX::set(System::Single value) {
        this[this->tablepipe->positionXColumn] = value;
    }
    
    inline System::Single NewDataSet::pipeRow::positionY::get() {
        return (cli::safe_cast<::System::Single >(this[this->tablepipe->positionYColumn]));
    }
    inline System::Void NewDataSet::pipeRow::positionY::set(System::Single value) {
        this[this->tablepipe->positionYColumn] = value;
    }
    
    inline System::Byte NewDataSet::pipeRow::destination_pipe::get() {
        return (cli::safe_cast<::System::Byte >(this[this->tablepipe->destination_pipeColumn]));
    }
    inline System::Void NewDataSet::pipeRow::destination_pipe::set(System::Byte value) {
        this[this->tablepipe->destination_pipeColumn] = value;
    }
    
    inline System::String^  NewDataSet::pipeRow::level_destination::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tablepipe->level_destinationColumn]));
    }
    inline System::Void NewDataSet::pipeRow::level_destination::set(System::String^  value) {
        this[this->tablepipe->level_destinationColumn] = value;
    }
    
    inline System::Byte NewDataSet::pipeRow::state::get() {
        return (cli::safe_cast<::System::Byte >(this[this->tablepipe->stateColumn]));
    }
    inline System::Void NewDataSet::pipeRow::state::set(System::Byte value) {
        this[this->tablepipe->stateColumn] = value;
    }
    
    inline System::Byte NewDataSet::pipeRow::length::get() {
        return (cli::safe_cast<::System::Byte >(this[this->tablepipe->lengthColumn]));
    }
    inline System::Void NewDataSet::pipeRow::length::set(System::Byte value) {
        this[this->tablepipe->lengthColumn] = value;
    }
    
    inline System::Byte NewDataSet::pipeRow::direction::get() {
        return (cli::safe_cast<::System::Byte >(this[this->tablepipe->directionColumn]));
    }
    inline System::Void NewDataSet::pipeRow::direction::set(System::Byte value) {
        this[this->tablepipe->directionColumn] = value;
    }
    
    inline System::SByte NewDataSet::pipeRow::monster::get() {
        return (cli::safe_cast<::System::SByte >(this[this->tablepipe->monsterColumn]));
    }
    inline System::Void NewDataSet::pipeRow::monster::set(System::SByte value) {
        this[this->tablepipe->monsterColumn] = value;
    }
    
    inline System::Int32 NewDataSet::pipeRow::pipes_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tablepipe->pipes_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'pipes_Id\' in table \'pipe\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::pipeRow::pipes_Id::set(System::Int32 value) {
        this[this->tablepipe->pipes_IdColumn] = value;
    }
    
    inline SMP::NewDataSet::pipesRow^  NewDataSet::pipeRow::pipesRow::get() {
        return (cli::safe_cast<SMP::NewDataSet::pipesRow^  >(this->GetParentRow(this->Table->ParentRelations[L"pipes_pipe"])));
    }
    inline System::Void NewDataSet::pipeRow::pipesRow::set(SMP::NewDataSet::pipesRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"pipes_pipe"]);
    }
    
    inline ::System::Boolean NewDataSet::pipeRow::Ispipes_IdNull() {
        return this->IsNull(this->tablepipe->pipes_IdColumn);
    }
    
    inline ::System::Void NewDataSet::pipeRow::Setpipes_IdNull() {
        this[this->tablepipe->pipes_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::blocksRow::blocksRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableblocks = (cli::safe_cast<SMP::NewDataSet::blocksDataTable^  >(this->Table));
    }
    
    inline System::Int32 NewDataSet::blocksRow::blocks_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tableblocks->blocks_IdColumn]));
    }
    inline System::Void NewDataSet::blocksRow::blocks_Id::set(System::Int32 value) {
        this[this->tableblocks->blocks_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::blocksRow::level_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableblocks->level_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'level_Id\' in table \'blocks\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::blocksRow::level_Id::set(System::Int32 value) {
        this[this->tableblocks->level_IdColumn] = value;
    }
    
    inline SMP::NewDataSet::levelRow^  NewDataSet::blocksRow::levelRow::get() {
        return (cli::safe_cast<SMP::NewDataSet::levelRow^  >(this->GetParentRow(this->Table->ParentRelations[L"level_blocks"])));
    }
    inline System::Void NewDataSet::blocksRow::levelRow::set(SMP::NewDataSet::levelRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"level_blocks"]);
    }
    
    inline ::System::Boolean NewDataSet::blocksRow::Islevel_IdNull() {
        return this->IsNull(this->tableblocks->level_IdColumn);
    }
    
    inline ::System::Void NewDataSet::blocksRow::Setlevel_IdNull() {
        this[this->tableblocks->level_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< SMP::NewDataSet::tilesetRow^  >^  NewDataSet::blocksRow::GettilesetRows() {
        if (this->Table->ChildRelations[L"blocks_tileset"] == nullptr) {
            return gcnew cli::array< SMP::NewDataSet::tilesetRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< SMP::NewDataSet::tilesetRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"blocks_tileset"])));
        }
    }
    
    inline cli::array< SMP::NewDataSet::layersRow^  >^  NewDataSet::blocksRow::GetlayersRows() {
        if (this->Table->ChildRelations[L"blocks_layers"] == nullptr) {
            return gcnew cli::array< SMP::NewDataSet::layersRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< SMP::NewDataSet::layersRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"blocks_layers"])));
        }
    }
    
    
    inline NewDataSet::tilesetRow::tilesetRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tabletileset = (cli::safe_cast<SMP::NewDataSet::tilesetDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::tilesetRow::img::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tabletileset->imgColumn]));
    }
    inline System::Void NewDataSet::tilesetRow::img::set(System::String^  value) {
        this[this->tabletileset->imgColumn] = value;
    }
    
    inline System::Single NewDataSet::tilesetRow::blocSizeX::get() {
        return (cli::safe_cast<::System::Single >(this[this->tabletileset->blocSizeXColumn]));
    }
    inline System::Void NewDataSet::tilesetRow::blocSizeX::set(System::Single value) {
        this[this->tabletileset->blocSizeXColumn] = value;
    }
    
    inline System::Single NewDataSet::tilesetRow::blocSizeY::get() {
        return (cli::safe_cast<::System::Single >(this[this->tabletileset->blocSizeYColumn]));
    }
    inline System::Void NewDataSet::tilesetRow::blocSizeY::set(System::Single value) {
        this[this->tabletileset->blocSizeYColumn] = value;
    }
    
    inline System::Int32 NewDataSet::tilesetRow::tileset_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tabletileset->tileset_IdColumn]));
    }
    inline System::Void NewDataSet::tilesetRow::tileset_Id::set(System::Int32 value) {
        this[this->tabletileset->tileset_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::tilesetRow::blocks_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tabletileset->blocks_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'blocks_Id\' in table \'tileset\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::tilesetRow::blocks_Id::set(System::Int32 value) {
        this[this->tabletileset->blocks_IdColumn] = value;
    }
    
    inline SMP::NewDataSet::blocksRow^  NewDataSet::tilesetRow::blocksRow::get() {
        return (cli::safe_cast<SMP::NewDataSet::blocksRow^  >(this->GetParentRow(this->Table->ParentRelations[L"blocks_tileset"])));
    }
    inline System::Void NewDataSet::tilesetRow::blocksRow::set(SMP::NewDataSet::blocksRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"blocks_tileset"]);
    }
    
    inline ::System::Boolean NewDataSet::tilesetRow::Isblocks_IdNull() {
        return this->IsNull(this->tabletileset->blocks_IdColumn);
    }
    
    inline ::System::Void NewDataSet::tilesetRow::Setblocks_IdNull() {
        this[this->tabletileset->blocks_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< SMP::NewDataSet::blockRow^  >^  NewDataSet::tilesetRow::GetblockRows() {
        if (this->Table->ChildRelations[L"tileset_block"] == nullptr) {
            return gcnew cli::array< SMP::NewDataSet::blockRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< SMP::NewDataSet::blockRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"tileset_block"])));
        }
    }
    
    
    inline NewDataSet::blockRow::blockRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableblock = (cli::safe_cast<SMP::NewDataSet::blockDataTable^  >(this->Table));
    }
    
    inline System::UInt32 NewDataSet::blockRow::type_bloc::get() {
        return (cli::safe_cast<::System::UInt32 >(this[this->tableblock->type_blocColumn]));
    }
    inline System::Void NewDataSet::blockRow::type_bloc::set(System::UInt32 value) {
        this[this->tableblock->type_blocColumn] = value;
    }
    
    inline System::UInt32 NewDataSet::blockRow::physicIndex::get() {
        return (cli::safe_cast<::System::UInt32 >(this[this->tableblock->physicIndexColumn]));
    }
    inline System::Void NewDataSet::blockRow::physicIndex::set(System::UInt32 value) {
        this[this->tableblock->physicIndexColumn] = value;
    }
    
    inline System::Int32 NewDataSet::blockRow::tileset_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableblock->tileset_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'tileset_Id\' in table \'block\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::blockRow::tileset_Id::set(System::Int32 value) {
        this[this->tableblock->tileset_IdColumn] = value;
    }
    
    inline SMP::NewDataSet::tilesetRow^  NewDataSet::blockRow::tilesetRow::get() {
        return (cli::safe_cast<SMP::NewDataSet::tilesetRow^  >(this->GetParentRow(this->Table->ParentRelations[L"tileset_block"])));
    }
    inline System::Void NewDataSet::blockRow::tilesetRow::set(SMP::NewDataSet::tilesetRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"tileset_block"]);
    }
    
    inline ::System::Boolean NewDataSet::blockRow::Istileset_IdNull() {
        return this->IsNull(this->tableblock->tileset_IdColumn);
    }
    
    inline ::System::Void NewDataSet::blockRow::Settileset_IdNull() {
        this[this->tableblock->tileset_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::layersRow::layersRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tablelayers = (cli::safe_cast<SMP::NewDataSet::layersDataTable^  >(this->Table));
    }
    
    inline System::Byte NewDataSet::layersRow::nb::get() {
        return (cli::safe_cast<::System::Byte >(this[this->tablelayers->nbColumn]));
    }
    inline System::Void NewDataSet::layersRow::nb::set(System::Byte value) {
        this[this->tablelayers->nbColumn] = value;
    }
    
    inline System::Int32 NewDataSet::layersRow::layers_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tablelayers->layers_IdColumn]));
    }
    inline System::Void NewDataSet::layersRow::layers_Id::set(System::Int32 value) {
        this[this->tablelayers->layers_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::layersRow::blocks_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tablelayers->blocks_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'blocks_Id\' in table \'layers\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::layersRow::blocks_Id::set(System::Int32 value) {
        this[this->tablelayers->blocks_IdColumn] = value;
    }
    
    inline SMP::NewDataSet::blocksRow^  NewDataSet::layersRow::blocksRow::get() {
        return (cli::safe_cast<SMP::NewDataSet::blocksRow^  >(this->GetParentRow(this->Table->ParentRelations[L"blocks_layers"])));
    }
    inline System::Void NewDataSet::layersRow::blocksRow::set(SMP::NewDataSet::blocksRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"blocks_layers"]);
    }
    
    inline ::System::Boolean NewDataSet::layersRow::Isblocks_IdNull() {
        return this->IsNull(this->tablelayers->blocks_IdColumn);
    }
    
    inline ::System::Void NewDataSet::layersRow::Setblocks_IdNull() {
        this[this->tablelayers->blocks_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< SMP::NewDataSet::layerRow^  >^  NewDataSet::layersRow::GetlayerRows() {
        if (this->Table->ChildRelations[L"layers_layer"] == nullptr) {
            return gcnew cli::array< SMP::NewDataSet::layerRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< SMP::NewDataSet::layerRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"layers_layer"])));
        }
    }
    
    
    inline NewDataSet::layerRow::layerRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tablelayer = (cli::safe_cast<SMP::NewDataSet::layerDataTable^  >(this->Table));
    }
    
    inline System::Byte NewDataSet::layerRow::index::get() {
        return (cli::safe_cast<::System::Byte >(this[this->tablelayer->indexColumn]));
    }
    inline System::Void NewDataSet::layerRow::index::set(System::Byte value) {
        this[this->tablelayer->indexColumn] = value;
    }
    
    inline System::Int32 NewDataSet::layerRow::layer_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tablelayer->layer_IdColumn]));
    }
    inline System::Void NewDataSet::layerRow::layer_Id::set(System::Int32 value) {
        this[this->tablelayer->layer_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::layerRow::layers_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tablelayer->layers_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'layers_Id\' in table \'layer\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::layerRow::layers_Id::set(System::Int32 value) {
        this[this->tablelayer->layers_IdColumn] = value;
    }
    
    inline SMP::NewDataSet::layersRow^  NewDataSet::layerRow::layersRow::get() {
        return (cli::safe_cast<SMP::NewDataSet::layersRow^  >(this->GetParentRow(this->Table->ParentRelations[L"layers_layer"])));
    }
    inline System::Void NewDataSet::layerRow::layersRow::set(SMP::NewDataSet::layersRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"layers_layer"]);
    }
    
    inline ::System::Boolean NewDataSet::layerRow::Islayers_IdNull() {
        return this->IsNull(this->tablelayer->layers_IdColumn);
    }
    
    inline ::System::Void NewDataSet::layerRow::Setlayers_IdNull() {
        this[this->tablelayer->layers_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< SMP::NewDataSet::occ_blockRow^  >^  NewDataSet::layerRow::Getocc_blockRows() {
        if (this->Table->ChildRelations[L"layer_occ_block"] == nullptr) {
            return gcnew cli::array< SMP::NewDataSet::occ_blockRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< SMP::NewDataSet::occ_blockRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"layer_occ_block"])));
        }
    }
    
    
    inline NewDataSet::occ_blockRow::occ_blockRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableocc_block = (cli::safe_cast<SMP::NewDataSet::occ_blockDataTable^  >(this->Table));
    }
    
    inline System::Single NewDataSet::occ_blockRow::positionX::get() {
        return (cli::safe_cast<::System::Single >(this[this->tableocc_block->positionXColumn]));
    }
    inline System::Void NewDataSet::occ_blockRow::positionX::set(System::Single value) {
        this[this->tableocc_block->positionXColumn] = value;
    }
    
    inline System::Single NewDataSet::occ_blockRow::positionY::get() {
        return (cli::safe_cast<::System::Single >(this[this->tableocc_block->positionYColumn]));
    }
    inline System::Void NewDataSet::occ_blockRow::positionY::set(System::Single value) {
        this[this->tableocc_block->positionYColumn] = value;
    }
    
    inline System::Byte NewDataSet::occ_blockRow::actual::get() {
        return (cli::safe_cast<::System::Byte >(this[this->tableocc_block->actualColumn]));
    }
    inline System::Void NewDataSet::occ_blockRow::actual::set(System::Byte value) {
        this[this->tableocc_block->actualColumn] = value;
    }
    
    inline System::SByte NewDataSet::occ_blockRow::alt::get() {
        return (cli::safe_cast<::System::SByte >(this[this->tableocc_block->altColumn]));
    }
    inline System::Void NewDataSet::occ_blockRow::alt::set(System::SByte value) {
        this[this->tableocc_block->altColumn] = value;
    }
    
    inline System::SByte NewDataSet::occ_blockRow::item::get() {
        return (cli::safe_cast<::System::SByte >(this[this->tableocc_block->itemColumn]));
    }
    inline System::Void NewDataSet::occ_blockRow::item::set(System::SByte value) {
        this[this->tableocc_block->itemColumn] = value;
    }
    
    inline System::Int32 NewDataSet::occ_blockRow::layer_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableocc_block->layer_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'layer_Id\' in table \'occ_block\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::occ_blockRow::layer_Id::set(System::Int32 value) {
        this[this->tableocc_block->layer_IdColumn] = value;
    }
    
    inline SMP::NewDataSet::layerRow^  NewDataSet::occ_blockRow::layerRow::get() {
        return (cli::safe_cast<SMP::NewDataSet::layerRow^  >(this->GetParentRow(this->Table->ParentRelations[L"layer_occ_block"])));
    }
    inline System::Void NewDataSet::occ_blockRow::layerRow::set(SMP::NewDataSet::layerRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"layer_occ_block"]);
    }
    
    inline ::System::Boolean NewDataSet::occ_blockRow::Islayer_IdNull() {
        return this->IsNull(this->tableocc_block->layer_IdColumn);
    }
    
    inline ::System::Void NewDataSet::occ_blockRow::Setlayer_IdNull() {
        this[this->tableocc_block->layer_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::levelRowChangeEvent::levelRowChangeEvent(SMP::NewDataSet::levelRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline SMP::NewDataSet::levelRow^  NewDataSet::levelRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::levelRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::spawnRowChangeEvent::spawnRowChangeEvent(SMP::NewDataSet::spawnRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline SMP::NewDataSet::spawnRow^  NewDataSet::spawnRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::spawnRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::checkpointsRowChangeEvent::checkpointsRowChangeEvent(SMP::NewDataSet::checkpointsRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline SMP::NewDataSet::checkpointsRow^  NewDataSet::checkpointsRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::checkpointsRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::checkpointRowChangeEvent::checkpointRowChangeEvent(SMP::NewDataSet::checkpointRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline SMP::NewDataSet::checkpointRow^  NewDataSet::checkpointRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::checkpointRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::backgroundsRowChangeEvent::backgroundsRowChangeEvent(SMP::NewDataSet::backgroundsRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline SMP::NewDataSet::backgroundsRow^  NewDataSet::backgroundsRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::backgroundsRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::backgroundRowChangeEvent::backgroundRowChangeEvent(SMP::NewDataSet::backgroundRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline SMP::NewDataSet::backgroundRow^  NewDataSet::backgroundRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::backgroundRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::foregroundsRowChangeEvent::foregroundsRowChangeEvent(SMP::NewDataSet::foregroundsRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline SMP::NewDataSet::foregroundsRow^  NewDataSet::foregroundsRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::foregroundsRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::foregroundRowChangeEvent::foregroundRowChangeEvent(SMP::NewDataSet::foregroundRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline SMP::NewDataSet::foregroundRow^  NewDataSet::foregroundRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::foregroundRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::objectsRowChangeEvent::objectsRowChangeEvent(SMP::NewDataSet::objectsRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline SMP::NewDataSet::objectsRow^  NewDataSet::objectsRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::objectsRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::objectRowChangeEvent::objectRowChangeEvent(SMP::NewDataSet::objectRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline SMP::NewDataSet::objectRow^  NewDataSet::objectRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::objectRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::finishesRowChangeEvent::finishesRowChangeEvent(SMP::NewDataSet::finishesRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline SMP::NewDataSet::finishesRow^  NewDataSet::finishesRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::finishesRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::finishRowChangeEvent::finishRowChangeEvent(SMP::NewDataSet::finishRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline SMP::NewDataSet::finishRow^  NewDataSet::finishRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::finishRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::projectilesRowChangeEvent::projectilesRowChangeEvent(SMP::NewDataSet::projectilesRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline SMP::NewDataSet::projectilesRow^  NewDataSet::projectilesRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::projectilesRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::projectileRowChangeEvent::projectileRowChangeEvent(SMP::NewDataSet::projectileRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline SMP::NewDataSet::projectileRow^  NewDataSet::projectileRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::projectileRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::itemsRowChangeEvent::itemsRowChangeEvent(SMP::NewDataSet::itemsRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline SMP::NewDataSet::itemsRow^  NewDataSet::itemsRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::itemsRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::itemRowChangeEvent::itemRowChangeEvent(SMP::NewDataSet::itemRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline SMP::NewDataSet::itemRow^  NewDataSet::itemRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::itemRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::monstersRowChangeEvent::monstersRowChangeEvent(SMP::NewDataSet::monstersRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline SMP::NewDataSet::monstersRow^  NewDataSet::monstersRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::monstersRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::walking_monsterRowChangeEvent::walking_monsterRowChangeEvent(SMP::NewDataSet::walking_monsterRow^  row, 
                ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline SMP::NewDataSet::walking_monsterRow^  NewDataSet::walking_monsterRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::walking_monsterRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::occ_monsterRowChangeEvent::occ_monsterRowChangeEvent(SMP::NewDataSet::occ_monsterRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline SMP::NewDataSet::occ_monsterRow^  NewDataSet::occ_monsterRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::occ_monsterRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::flying_monsterRowChangeEvent::flying_monsterRowChangeEvent(SMP::NewDataSet::flying_monsterRow^  row, 
                ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline SMP::NewDataSet::flying_monsterRow^  NewDataSet::flying_monsterRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::flying_monsterRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::shell_monsterRowChangeEvent::shell_monsterRowChangeEvent(SMP::NewDataSet::shell_monsterRow^  row, 
                ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline SMP::NewDataSet::shell_monsterRow^  NewDataSet::shell_monsterRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::shell_monsterRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::pipesRowChangeEvent::pipesRowChangeEvent(SMP::NewDataSet::pipesRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline SMP::NewDataSet::pipesRow^  NewDataSet::pipesRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::pipesRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::pipeRowChangeEvent::pipeRowChangeEvent(SMP::NewDataSet::pipeRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline SMP::NewDataSet::pipeRow^  NewDataSet::pipeRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::pipeRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::blocksRowChangeEvent::blocksRowChangeEvent(SMP::NewDataSet::blocksRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline SMP::NewDataSet::blocksRow^  NewDataSet::blocksRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::blocksRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::tilesetRowChangeEvent::tilesetRowChangeEvent(SMP::NewDataSet::tilesetRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline SMP::NewDataSet::tilesetRow^  NewDataSet::tilesetRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::tilesetRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::blockRowChangeEvent::blockRowChangeEvent(SMP::NewDataSet::blockRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline SMP::NewDataSet::blockRow^  NewDataSet::blockRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::blockRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::layersRowChangeEvent::layersRowChangeEvent(SMP::NewDataSet::layersRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline SMP::NewDataSet::layersRow^  NewDataSet::layersRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::layersRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::layerRowChangeEvent::layerRowChangeEvent(SMP::NewDataSet::layerRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline SMP::NewDataSet::layerRow^  NewDataSet::layerRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::layerRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::occ_blockRowChangeEvent::occ_blockRowChangeEvent(SMP::NewDataSet::occ_blockRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline SMP::NewDataSet::occ_blockRow^  NewDataSet::occ_blockRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::occ_blockRowChangeEvent::Action::get() {
        return this->eventAction;
    }
}
